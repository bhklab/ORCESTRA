{"version":3,"sources":["context/auth.js","components/Navigation/Navigation.js","components/Footer/Footer.js","components/Routing/PrivateRoute.js","components/PSet/PSetAccordion.js","components/MainDialog/MainDialog.js","components/Main/Main.js","components/Shared/PSetDropdown/PSetDropdown.js","components/PSetSearch/subcomponents/PSetFilter.js","components/Shared/APICalls.js","components/Shared/PSetTable.js","components/Shared/Buttons/SavePSetButton.js","components/Shared/PSetAPIHelper.js","components/PSetSearch/PSetSearch.js","components/Dashboard/Dashboard.js","components/Stats/DownloadChart.js","components/Stats/Stats.js","components/Documentation/DocFunctionality/Overview.js","components/Documentation/DocFunctionality/Search.js","components/Documentation/DocFunctionality/Request.js","components/Documentation/DocFunctionality/UserProfile.js","components/Documentation/DocFunctionality/Statistics.js","components/Documentation/Documentation.js","components/Documentation/Support/Tutorial.js","components/Profile/subcomponents/UserInfo.js","components/Shared/Buttons/DownloadPSetButton.js","components/Profile/subcomponents/UserPSet.js","components/Profile/Profile.js","components/Authentication/AuthForm.js","components/Authentication/Login.js","components/PSet/TabContents/DatasetTabContent.js","components/PSet/TabContents/RNATabContent.js","components/PSet/TabContents/DNATabContent.js","components/PSet/PSet.js","components/Routing/Router.js","components/App/App.js","components/serviceWorker.js","index.js"],"names":["AuthContext","createContext","withRouter","props","auth","useContext","useState","isOnline","setIsOnline","location","history","useEffect","a","fetch","status","json","checkStatus","onLoginClick","event","preventDefault","push","pathname","state","path","onLogoutClick","username","then","res","resetAuthToken","logoutMsg","Fragment","exact","to","src","alt","className","activeClassName","authenticated","label","onClick","width","isOpen","Footer","href","PrivateRoute","data","context","setAuthToken","userAuth","this","render","React","cloneElement","component","redirect","Component","contextType","PSetToolAccordion","toolAccordionTabs","items","map","item","key","name","header","commands","length","command","multiple","RNARefAccordion","rnaRefAccordionTabs","source","DNARefAccordion","exomeRefAccordionTabs","cosmic","exonTarget","GeneralInfoAccordion","dateCreated","createdBy","DatasetDialog","datasetAccordionTabs","dataset","publication","p","link","citation","drugSensitivity","version","visible","onHide","style","minWidth","minHeight","RNADialog","renderActiveOnly","rna","tool","ref","DNADialog","dna","OrcestraMain","statsData","setStatsData","rnaTool","dnaTool","rnaRef","dnaRef","formData","setFormData","pending","inProcess","dashboard","setDashboard","datasetVisible","setDatasetVisible","rnaVisible","setRNAVisible","dnaVisible","setDNAVisible","api","console","log","pset","form","fetchData","showDialog","type","hideDialog","alignSelf","value","field","body","rowData","column","route","doi","PSetDropdown","dataTemplate","option","fontSize","margin","isHidden","selectOne","parameterName","id","optionLabel","selectedParameter","options","parameterOptions","onChange","handleUpdateSelection","filter","itemTemplate","placeholder","disabled","selectedItemTemplate","formDataInit","rnaRefOptions","dnaRefOptions","url","response","PSetFilter","SearchReqContext","dataType","setDataType","setDataset","genome","setGenome","setRNATool","setRNARef","setDNATool","setDNARef","hideRNAToolRef","setHideRNAToolRef","hideDNAToolRef","setHideDNAToolRef","getParameters","formDataset","initialize","parameters","setParameters","dnaRefs","rnaRefs","Array","isArray","genomeName","includes","checked","isRequest","tooltip","e","fData","JSON","parse","stringify","setIsRequest","setRequestView","queryPSet","callback","resData","PSetTable","rows","first","start","end","totalRecords","loading","setState","downloadOnePSet","psetID","psetIDs","method","headers","catch","err","API","anchor","document","createElement","setAttribute","display","appendChild","click","removeChild","toolsRefTemplate","output","allData","selection","selectedPSets","onSelectionChange","updatePSetSelection","paginator","scrollable","selectionMode","sortable","downloadLink","_id","SavePSetButton","saveSelectedPSets","userPSet","psetId","i","reqData","APICalls","onSaveComplete","bind","getFilterSet","filterset","datatype","toFilterArray","datasetName","datasetVersion","buildAPIStr","filterSet","apiStr","apiFragments","buildAPIStrFragment","replace","isNotReadyToSubmit","request","isSelected","hasName","email","test","isValidEmail","reqParam","messageAfterRequest","msgComponent","show","severity","summary","detail","message","sticky","toString","selectedValues","isDatasetVersion","filterArray","Object","keys","constructor","keyName","apiFragment","PSetSearch","setAllData","searchAll","setSearchAll","setSelectedPSets","disableSaveBtn","setDisableSaveBtn","notReadyToSubmit","setNotReadyToSubmit","setName","setEmail","psets","initializeView","APIHelper","update","params","updatePSets","showMessage","messages","initializeState","handleSubmitRequest","trackPromise","ok","Provider","el","target","usePromiseTracker","promiseInProgress","color","height","selected","scrollHeight","Dashboard","setData","setLoading","submitRequest","result","onSubmit","dateTimeTemplate","dateTimeStr","Date","toLocaleString","undefined","dateStyle","timeStyle","d","isAdmin","button","Plot","createPlotlyComponent","Plotly","DownloadChart","x","y","orientation","marker","layout","autosize","title","xaxis","text","font","size","yaxis","autorange","titlefont","useResizeHandler","Stats","chartData","disableBtn","isReady","showMessages","download","showDownload","Overview","Search","Request","UserProfile","Statistics","Documentation","setDisplay","Tutorial","routing","UserInfo","user","showModal","hideModal","DownloadPSetButton","downloadPSets","UserPSet","handleBtnClick","dialogVisible","btnDisabled","btnYesDislabed","handleSelectionChange","onClickYes","psetData","onDownloadComplete","btnLabel","noPSetData","dialogFooter","heading","footer","modal","Profile","removeFromSavedList","selectedPSet","saved","psetSaved","removePSetByID","cancelPSetRequest","psetInProcess","userEmail","findPSetByID","complete","psetArray","index","splice","AuthForm","password","setPassword","passwordReg1","setPasswordReg1","passwordReg2","setPasswordReg2","userChecked","setUserChecked","userExists","setUserExists","userRegistered","setUserRegistered","btnFindDisabled","setBtnFindDisabled","btnLoginDisabled","setBtnLoginDisabled","btnRegDisabled","setBtnRegDisabled","handleInputChange","onFindClick","exists","registered","onRegisterClick","icon","msg","DatasetTabContent","metadata","RNATabContent","genomeRawData","rawSeqDataRNA","DNATabContent","rawSeqDataDNA","PSet","general","match","id1","id2","Router","profile","Main","Login","App","Boolean","window","hostname","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yeAEaA,EAAcC,0B,8DCkGZC,eA5FI,SAACC,GAEhB,IAAMC,EAAOC,qBAAWL,GAFE,EAGMM,oBAAS,GAHf,mBAGnBC,EAHmB,KAGTC,EAHS,KAIlBC,EAAsBN,EAAtBM,SAAUC,EAAYP,EAAZO,QAElBC,qBAAU,YACW,uCAAG,8BAAAC,EAAA,sEACKC,MAAM,qBADX,cACVC,EADU,gBAEGA,EAAOC,OAFV,OAEVA,EAFU,OAGhBP,EAAYO,EAAKR,UAHD,2CAAH,qDAKjBS,KACD,IAEH,IAAMC,EAAe,SAACC,GAClBA,EAAMC,iBACNT,EAAQU,KAAK,CAACC,SAAU,kBAAmBC,MAAM,CAACC,KAAMd,EAASY,aAG/DG,EAAgB,SAACN,GACnBA,EAAMC,iBACNN,MAAM,iBAAmBT,EAAKqB,UACzBC,MAAK,SAAAC,GACFvB,EAAKwB,iBACLlB,EAAQU,KAAK,CAACC,SAAU,kBAAmBC,MAAM,CAACC,KAAMd,EAASY,SAAUQ,UAAW,6BAIlG,OACI,kBAAC,IAAMC,SAAP,KACI,gCACI,kBAAC,IAAD,CAASC,OAAK,EAACC,GAAG,KAAI,yBAAKC,IAA8B,+BAAgCC,IAAI,MAC7F,yBAAKC,UAAU,mBACX,yBAAKA,UAAU,UACX,6BAAK,kBAAC,IAAD,CAASJ,OAAK,EAACC,GAAG,IAAII,gBAAgB,eAAtC,SACL,6BAAK,kBAAC,IAAD,CAASL,OAAK,EAACC,GAAG,cAAcI,gBAAgB,eAAhD,uBACL,6BAAK,kBAAC,IAAD,CAASL,OAAK,EAACC,GAAG,aAAaI,gBAAgB,eAA/C,mBACL,6BAAK,kBAAC,IAAD,CAASL,OAAK,EAACC,GAAG,iBAAiBI,gBAAgB,eAAnD,kBACHhC,EAAKiC,eAAiB,yBAAKF,UAAU,aAAY,kBAAC,IAAD,CAASJ,OAAK,EAACC,GAAG,WAAWI,gBAAgB,eAA7C,YACnD,6BAEQhC,EAAKiC,cACL,kBAAC,SAAD,CAAQC,MAAM,SAASC,QAASf,IAAmB,kBAAC,SAAD,CAAQc,MAAM,iBAAiBC,QAAStB,KAGnG,6BACKV,EACG,yBAAK4B,UAAU,4BACX,yBAAKA,UAAU,QAAO,uBAAGA,UAAU,iBAAwB,yBAAKA,UAAU,QAAf,gBAAmC,6BAAnC,WAG/D,0BAAMA,UAAU,6BACZ,yBAAKA,UAAU,QAAO,uBAAGA,UAAU,eAAsB,yBAAKA,UAAU,QAAf,gBAAmC,6BAAnC,cAKzE,yBAAKA,UAAU,aACX,kBAAC,QAAD,CAAMK,MAAQ,IAAMC,QAAQ,GACxB,yBAAKN,UAAU,aAAY,kBAAC,IAAD,CAASJ,OAAK,EAACC,GAAG,IAAII,gBAAgB,eAAtC,SAC3B,yBAAKD,UAAU,aAAY,kBAAC,IAAD,CAASJ,OAAK,EAACC,GAAG,cAAcI,gBAAgB,eAAhD,uBAC3B,6BAAK,kBAAC,IAAD,CAASL,OAAK,EAACC,GAAG,aAAaI,gBAAgB,eAA/C,mBACL,6BAAK,kBAAC,IAAD,CAASL,OAAK,EAACC,GAAG,iBAAiBI,gBAAgB,eAAnD,kBACHhC,EAAKiC,eAAiB,yBAAKF,UAAU,aAAY,kBAAC,IAAD,CAASJ,OAAK,EAACC,GAAG,WAAWI,gBAAgB,eAA7C,YACnD,yBAAKD,UAAU,aAEP/B,EAAKiC,cACL,kBAAC,SAAD,CAAQC,MAAM,SAASC,QAASf,IAAmB,kBAAC,SAAD,CAAQc,MAAM,iBAAiBC,QAAStB,KAGnG,6BACKV,EACG,yBAAK4B,UAAU,4BACX,yBAAKA,UAAU,QAAO,uBAAGA,UAAU,iBAAwB,yBAAKA,UAAU,QAAf,gBAAmC,6BAAnC,WAG/D,0BAAMA,UAAU,6BACZ,yBAAKA,UAAU,QAAO,uBAAGA,UAAU,eAAsB,yBAAKA,UAAU,QAAf,gBAAmC,6BAAnC,gBAQjF,yBAAKA,UAAU,YAAY/B,EAAKiC,cAAgB,iBAAmBjC,EAAKqB,SAAW,SCzDpFiB,G,MAjCA,SAACvC,GACZ,OACI,yBAAKgC,UAAU,aACX,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,0BACX,oCACA,kBAAC,IAAD,CAASJ,OAAK,EAACC,GAAG,eAAlB,sBACA,kBAAC,IAAD,CAASD,OAAK,EAACC,GAAG,cAAlB,kBACA,kBAAC,IAAD,CAASD,OAAK,EAACC,GAAG,UAAlB,eAEJ,yBAAKG,UAAU,6BACX,uCACA,kBAAC,IAAD,CAASJ,OAAK,EAACC,GAAG,kBAAlB,iBACA,kBAAC,IAAD,CAASD,OAAK,EAACC,GAAG,aAAlB,0BACA,uBAAGW,KAAK,6BAAR,UACA,uBAAGA,KAAK,sBAAR,WAEJ,yBAAKR,UAAU,iBACX,sCACA,yBAAKA,UAAU,eAAf,kBAEI,6BAFJ,6BAIK,IACD,6BALJ,uB,0OCnBdS,E,4LAIkB,IAAD,OACf/B,MAAM,oBACDa,MAAK,SAAAC,GACF,OAAkB,MAAfA,EAAIb,OACIa,EAAIZ,OAEJ,CAACsB,eAAe,EAAOZ,SAAU,OAG/CC,MAAK,SAAAmB,GAAS,EAAKC,QAAQC,aAAaF,Q,+BAGxC,IAAD,OACEG,EAAWC,KAAKH,QACtB,OACI,kBAAC,IAAD,CACIf,OAAK,EAACR,KAAM0B,KAAK9C,MAAMoB,KACvB2B,OAAQ,SAAC/C,GAAD,OAAW6C,EAASX,cAAgBc,IAAMC,aAAa,EAAKjD,MAAMkD,U,yVAA9B,IAA6ClD,IAAW,kBAAC,IAAD,CAAU6B,GAAI,CAACX,SAAU,EAAKlB,MAAMmD,SAAUhC,MAAO,CAACC,KAAM,EAAKpB,MAAMoB,gB,GArBhK4B,IAAMI,WAA3BX,EAEKY,YAAcxD,EAyBV4C,Q,wCC5BTa,E,iLAGE,IAAMC,EAAoBT,KAAK9C,MAAMwD,MAAMC,KAAI,SAACC,GAAD,OAC3C,kBAAC,eAAD,CAAcC,IAAKD,EAAKE,KAAMC,OAAQH,EAAKE,MACtCF,EAAKI,SAASC,OACX,4BACKL,EAAKI,SAASL,KAAI,SAACO,GAAD,OACf,wBAAIL,IAAKK,GACJA,OAKb,oBAMZ,OACIlB,KAAK9C,MAAMwD,MAAMO,OACb,kBAAC,YAAD,CAAWE,UAAU,GAChBV,GAGL,yBAAKvB,UAAU,cAAf,qB,GA1BgBgB,IAAMI,WAgChCc,E,iLAGE,IAAMC,EAAsBrB,KAAK9C,MAAMwD,MAAMC,KAAI,SAACC,GAAD,OAC7C,kBAAC,eAAD,CAAcC,IAAKD,EAAKE,KAAMC,OAAQH,EAAKE,MACvC,4BACI,wBAAI5B,UAAU,cACV,6BAAM0B,EAAKE,KAAKG,OAASL,EAAKE,KAAO,2BACrC,6BAAMF,EAAKU,OAAOL,OAAS,uBAAGvB,KAAMkB,EAAKU,QAASV,EAAKU,QAAc,iCAMrF,OACItB,KAAK9C,MAAMwD,MAAMO,OACb,kBAAC,YAAD,CAAWE,UAAU,GAChBE,GAGL,yBAAKnC,UAAU,cAAf,qB,GApBcgB,IAAMI,WA0B9BiB,E,iLAGE,IAAMC,EAAwBxB,KAAK9C,MAAMwD,MAAMC,KAAI,SAACC,GAAD,OAC/C,kBAAC,eAAD,CAAcC,IAAKD,EAAKE,KAAMC,OAAQH,EAAKE,MACvC,4BACI,wBAAI5B,UAAU,cACV,6BAAM0B,EAAKE,KAAKG,OAASL,EAAKE,KAAM,2BACpC,6BAAMF,EAAKU,OAAOL,OAAS,uBAAGvB,KAAMkB,EAAKU,QAASV,EAAKU,QAAc,4BAEzE,wBAAIpC,UAAU,cACV,6BAAM0B,EAAKa,OAAOX,MAClB,6BAAK,uBAAGpB,KAAMkB,EAAKa,OAAOH,QAASV,EAAKa,OAAOH,QAA/C,MAEJ,wBAAIpC,UAAU,cACV,6BAAM0B,EAAKc,WAAWZ,MACtB,6BAAK,uBAAGpB,KAAMkB,EAAKc,WAAWJ,QAASV,EAAKc,WAAWJ,eAMvE,OACItB,KAAK9C,MAAMwD,MAAMO,OACb,kBAAC,YAAD,CAAWE,UAAU,GAChBK,GAGL,yBAAKtC,UAAU,cAAf,qB,GA5BcgB,IAAMI,WAkC9BqB,E,iLAEE,OACI,kBAAC,YAAD,CAAWzC,UAAU,wBACjB,kBAAC,eAAD,CAAc6B,OAAO,uBACjB,wBAAI7B,UAAU,cAAd,cAAuCc,KAAK9C,MAAM0C,KAAKkB,MACvD,wBAAI5B,UAAU,cAAd,iBAA0Cc,KAAK9C,MAAM0C,KAAKgC,aACzD5B,KAAK9C,MAAM0C,KAAKiC,WAAa,wBAAI3C,UAAU,cAAd,cAAuCc,KAAK9C,MAAM0C,KAAKiC,iB,GAPtE3B,IAAMI,WCzFnCwB,EAAgB,SAAC5E,GAEnB,IAAM6E,EAAuB7E,EAAM8E,QAAQrB,KAAI,SAACC,GAAD,OAC3C,kBAAC,eAAD,CAAcC,IAAKD,EAAKvB,MAAO0B,OAAQH,EAAKvB,OACxC,yBAAKH,UAAU,cACX,yBAAKA,UAAU,qBACX,6CACA,4BACI,6BACK0B,EAAKqB,YAAYhB,OACdL,EAAKqB,YAAYtB,KAAI,SAACuB,GAAD,OACjB,wBAAIrB,IAAKqB,EAAEC,KAAMjD,UAAU,WACvB,yBAAKA,UAAU,cAAcgD,EAAEE,UAC/B,6BACA,yBAAKlD,UAAU,cAAa,uBAAGQ,KAAMwC,EAAEC,MAAOD,EAAEC,WAIxD,yBAAKjD,UAAU,cAAf,qBAOhB,yBAAKA,UAAU,qBACX,gDACA,wBAAIA,UAAU,cAAd,WAAoC0B,EAAKyB,gBAAgBf,OAAS,uBAAG5B,KAAMkB,EAAKyB,gBAAgBf,QAASV,EAAKyB,gBAAgBf,QAAc,iBAC5I,wBAAIpC,UAAU,cAAd,YAAqC0B,EAAKyB,gBAAgBC,eAM1E,OACI,kBAAC,SAAD,CAAQvB,OAAO,mBAAmBwB,QAASrF,EAAMqF,QAASC,OAAQtF,EAAMsF,OAAQC,MAAO,CAACC,SAAU,OAAQC,UAAW,SACjH,kBAAC,YAAD,CAAWxB,UAAU,GAChBY,KAMXa,EAAY,SAAC1F,GACf,OACI,kBAAC,SAAD,CAAQ6D,OAAO,wBAAwBwB,QAASrF,EAAMqF,QAASC,OAAQtF,EAAMsF,OAAQC,MAAO,CAACC,SAAU,OAAQC,UAAW,SACtH,kBAAC,UAAD,CAASE,kBAAkB,GACvB,kBAAC,WAAD,CAAUhC,IAAI,WAAWE,OAAO,aAC5B,4DACA,kBAAC,EAAD,CAAmBL,MAAOxD,EAAM4F,IAAIC,QAExC,kBAAC,WAAD,CAAUlC,IAAI,SAASE,OAAO,kBAC1B,sEACA,kBAAC,EAAD,CAAiBL,MAAOxD,EAAM4F,IAAIE,UAOhDC,EAAY,SAAC/F,GACf,OACI,kBAAC,SAAD,CAAQ6D,OAAO,kCAAkCwB,QAASrF,EAAMqF,QAASC,OAAQtF,EAAMsF,OAAQC,MAAO,CAACC,SAAU,OAAQC,UAAW,SAChI,kBAAC,UAAD,CAASE,kBAAkB,GACvB,kBAAC,WAAD,CAAUhC,IAAI,WAAWE,OAAO,aAC5B,4DACA,kBAAC,EAAD,CAAmBL,MAAOxD,EAAMgG,IAAIH,QAExC,kBAAC,WAAD,CAAUlC,IAAI,SAASE,OAAO,kBAC1B,8DACA,kBAAC,EAAD,CAAiBL,MAAOxD,EAAMgG,IAAIF,UC0EvCG,G,OA/IM,SAACjG,GAAW,IAAD,EAEMG,mBAAS,IAFf,mBAErB+F,EAFqB,KAEVC,EAFU,OAGIhG,mBAAS,CACrC2E,QAAS,GACTsB,QAAS,GACTC,QAAS,GACTC,OAAQ,GACRC,OAAQ,KARgB,mBAGrBC,EAHqB,KAGXC,EAHW,OAUMtG,mBAAS,CACvCuG,QAAS,EACTC,UAAW,IAZa,mBAUrBC,EAVqB,KAUVC,EAVU,OAcgB1G,oBAAS,GAdzB,mBAcrB2G,EAdqB,KAcLC,EAdK,OAeQ5G,oBAAS,GAfjB,mBAerB6G,EAfqB,KAeTC,EAfS,OAgBQ9G,oBAAS,GAhBjB,mBAgBrB+G,EAhBqB,KAgBTC,EAhBS,KAkB5B3G,qBAAU,YACS,uCAAG,WAAO4G,GAAP,iBAAA3G,EAAA,sEACIC,MAAM0G,GADV,cACR5F,EADQ,gBAEKA,EAAIZ,OAFT,OAERA,EAFQ,OAGdyG,QAAQC,IAAI1G,GACZuF,EAAavF,EAAK2G,MAClBd,EAAY7F,EAAK4G,KAAK,IACtBX,EAAajG,EAAKgG,WANJ,4CAAH,sDAQfa,CAAU,mBACX,IAEH,IAOMC,EAAa,SAACC,GAChB,OAAOA,GACH,IAAK,UACDZ,GAAkB,GAClB,MACJ,IAAK,MACDE,GAAc,GACd,MACJ,IAAK,MACDE,GAAc,KAOpBS,EAAa,SAACD,GAChB,OAAOA,GACH,IAAK,UACDZ,GAAkB,GAClB,MACJ,IAAK,MACDE,GAAc,GACd,MACJ,IAAK,MACDE,GAAc,KAO1B,OACI,kBAAC,IAAMxF,SAAP,KACI,yBAAKK,UAAU,eACX,yBAAKA,UAAU,QACX,wCACA,+FACA,yBAAKA,UAAU,qBACX,yBAAKA,UAAU,eACX,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,gBACX,wDACA,yBAAKA,UAAU,uBACX,4DACA,yBAAKA,UAAU,oBAAmB,0BAAMA,UAAU,YAC9C,4BAAQI,QAAS,WAAOsF,EAAW,aAAclB,EAAS1B,QAAQf,SADtE,IAC8F,4CAE9F,yBAAK/B,UAAU,oBAAmB,0BAAMA,UAAU,YAC9C,4BAAQI,QAAS,WAAOsF,EAAW,SAAUlB,EAASJ,QAAQrC,SADlE,IAC0F,iDAE1F,yBAAK/B,UAAU,oBAAmB,0BAAMA,UAAU,YAC9C,4BAAQI,QAAS,WAAOsF,EAAW,SAAUlB,EAASH,QAAQtC,SADlE,IAC0F,gEAE1F,yBAAK/B,UAAU,gBACX,uBAAGA,UAAU,SAASQ,KAAK,eAA3B,0BAKhB,yBAAKR,UAAU,kBACX,yBAAKA,UAAU,eAAeuD,MAAO,CAAEsC,UAAW,eAC9C,wDACA,yBAAK7F,UAAU,uBACX,2EACA,yBAAKA,UAAU,oBAAmB,0BAAMA,UAAU,YAAY4E,EAAUF,SAAxE,IAAwF,qDACxF,yBAAK1E,UAAU,oBAAmB,0BAAMA,UAAU,YAAY4E,EAAUD,WAAxE,IAA0F,uDAC1F,yBAAK3E,UAAU,gBAAe,uBAAGA,UAAU,SAASQ,KAAK,cAA3B,sBAI1C,yBAAKR,UAAU,kBACX,yBAAKA,UAAU,gBACX,mDACA,yBAAKA,UAAU,uBACX,kBAAC,YAAD,CAAW8F,MAAO5B,GACd,kBAAC,SAAD,CAAQlE,UAAU,YAAY+F,MAAM,WAAWlE,OAAO,aACtD,kBAAC,SAAD,CAAQ7B,UAAU,YAAY+F,MAAM,OAAOlE,OAAO,OAAOmE,KApFtE,SAACC,EAASC,GACjC,IAAIC,EAAQ,IAAMF,EAAQG,IAC1B,OACI,kBAAC,IAAD,CAAMvG,GAAIsG,GAASF,EAAQrE,UAmFC,yBAAK5B,UAAU,gBAAe,uBAAGA,UAAU,SAASQ,KAAK,UAA3B,sBAGtC,yBAAKR,UAAU,gBACX,6DACA,yBAAKA,UAAU,uBACX,2BACI,8EADJ,IAC2D,6BAD3D,2CAE4C,uBAAGQ,KAAK,aAAR,0BAF5C,YAW5B,kBAAC,EAAD,CAAe6C,QAASyB,EAAgBxB,OAAQ,WAAOsC,EAAW,YAAa9C,QAAS0B,EAAS1B,UACjG,kBAAC,EAAD,CAAWO,QAAS2B,EAAY1B,OAAQ,WAAOsC,EAAW,QAAShC,IAAK,CAACC,KAAMW,EAASJ,QAASN,IAAKU,EAASF,UAC/G,kBAAC,EAAD,CAAWjB,QAAS6B,EAAY5B,OAAQ,WAAOsC,EAAW,QAAS5B,IAAK,CAACH,KAAMW,EAASH,QAASP,IAAKU,EAASD,UAjEnH,O,0CCHO8B,E,iLAhEP,IAAMC,EAAgB,SAACC,GACnB,OACI,yBAAKvG,UAAU,IACX,0BAAMuD,MAAO,CAACiD,SAAS,MAAMC,OAAO,iBAAkBF,EAAOpG,SAkBzE,OAAGW,KAAK9C,MAAM0I,SACH,KAER5F,KAAK9C,MAAM2I,UAEN,yBAAK3G,UAAU,aACX,+BAAQc,KAAK9C,MAAM4I,eACnB,kBAAC,WAAD,CACIC,GAAI/F,KAAK9C,MAAM6I,GACf7G,UAAU,aACV8G,YAAY,QACZhB,MAAOhF,KAAK9C,MAAM+I,kBAClBC,QAASlG,KAAK9C,MAAMiJ,iBACpBC,SAAUpG,KAAK9C,MAAMmJ,sBACrBC,QAAQ,EACRC,aAAcf,EACdgB,YAAY,gBACZC,SAAUzG,KAAK9C,MAAMuJ,YAMjC,yBAAKvH,UAAU,aACX,+BAAQc,KAAK9C,MAAM4I,eACnB,kBAAC,cAAD,CACIC,GAAI/F,KAAK9C,MAAM6I,GACf7G,UAAU,aACV8G,YAAY,QACZhB,MAAOhF,KAAK9C,MAAM+I,kBAClBC,QAASlG,KAAK9C,MAAMiJ,iBACpBC,SAAUpG,KAAK9C,MAAMmJ,sBACrBC,QAAQ,EACRC,aAAcf,EACdkB,qBA/CiB,SAAC9F,GAC1B,OAAIA,EAEI,yBAAK1B,UAAU,+BACX,8BAAO0B,EAAKvB,QAKb,4CAuCHoH,SAAUzG,KAAK9C,MAAMuJ,gB,GA3DdvG,IAAMI,WCD7BqG,G,OAAe,IACfjD,EAAW,GACXkD,EAAgB,GAChBC,EAAgB,G,SAELlC,E,8EAAf,WAAyBmC,GAAzB,iBAAAnJ,EAAA,sEAC2BC,MAAMkJ,GADjC,cACUC,EADV,gBAEuBA,EAASjJ,OAFhC,cAEUA,EAFV,yBAGWA,GAHX,4C,sBAMA,IA2KekJ,EA3KI,WAEf,IAAMnH,EAAUzC,qBAAW6J,IAFN,EAIW5J,mBAAS,IAJpB,mBAId6J,EAJc,KAIJC,EAJI,OAKS9J,mBAAS,IALlB,mBAKd2E,EALc,KAKLoF,EALK,OAMyB/J,mBAAS,IANlC,mBAMdgF,EANc,aAOOhF,mBAAS,KAPhB,mBAOdgK,EAPc,KAONC,EAPM,OAQSjK,mBAAS,IARlB,mBAQdiG,EARc,KAQLiE,EARK,OASOlK,mBAAS,IAThB,mBASdmG,EATc,KASNgE,EATM,OAUSnK,mBAAS,IAVlB,mBAUdkG,EAVc,KAULkE,EAVK,OAWOpK,mBAAS,IAXhB,mBAWdoG,EAXc,KAWNiE,EAXM,OAauCrK,mBAAS,IAbhD,gCAcuBA,oBAAS,IAdhC,mBAcdsK,EAdc,KAcEC,EAdF,OAeuBvK,oBAAS,GAfhC,mBAedwK,EAfc,KAeEC,EAfF,KAiBfC,GAAgB,WAWlB,MAViB,CACbb,WACAlF,UACAK,kBACAgF,SACA/D,UACAE,SACAD,UACAE,WAKR/F,qBAAU,YACU,uCAAG,4BAAAC,EAAA,sEACWgH,EAAU,aADrB,OACTqD,EADS,OAEfrB,EAAeqB,EAAY,GAC3BtE,EAAWsE,EAAY,GACvBpB,EAAgBlD,EAASF,OACzBqD,EAAgBnD,EAASD,OALV,2CAAH,qDAOhBwE,KACD,IAEHvK,qBAAU,WACiB,IAApBwJ,EAASjG,OACgB,QAArBiG,EAAS,GAAGpG,MACXgH,GAAkB,GAClBL,EAAW,IACXC,EAAU,MAEVE,GAAkB,GAClBL,EAAW,IACXC,EAAU,MAGdI,GAAkB,GAClBE,GAAkB,IAEtB,IAAMI,EAAaH,KACnBlI,EAAQsI,cAAcD,KACvB,CAAChB,IAEJxJ,qBAAU,WACN,GAAqB,IAAlB2J,EAAOpG,OACN4F,EAAgBnD,EAASD,OACzBmD,EAAgBlD,EAASF,WACxB,CACD,IAAI4E,EAAU3E,EACV4E,EAAU7E,EAEd,GAAG8E,MAAMC,QAAQlB,GAAQ,CACrB,IAAImB,EAAanB,EAAO1G,KAAI,SAAC0G,GAAY,OAAOA,EAAOvG,QACvDsH,EAAU3E,EAAO6C,QAAO,SAACtD,GAAS,OAAOwF,EAAWC,SAASzF,EAAIqE,SAAWrE,KAC5EqF,EAAU7E,EAAO8C,QAAO,SAACtD,GAAS,OAAOwF,EAAWC,SAASzF,EAAIqE,SAAWrE,KAC5E6D,EAAgBnD,EAASD,OAAO6C,QAAO,SAACtD,GAAS,OAAOwF,EAAWC,SAASzF,EAAIqE,SAAWrE,KAC3F4D,EAAgBlD,EAASF,OAAO8C,QAAO,SAACtD,GAAS,OAAOwF,EAAWC,SAASzF,EAAIqE,SAAWrE,UAE3FoF,EAAU3E,EAAO6C,QAAO,SAACtD,GAAS,OAAOqE,EAAOvG,OAASkC,EAAIqE,QAAUrE,KACvEqF,EAAU7E,EAAO8C,QAAO,SAACtD,GAAS,OAAOqE,EAAOvG,OAASkC,EAAIqE,QAAUrE,KACvE6D,EAAgBnD,EAASD,OAAO6C,QAAO,SAACtD,GAAS,OAAOqE,EAAOvG,OAASkC,EAAIqE,QAAUrE,KACtF4D,EAAgBlD,EAASF,OAAO8C,QAAO,SAACtD,GAAS,OAAOqE,EAAOvG,OAASkC,EAAIqE,QAAUrE,KAG1F0E,EAAUU,GACVZ,EAAUa,GAEd,IAAMH,EAAaH,KACnBlI,EAAQsI,cAAcD,KACvB,CAACb,IAEJ3J,qBAAU,WACN,IAAMwK,EAAaH,KACnBlI,EAAQsI,cAAcD,KACvB,CAAClG,EAASsB,EAASE,EAAQD,EAASE,IAiCvC,OACI,kBAAC,IAAM5E,SAAP,KACI,yBAAKK,UAAU,uBACX,yBAAKA,UAAU,cACX,+CACA,yBAAKA,UAAU,aACX,2BAAOA,UAAU,QAAjB,kBACA,kBAAC,cAAD,CAAawJ,QAAS7I,EAAQ8I,UAAWC,QAAQ,kCAC7CxC,SAAU,SAACyC,GAAD,OAvCX,SAACF,GACpB,IAAIG,EAAQC,KAAKC,MAAMD,KAAKE,UAAUvF,IACtC,GAAGiF,EACI3G,EAAQf,SACP6H,EAAM9G,QAAUA,EAChBoF,EAAWpF,EAAQ,KAEpBqF,EAAOpG,SACN6H,EAAMzB,OAASA,EACfC,EAAUD,EAAO,SAEpB,CACD,GAAGyB,EAAM9G,QAAQf,OAAS0F,EAAa3E,QAAQf,OAC3CmG,EAAW0B,EAAM9G,cACf,IAAIsG,MAAMC,QAAQvG,GAAS,CAE7BoF,EAAW,CADApF,IAGf,GAAG8G,EAAMzB,OAAOpG,OAAS0F,EAAaU,OAAOpG,OACzCqG,EAAUwB,EAAMzB,aACd,IAAIiB,MAAMC,QAAQlB,GAAQ,CAE5BC,EAAU,CADAD,IAGdyB,EAAQnC,EAEZjD,EAAWoF,EACXjJ,EAAQsI,cAAcJ,MACtBlI,EAAQqJ,aAAaP,GAWgBQ,CAAeN,EAAE7D,WAE1C,kBAAC,EAAD,CAAce,GAAG,WAAWH,UAAU,EAAOE,cAAc,aACvDK,iBAAkBzC,EAASwD,SAAUjB,kBAAmBpG,EAAQqI,WAAWhB,SAC3Eb,sBAAuB,SAACwC,GAAD,OAAO1B,EAAY0B,EAAE7D,UAEhD,kBAAC,EAAD,CAAce,GAAG,UAAUH,UAAU,EAAOE,cAAc,WAAWD,UAAWhG,EAAQ8I,UACpFxC,iBAAkBzC,EAAS1B,QAASiE,kBAAmBpG,EAAQqI,WAAWlG,QAC1EqE,sBAAuB,SAACwC,GAAD,OAAOzB,EAAWyB,EAAE7D,UAK/C,kBAAC,EAAD,CAAce,GAAG,SAASH,UAAU,EAAOE,cAAc,UAAUD,UAAWhG,EAAQ8I,UAClFxC,iBAAkBzC,EAAS2D,OAAQpB,kBAAmBpG,EAAQqI,WAAWb,OACzEhB,sBAAuB,SAACwC,GAAD,OAAOvB,EAAUuB,EAAE7D,UAE9C,kBAAC,EAAD,CAAce,GAAG,UAAUH,SAAU+B,EAAgB7B,cAAc,YAC/DK,iBAAkBzC,EAASJ,QAAS2C,kBAAmBpG,EAAQqI,WAAW5E,QAC1E+C,sBAAuB,SAACwC,GAAD,OAAOtB,EAAWsB,EAAE7D,UAE/C,kBAAC,EAAD,CAAce,GAAG,SAASH,SAAU+B,EAAgB7B,cAAc,WAC9DK,iBAAkBS,EAAeX,kBAAmBpG,EAAQqI,WAAW1E,OACvE6C,sBAAuB,SAACwC,GAAD,OAAOrB,EAAUqB,EAAE7D,UAE9C,kBAAC,EAAD,CAAce,GAAG,UAAUH,SAAUiC,EAAgB/B,cAAc,YAC/DK,iBAAkBzC,EAASH,QAAS0C,kBAAmBpG,EAAQqI,WAAW3E,QAC1E8C,sBAAuB,SAACwC,GAAD,OAAOpB,EAAWoB,EAAE7D,UAE/C,kBAAC,EAAD,CAAce,GAAG,SAASH,SAAUiC,EAAgB/B,cAAc,WAC9DK,iBAAkBU,EAAeZ,kBAAmBpG,EAAQqI,WAAWzE,OACvE4C,sBAAuB,SAACwC,GAAD,OAAOnB,EAAUmB,EAAE7D,cCpL3D,SAASoE,EAAU9E,EAAK+E,GAE3BzL,MAAM0G,GACD7F,MAAK,SAAAC,GAAG,OAAIA,EAAIZ,UAChBW,MAAK,SAAA6K,GACFD,EAASC,M,8NCCrB,IAkFeC,EAlFG,SAACrM,GAEf,IAAMC,EAAOC,qBAAWL,GAFC,EAICM,mBAAS,CAC/BmM,KAAM,GACNC,MAAO,EACPC,MAAO,EACPC,IAAK,GACLC,aAAc,EACdC,SAAS,IAVY,mBAIlBxL,EAJkB,KAIXyL,EAJW,KAazBpM,qBAAU,WACNoM,E,yVAAS,IAAIzL,EAAL,CAAYwL,SAAS,OAC9B,IAEH,IAAME,EAAkB,SAAChE,EAAI5D,GAAL,OAAc,SAAClE,GACnCA,EAAMC,iBACNqG,QAAQC,IAAI,mBD+Cb,SAAyBwF,GAC5BzF,QAAQC,IAAI,oBAAsBwF,GAClC,IAAIC,EAAU,CAACD,GACfpM,MAAM,iBAAkB,CACpBsM,OAAQ,OACRhF,KAAM6D,KAAKE,UAAU,CACjBgB,QAASA,IAEbE,QAAS,CACL,eAAgB,sBAGnB1L,MAAK,SAAAC,GAAG,OAAIA,EAAIZ,UAChBsM,OAAM,SAAAC,GAAG,OAAI9F,QAAQC,IAAI6F,MC3D1BC,CAAoBvE,GACpB,IAAMwE,EAASC,SAASC,cAAc,KACtCF,EAAOG,aAAa,WAAY,MAChCH,EAAO9H,MAAMkI,QAAU,OACvBJ,EAAOG,aAAa,OAAQvI,GAC5BqI,SAAStF,KAAK0F,YAAYL,GAC1BA,EAAOM,QACPL,SAAStF,KAAK4F,YAAYP,KAGxBQ,EAAmB,SAAC5F,EAASC,GAC/B,IAAI4F,EAAQ,GAIZ,OAHG7F,EAAQC,EAAOH,SACd+F,EAAS7F,EAAQC,EAAOH,OAAOtE,KAAI,SAAAC,GAAI,OAAI,yBAAKC,IAAKD,EAAKE,MAAOF,EAAKE,UAGtE,6BAAMkK,IAyBd,OACI,kBAAC,YAAD,CACIhG,MAAO9H,EAAM+N,QACbC,UAAWhO,EAAMiO,cAAeC,kBAPP,SAAAnN,GAC7Bf,EAAMmO,oBAAoBpN,EAAM+G,QAO5BsG,WAAW,EAAM9B,KAAMnL,EAAMmL,KAC7B+B,YAAY,GAEXpO,EAAKiC,eAAiB,kBAAC,SAAD,CAAQoM,cAAc,WAAW/I,MAAO,CAAClD,MAAO,WACvE,kBAAC,SAAD,CAAQL,UAAU,YAAY+F,MAAM,OAAOlE,OAAO,OAAO0B,MAAO,CAAClD,MAAM,QAAS2F,KA7B7D,SAACC,EAASC,GACjC,IAAIC,EAAQ,IAAMF,EAAQG,IAC1B,OACI,kBAAC,IAAD,CAAMvG,GAAIsG,GAASF,EAAQrE,OA0B+E2K,UAAU,IACpH,kBAAC,SAAD,CAAQvM,UAAU,YAAY+F,MAAM,eAAelE,OAAO,UAAU0B,MAAO,CAAClD,MAAM,SAAUkM,UAAU,IACtG,kBAAC,SAAD,CAAQvM,UAAU,YAAY+F,MAAM,0BAA0BlE,OAAO,mBAAmB0B,MAAO,CAAClD,MAAM,UAAWkM,UAAU,IAC3H,kBAAC,SAAD,CAAQxG,MAAM,UAAUC,KAAM6F,EAAkBtI,MAAO,CAAClD,MAAM,OAAQwB,OAAO,WAAW0K,UAAU,IAClG,kBAAC,SAAD,CAAQxG,MAAM,UAAUC,KAAM6F,EAAkBtI,MAAO,CAAClD,MAAM,OAAQwB,OAAO,WAAW0K,UAAU,IAClG,kBAAC,SAAD,CAAQxG,MAAM,SAASC,KAAM6F,EAAkBtI,MAAO,CAAClD,MAAM,QAASwB,OAAO,UAAU0K,UAAU,IACjG,kBAAC,SAAD,CAAQxG,MAAM,SAASC,KAAM6F,EAAkBtI,MAAO,CAAClD,MAAM,QAASwB,OAAO,UAAU0K,UAAU,IACjG,kBAAC,SAAD,CAAQxG,MAAM,eAAeC,KA7BZ,SAACC,EAASC,GAC/B,IAAIjD,EAAO,gBAIX,OAHGgD,EAAQuG,eACPvJ,EAAO,uBAAG4D,GAAIZ,EAAQwG,IAAKjM,KAAK,IAAIJ,QAASyK,EAAgB5E,EAAQwG,IAAKxG,EAAQuG,eAA3E,aAGPvJ,GAuBqDM,MAAO,CAAClD,MAAM,SAAUwB,OAAO,e,SC9E1F6K,G,YACF,aAAc,IAAD,8BACT,+CAMJC,kBAAoB,SAAA5N,GAChBA,EAAMC,iBACH,EAAK2B,QAAQT,eFJjB,SAA+BZ,EAAU2M,EAAe9B,GAC3D,GAAG8B,EAAclK,OAAO,CAGpB,IAFA,IAAI6K,EAAW,CAAEtN,SAAUA,GACvBuN,EAAS,GACLC,EAAI,EAAGA,EAAIb,EAAclK,OAAQ+K,IACrCD,EAAO5N,KAAKgN,EAAca,GAAGL,KAEjCG,EAASC,OAASA,EAElBnO,MAAM,iBAAkB,CACpBsM,OAAQ,OACRhF,KAAM6D,KAAKE,UAAU,CAACgD,QAASH,IAC/B3B,QAAS,CACL,eAAgB,sBAGnB1L,MAAK,SAAAC,GAAG,OAAIA,EAAIZ,UAChBW,MAAK,SAAA6K,GAAO,OAAID,EAAS,EAAGC,MAC5Bc,OAAM,SAAAC,GAAG,OAAIhB,EAAS,EAAGgB,OEb1B6B,CAA+B,EAAKrM,QAAQrB,SAAU,EAAKtB,MAAMiO,eAAe,SAACtN,EAAQ+B,GAAU,EAAK1C,MAAMiP,eAAetO,EAAQ+B,OARzI,EAAKiM,kBAAoB,EAAKA,kBAAkBO,KAAvB,iBAFhB,E,sEAeT,OACIpM,KAAKH,QAAQT,cAAgB,kBAAC,SAAD,CAAQC,MAAM,OAAOC,QAASU,KAAK6L,kBAAmBpF,SAAUzG,KAAK9C,MAAMuJ,WAAc,iE,GAjBrGvG,IAAMI,WAA7BsL,GAMKrL,YAAcxD,EAgBV6O,U,+CCzBR,SAASS,GAAazM,GACzB,IAAI0M,EAAY,GAUhB,OATAA,EAAUC,SAAWC,GAAc5M,EAAKsH,UACxCoF,EAAUG,YAAcD,GAAc5M,EAAKoC,SAC3CsK,EAAUI,eAAiBF,GAAc5M,EAAKoC,SAAS,GACvDsK,EAAUjF,OAASmF,GAAc5M,EAAKyH,QACtCiF,EAAUhJ,QAAUkJ,GAAc5M,EAAK0D,SACvCgJ,EAAU/I,QAAUiJ,GAAc5M,EAAK2D,SACvC+I,EAAU9I,OAASgJ,GAAc5M,EAAK4D,QACtC8I,EAAU7I,OAAS+I,GAAc5M,EAAK6D,QACtC6I,EAAUjK,gBAAkBmK,GAAc5M,EAAKyC,iBAAiB,GACzDiK,EAGJ,SAASK,GAAYC,GACxB,IAAIC,EAAS,yBACTC,EAAe,GACnBA,EAAa3O,KAAK4O,GAAoB,MAAOH,EAAUL,WACvDO,EAAa3O,KAAK4O,GAAoB,MAAOH,EAAUF,iBACvDI,EAAa3O,KAAK4O,GAAoB,MAAOH,EAAUH,cACvDK,EAAa3O,KAAK4O,GAAoB,MAAOH,EAAUvF,SACvDyF,EAAa3O,KAAK4O,GAAoB,OAAQH,EAAUtJ,UACxDwJ,EAAa3O,KAAK4O,GAAoB,OAAQH,EAAUrJ,UACxDuJ,EAAa3O,KAAK4O,GAAoB,OAAQH,EAAUpJ,SACxDsJ,EAAa3O,KAAK4O,GAAoB,OAAQH,EAAUnJ,SACxDqJ,EAAa3O,KAAK4O,GAAoB,MAAOH,EAAUvK,kBACvD,IAAI,IAAI2J,EAAI,EAAGA,EAAIc,EAAa7L,OAAQ+K,IACjCc,EAAad,GAAG/K,OAAS,IACxB4L,GAAUC,EAAad,GAAK,KAIpC,OADAa,EAASA,EAAOG,QAAQ,KAAM,IAkB3B,SAASC,GAAmBC,GAC/B,IAAIC,GAAWD,EAAQhG,UACnB,OAAO,EACL,GAA+B,IAA5BgG,EAAQhG,SAASjG,OAAa,CACnC,KAA2B,QAAxBiM,EAAQhG,SAAS,IAAkBiG,GAAWD,EAAQ1J,SAAY2J,GAAWD,EAAQ5J,UACpF,OAAO,EACL,GAA2B,QAAxB4J,EAAQhG,SAAS,MAAkBiG,GAAWD,EAAQzJ,UAAY0J,GAAWD,EAAQ3J,UAC1F,OAAO,MAEV,CACD,IAAI4J,GAAWD,EAAQ1J,QACnB,OAAO,EAEX,IAAI2J,GAAWD,EAAQzJ,QACnB,OAAO,EAEX,IAAI0J,GAAWD,EAAQ5J,SACnB,OAAO,EAEX,IAAI6J,GAAWD,EAAQ3J,SACnB,OAAO,EAIf,OAAI4J,GAAWD,EAAQ7F,WAGnB8F,GAAWD,EAAQlL,YAoC3B,SAAiBlB,GACb,GAAmB,qBAATA,GAAiC,OAATA,EAC9B,OAAO,EAEX,GAAmB,IAAhBA,EAAKG,OACJ,OAAO,EAEX,OAAO,EArCHmM,CAAQF,EAAQpM,QAwCxB,SAAsBuM,GAElB,GAAoB,qBAAVA,GAAmC,OAAVA,EAC/B,OAAO,EAEX,GAAoB,IAAjBA,EAAMpM,OACL,OAAO,EAEX,IAPc,8CAOJqM,KAAKD,GACX,OAAO,EAEX,OAAO,EAhDHE,CAAaL,EAAQG,SAMtB,SAASF,GAAWK,GACvB,MAAuB,qBAAbA,GAAyC,OAAbA,KAGnClF,MAAMC,QAAQiF,KAAcA,EAASvM,QAMrC,SAASwM,GAAoB5P,EAAQ+B,GAAqC,IAA/BqI,EAA8B,uDAAnB,KAAMyF,EAAa,uCACzEzF,GACCA,IAEDpK,EACC6P,EAAaC,KAAK,CAACC,SAAU,UAAWC,QAASjO,EAAKiO,QAASC,OAAQlO,EAAKmO,QAASC,QAAQ,IAE7FN,EAAaC,KAAK,CAACC,SAAU,QAASC,QAAS,mBAAoBC,OAAQlO,EAAKqO,WAAYD,QAAQ,IA4B5G,SAASxB,GAAc0B,GAA0C,IAA1BC,EAAyB,wDACxDC,EAAc,GAClB,GAA6B,qBAAnBF,GAAqD,OAAnBA,EACxC,OAAOE,EAEX,GAA0C,IAAvCC,OAAOC,KAAKJ,GAAgBjN,QAAgBiN,EAAeK,cAAgBF,OAC1E,OAAOD,EAEX,GAAG9F,MAAMC,QAAQ2F,GAAgB,CAC7B,GAAGC,EACC,IAAI,IAAInC,EAAI,EAAGA,EAAIkC,EAAejN,OAAQ+K,IACtCoC,EAAYjQ,KAAK+P,EAAelC,GAAG1J,cAGvC,IAAI,IAAI0J,EAAI,EAAGA,EAAIkC,EAAejN,OAAQ+K,IACtCoC,EAAYjQ,KAAK+P,EAAelC,GAAGlL,MAG3C,OAAOsN,EAOX,OALGD,EACCC,EAAYjQ,KAAK+P,EAAe5L,SAEhC8L,EAAYjQ,KAAK+P,EAAepN,MAE7BsN,EAGX,SAASrB,GAAoByB,EAASJ,GAClC,IAAIK,EAAc,GAClB,GAAGL,EAAYnN,OAAS,EACpB,IAAI,IAAI+K,EAAI,EAAGA,EAAIoC,EAAYnN,OAAQ+K,IACnCyC,GAAeD,EAAU,IAAMJ,EAAYpC,GACxCA,EAAIoC,EAAYnN,OAAS,IACxBwN,GAAe,KAI3B,OAAOA,ECnKJ,IAAMxH,GAAmB/G,IAAMlD,gB,SAEvB2H,G,iFAAf,WAAyBmC,GAAzB,iBAAAnJ,EAAA,sEAC2BC,MAAMkJ,GADjC,cACUC,EADV,gBAEuBA,EAASjJ,OAFhC,cAEUA,EAFV,yBAGWA,GAHX,4C,sBAMA,IAsKe4Q,GAtKI,SAAbA,EAAcxR,GAAW,IAAD,EACIG,mBAAS,IADb,mBACnB4N,EADmB,KACV0D,EADU,OAEQtR,oBAAS,GAFjB,mBAEnBuR,EAFmB,KAERC,EAFQ,OAGgBxR,mBAAS,IAHzB,mBAGnB8N,EAHmB,KAGJ2D,EAHI,OAIkBzR,oBAAS,GAJ3B,mBAInB0R,EAJmB,KAIHC,EAJG,OAKQ3R,oBAAS,GALjB,mBAKnBsL,EALmB,KAKRO,EALQ,OAMsB7L,oBAAS,GAN/B,mBAMnB4R,EANmB,KAMDC,EANC,OAOU7R,mBAAS,IAPnB,mBAOnB6K,EAPmB,KAOPC,EAPO,OASF9K,mBAAS,IATP,mBASnByD,EATmB,KASbqO,EATa,OAUA9R,mBAAS,IAVT,mBAUnBgQ,EAVmB,KAUZ+B,EAVY,KAY1B1R,qBAAU,YACc,uCAAG,4BAAAC,EAAA,sDACb0R,EAAQ1K,GAAU,yBACxBgK,EAAWU,GACXR,GAAa,GAHM,2CAAH,qDAKpBS,KACD,IAEH5R,qBAAU,WACNsR,GAAkBO,GAAqBpE,MACxC,CAACA,IAEJzN,qBAAU,WAAM,4CACZ,kCAAAC,EAAA,6DACQ2O,EAAYiD,GAAuBrH,GACnC2E,EAAS0C,GAAsBjD,GACnC/H,QAAQC,IAAIqI,GACR+B,EAAuB,UAAX/B,GAAkC,0BAAXA,EAJ3C,SAKwBlI,GAAUkI,GALlC,OAKUwC,EALV,OAMIV,EAAWU,GACXR,EAAaD,GAPjB,4CADY,uBAAC,WAAD,wBAUZY,GACA,IAAIC,EAASvH,EACbuH,EAAO3O,KAAOA,EACd2O,EAAOpC,MAAQA,EACf6B,EAAoBK,GAA6BE,MAClD,CAACvH,IAEJ,IAAMwH,EAAW,uCAAG,kCAAA/R,EAAA,6DACZ2O,EAAYiD,GAAuBrH,GACnC2E,EAAS0C,GAAsBjD,GACnC/H,QAAQC,IAAIqI,GACR+B,EAAuB,UAAX/B,GAAkC,WAAXA,EAJvB,SAKIlI,GAAUkI,GALd,OAKVwC,EALU,OAMhBV,EAAWU,GACXR,EAAaD,GAPG,2CAAH,qDAUXe,EAAc,SAAC9R,EAAQ+B,GACzB,IAAIgO,EAAW/P,EAAS,UAAY,QACpC6Q,EAAWkB,SAASjC,KAAK,CAACC,SAAUA,EAAUC,QAASjO,EAAKiO,QAASC,OAAQlO,EAAKmO,QAASC,QAAQ,IACnG6B,KAOEA,EAAkB,WACpBf,EAAiB,IACjBE,GAAkB,IAGhBc,EAAmB,uCAAG,WAAM7R,GAAN,mBAAAN,EAAA,6DACxBM,EAAMC,kBACF+N,EAAU/D,GACN7F,gBAAkB4J,EAAQjK,QAAQK,gBAC1C4J,EAAQnL,KAAOA,EACfmL,EAAQoB,MAAQA,EAChB9I,QAAQC,IAAIyH,GANY,SAON8D,wBAAanS,MAAM,gBAAiB,CAC9CsM,OAAQ,OACRhF,KAAM6D,KAAKE,UAAU,CAACgD,QAASA,IAC/B9B,QAAS,CAAC,eAAgB,uBAVV,cAOlBzL,EAPkB,iBAYFA,EAAIZ,OAZF,QAYlBwL,EAZkB,OAaxBqG,EAAYjR,EAAIsR,GAAI1G,GACpBuG,IAdwB,4CAAH,sDAiBzBnS,qBAAU,WACN,IAAI+R,EAASvH,EACbuH,EAAO3O,KAAOA,EACd2O,EAAOpC,MAAQA,EACf6B,EAAoBK,GAA6BE,MAClD,CAAC3O,EAAMuM,IAcV,OACI,kBAACpG,GAAiBgJ,SAAlB,CAA2BjL,MAAO,CAC1BkD,WAAYA,EACZC,cAAeA,EACfuH,YAAaA,EACb/G,UAAWA,EACXO,aAAcA,IAGlB,yBAAKhK,UAAU,eACX,0EACA,yBAAKA,UAAU,qBACX,kBAAC,EAAD,MACA,yBAAKA,UAAU,aACX,kBAAC,YAAD,CAAU8D,IAAK,SAACkN,GAAD,OAAQxB,EAAWkB,SAAWM,KAC7C,yBAAKhR,UAAU,wBACX,yBAAKA,UAAU,gBACX,uCACA,yBAAKA,UAAU,wBACX,yBAAKA,UAAU,mBAEP0P,EACA,8BAAM,0BAAM1P,UAAU,kBAAkB+L,EAAQhK,OAASgK,EAAQhK,OAAS,GAA1E,IAAoF,wDAEpF,8BAAM,0BAAM/B,UAAU,kBAAkB+L,EAAQhK,QAAhD,IAA+D,8BAA0B,IAAnBgK,EAAQhK,OAAe,SAAW,YAAxG,aAIZ,kBAAC,GAAD,CAAgBkK,cAAeA,EAAe1E,SAAUsI,EAAgB5C,eAAgBwD,KAGxFhH,GACA,yBAAKzJ,UAAU,oBACX,4CACA,yBAAKA,UAAU,gBACX,6CACI,kBAAC,aAAD,CAAW6G,GAAG,OAAO7G,UAAU,aAAa8F,MAAOlE,GAAQ,GAAIsF,SAAU,SAACyC,GAAOsG,EAAQtG,EAAEsH,OAAOnL,WAE1G,yBAAK9F,UAAU,gBACX,wDACI,kBAAC,aAAD,CAAW6G,GAAG,QAAQ7G,UAAU,aAAa8F,MAAOqI,GAAS,GAAIjH,SAAU,SAACyC,GAAOuG,EAASvG,EAAEsH,OAAOnL,WAE7G,yBAAK9F,UAAU,gBACX,mBAvDR,WAExB,OAD4BkR,+BAArBC,kBAGC,yBAAKnR,UAAU,mBACX,kBAAC,KAAD,CAAQ2F,KAAK,YAAYyL,MAAM,UAAUC,OAAQ,IAAKhR,MAAO,OAGjE,kBAAC,SAAD,CAAQF,MAAM,iBAAiBwF,KAAK,SAAS4B,SAAUwI,EAAkB3P,QAASwQ,MA+C1D,SAMZ7E,EAAQhK,OACR,kBAAC,EAAD,CAAWgK,QAASA,EAASE,cAAeA,EAAeE,oBA/FvD,SAACmF,GACzB1B,EAAiB0B,IA8FwGC,aAAa,UAElH,yBAAKvR,UAAU,wBACX,kBAAC,KAAD,CAAQ2F,KAAK,YAAYyL,MAAM,UAAUC,OAAQ,IAAKhR,MAAO,YCrD9EmR,I,OAlHG,SAAZA,EAAaxT,GAEf,IAAMC,EAAOC,qBAAWL,GAFC,EAGDM,mBAAS,IAHR,mBAGlBuC,EAHkB,KAGZ+Q,EAHY,OAIKtT,oBAAS,GAJd,mBAIlBwM,EAJkB,KAIT+G,EAJS,KAMjBP,EAAsBD,+BAAtBC,kBAEF1C,EAAO,SAACI,GACV2C,EAAUd,SAASjC,KAAKI,IAGtBpJ,EAAS,uCAAG,WAAOmC,GAAP,iBAAAnJ,EAAA,sEACSC,MAAMkJ,GADf,cACRC,EADQ,gBAEKA,EAASjJ,OAFd,OAERA,EAFQ,OAGd6S,EAAQ7S,GACR8S,GAAW,GAJG,2CAAH,sDAOTC,EAAa,uCAAG,WAAO9K,GAAP,iBAAApI,EAAA,sEACGoS,wBAAanS,MAC9B,gBACA,CACIsM,OAAQ,OACRhF,KAAM6D,KAAKE,UAAU,CAAClD,GAAIA,IAC1BoE,QAAS,CAAC,eAAgB,uBANhB,cACZ2G,EADY,gBASCA,EAAOhT,OATR,cASZA,EATY,yBAUX,CAACkS,GAAIc,EAAOd,GAAIpQ,KAAM9B,IAVX,2CAAH,sDAanBJ,qBAAU,WACNiH,EAAU,4CACX,IAEH,IAAMoM,EAAQ,uCAAG,WAAO9S,GAAP,eAAAN,EAAA,6DACbM,EAAMC,iBACNqG,QAAQC,IAAIvG,EAAMkS,OAAOpK,IAFZ,SAGQ8K,EAAc5S,EAAMkS,OAAOpK,IAHnC,cAGP+K,EAHO,QAIHd,GACNrC,EAAK,CAACC,SAAU,UAAWC,QAASiD,EAAOlR,KAAKiO,QAASC,OAAQgD,EAAOlR,KAAKmO,QAASC,QAAQ,IAE9FL,EAAK,CAACC,SAAU,QAASC,QAASiD,EAAOlR,KAAKiO,QAASC,OAAQgD,EAAOlR,KAAKmO,QAASC,QAAQ,IAPnF,SASPrJ,EAAU,0CATH,2CAAH,sDAYRqM,EAAmB,SAAC7L,EAASC,GAC/B,IAAI6L,EAAc,GAIlB,OAHG9L,EAAQC,EAAOH,SACdgM,EAAc,IAAIC,KAAK/L,EAAQC,EAAOH,QAAQkM,oBAAeC,EAAW,CAACC,UAAW,OAAQC,UAAW,YAEpG,6BAAML,IAWjB,OACI,yBAAK/R,UAAU,eACX,yBAAKA,UAAU,oBACX,yDACA,kBAAC,YAAD,CAAU8D,IAAK,SAACkN,GAAD,OAAQQ,EAAUd,SAAWM,KAC5C,yBAAKhR,UAAU,oBACX,sDACA,yBAAKA,UAAU,6BACX,yBAAKA,UAAU,2BACX,0BAAMA,UAAU,UAAWU,EAAK0G,QAAO,SAAAiL,GAAC,MAAiB,YAAbA,EAAE1T,UAAsBoD,QADxE,wBAGA,yBAAK/B,UAAU,2BACX,0BAAMA,UAAU,UAAWU,EAAK0G,QAAO,SAAAiL,GAAC,MAAiB,eAAbA,EAAE1T,UAAyBoD,QAD3E,6BAKR,yBAAK/B,UAAU,kBAEN2K,EAcD,yBAAK3K,UAAU,iCACX,kBAAC,KAAD,CAAQ2F,KAAK,YAAYyL,MAAM,UAAUC,OAAQ,IAAKhR,MAAO,OAdjE,CACIK,EAAKqB,OAAS,EACd,kBAAC,YAAD,CAAW+D,MAAOpF,EAAM0L,WAAW,EAAOC,YAAY,EAAM/B,KAAM,IAC9D,kBAAC,SAAD,CAAQtK,UAAU,YAAY+F,MAAM,SAASlE,OAAO,SAAS0B,MAAO,CAAClD,MAAM,OAAQkM,UAAU,IAC7F,kBAAC,SAAD,CAAQvM,UAAU,YAAY+F,MAAM,OAAOlE,OAAO,OAAO0B,MAAO,CAAClD,MAAM,OAAQkM,UAAU,IACzF,kBAAC,SAAD,CAAQvM,UAAU,YAAY+F,MAAM,gBAAgBlE,OAAO,iBAAiBmE,KAAM8L,EAAkBvO,MAAO,CAAClD,MAAM,OAAQkM,UAAU,IACpI,kBAAC,SAAD,CAAQvM,UAAU,YAAY+F,MAAM,gBAAgBlE,OAAO,qBAAqBmE,KAAM8L,EAAkBvO,MAAO,CAAClD,MAAM,OAAQkM,UAAU,IACtItO,EAAKqU,SAAW,kBAAC,SAAD,CAAQtM,KAlC/B,SAACC,EAASC,GAC7B,IAAIqM,EAAS,GAIb,MAHsB,YAAnBtM,EAAQtH,SACP4T,EAAS,4BAAQ1L,GAAIZ,EAAQwG,IAAKrM,QAASyR,EAAU7R,UAAU,eAAe2F,KAAK,UAA1E,WAEN,yBAAK3F,UAAU,yBAAyBuS,IA6ByBhP,MAAO,CAAClD,MAAM,YAGlE,uFAQJ8Q,GACA,yBAAKnR,UAAU,yBACX,yBAAKA,UAAU,4BACX,kBAAC,KAAD,CAAQ2F,KAAK,YAAYyL,MAAM,UAAUC,OAAQ,IAAKhR,MAAO,a,sCC9GvFmS,G,OAAOC,GAAsBC,MAqCpBC,G,iLAjCP,IAAI7M,EAAQhF,KAAK9C,MAAM0C,KAAKoF,MACxBlE,EAAOd,KAAK9C,MAAM0C,KAAKkB,KAE3B,OACE,kBAAC4Q,GAAD,CACE9R,KAAM,CACF,CACIiF,KAAM,MACNiN,EAAG9M,EACH+M,EAAGjR,EACHkR,YAAa,IACbC,OAAQ,CAAC3B,MAAO,aAGxB4B,OAAS,CACLC,UAAU,EACVC,MAAOpS,KAAK9C,MAAMkV,MAClBC,MAAO,CACHD,MAAO,CAACE,KAAM,sBAAuBC,KAAM,CAACC,KAAM,GAAIlC,MAAO,aAEjEmC,MAAO,CACHC,UAAW,YAEfC,UAAW,CAACH,KAAM,GAAIlC,MAAO,WAC7BiC,KAAK,CAACjC,MAAO,YAEjB7N,MAAS,CAAClD,MAAO,QACjBqT,kBAAoB,Q,GA7BJ1S,IAAMI,WCK5BuS,G,YACF,aAAc,IAAD,8BACT,+CACKxU,MAAQ,CACT4M,QAAS,GACT6H,UAAW,GACX3H,cAAe,GACf4H,YAAY,EACZC,SAAS,GAEb,EAAK3H,oBAAsB,EAAKA,oBAAoBe,KAAzB,iBAC3B,EAAK6G,aAAe,EAAKA,aAAa7G,KAAlB,iBACpB,EAAKyD,gBAAkB,EAAKA,gBAAgBzD,KAArB,iBAXd,E,iFAgBO,IAAD,OACfF,EAAmB,cAAc,SAAC5C,GAI9B,IAHA,IAAM1J,EAAO,GACPkB,EAAO,GACPkE,EAAQ,GACNgH,EAAI,EAAGA,EAAI1C,EAAQrI,SACvBrB,EAAKzB,KAAK,CAAC2C,KAAMwI,EAAQ0C,GAAGlL,KAAMkE,MAAOsE,EAAQ0C,GAAGkH,WACpDpS,EAAK3C,KAAKmL,EAAQ0C,GAAGlL,MACrBkE,EAAM7G,KAAKmL,EAAQ0C,GAAGkH,YACnBlH,GAAK,IAJuBA,KAQnC,EAAKlC,SAAS,CACVmB,QAAS3B,EACTwJ,UAAW,CAAClT,KAAMA,EAAMkB,KAAMA,EAAMkE,MAAOA,GAC3CgO,SAAS,S,0CAKDxC,GAAU,IAAD,OACzBxQ,KAAK8J,SAAS,CAACqB,cAAeqF,IAAW,WAClCjB,GAAqB,EAAKlR,MAAM8M,eAC/B,EAAKrB,SAAS,CAACiJ,YAAY,IAE3B,EAAKjJ,SAAS,CAACiJ,YAAY,S,mCAK1BlV,EAAQ+B,GAAM,IAAD,OACtB2P,GAA8B1R,EAAQ+B,EAAMI,KAAK6P,gBAAiB7P,KAAK4P,UACvE1D,EAAmB,cAAc,SAAC5C,GAC9B,EAAKQ,SAAS,CACVmB,QAAS3B,S,wCAMjBtJ,KAAK8J,SAAS,CACVqB,cAAe,GACf4H,YAAY,M,+BAIX,IAAD,OACJ,OACI,yBAAK7T,UAAU,eACX,wDACA,yBAAKA,UAAU,iBAEPc,KAAK3B,MAAM2U,QACX,kBAAC,IAAMnU,SAAP,KACI,yBAAKK,UAAU,0BACX,gDACA,kBAAC,YAAD,CAAU8D,IAAK,SAACkN,GAAD,OAAQ,EAAKN,SAAWM,KACvC,kBAAC,EAAD,CAAWjF,QAASjL,KAAK3B,MAAM4M,QAASE,cAAenL,KAAK3B,MAAM8M,cAAeE,oBAAqBrL,KAAKqL,oBAAqB8H,cAAc,EAAM1C,aAAa,UACjK,yBAAKvR,UAAU,sBAEX,kBAAC,GAAD,CAAgBiM,cAAenL,KAAK3B,MAAM8M,cAAe1E,SAAUzG,KAAK3B,MAAM0U,WAAY5G,eAAgBnM,KAAKiT,iBAGvH,yBAAK/T,UAAU,+BACVc,KAAK3B,MAAM2U,SAAW,kBAAC,GAAD,CAAepT,KAAMI,KAAK3B,MAAMyU,UAAWV,MAAM,gCAIhF,yBAAKlT,UAAU,4BACX,kBAAC,KAAD,CAAQ2F,KAAK,YAAYyL,MAAM,UAAUC,OAAQ,IAAKhR,MAAO,a,GAvFrEW,IAAMI,WAApBuS,GAeKtS,YAAcxD,EAiFV8V,UCzFAO,I,OAhBE,WACb,OACI,yBAAKlU,UAAU,iBACX,wCACA,4CACA,kJAEI,6BAFJ,sOAII,6BAJJ,uLCGGmU,GARA,WACX,OACI,yBAAKnU,UAAU,iBACX,wCCKGoU,GARC,WACZ,OACI,yBAAKpU,UAAU,iBACX,yCCKGqU,GARK,WAChB,OACI,yBAAKrU,UAAU,iBACX,8CCKGsU,GARI,WACf,OACI,yBAAKtU,UAAU,iBACX,4CCqDGuU,GAjDO,SAACvW,GAAW,IAAD,EAECG,mBAAS,YAFV,mBAEtBsN,EAFsB,KAEb+I,EAFa,KAI7B,OACI,yBAAKxU,UAAU,eACX,yBAAKA,UAAU,wBACX,yBAAKA,UAAU,oBACX,6CACA,4BACI,wBAAIA,UAAuB,aAAZyL,EAAyB,gBAAayG,GACjD,4BAAQvM,KAAK,SAASvF,QAAS,kBAAMoU,EAAW,cAAhD,aAEJ,wBAAIxU,UAAuB,WAAZyL,EAAuB,gBAAayG,GAC/C,4BAAQvM,KAAK,SAASvF,QAAS,kBAAMoU,EAAW,YAAhD,WAEJ,wBAAIxU,UAAuB,YAAZyL,EAAwB,gBAAayG,GAChD,4BAAQvM,KAAK,SAASvF,QAAS,kBAAMoU,EAAW,aAAhD,YAEJ,wBAAIxU,UAAuB,gBAAZyL,EAA4B,gBAAayG,GACpD,4BAAQvM,KAAK,SAASvF,QAAS,kBAAMoU,EAAW,iBAAhD,iBAEJ,wBAAIxU,UAAuB,eAAZyL,EAA2B,gBAAayG,GACnD,4BAAQvM,KAAK,SAASvF,QAAS,kBAAMoU,EAAW,gBAAhD,gBAGR,mCACA,4BACI,wBAAIxU,UAAuB,wBAAZyL,EAAoC,gBAAayG,GAC5D,4BAAQvM,KAAK,SAASvF,QAAS,kBAAMoU,EAAW,yBAAhD,oBAEJ,wBAAIxU,UAAuB,oBAAZyL,EAAgC,gBAAayG,GACxD,4BAAQvM,KAAK,SAASvF,QAAS,kBAAMoU,EAAW,qBAAhD,kBAEJ,wBAAIxU,UAAuB,mBAAZyL,EAA+B,gBAAayG,GACvD,4BAAQvM,KAAK,SAASvF,QAAS,kBAAMoU,EAAW,oBAAhD,iBAIC,aAAZ/I,GAA0B,kBAAC,GAAD,MACd,WAAZA,GAAwB,kBAAC,GAAD,MACZ,YAAZA,GAAyB,kBAAC,GAAD,MACb,gBAAZA,GAA6B,kBAAC,GAAD,MACjB,eAAZA,GAA4B,kBAAC,GAAD,SCnC9BgJ,GAbE,SAACzW,GACd,OACI,kBAAC,IAAM2B,SAAP,KACI,kBAAC,EAAD,CAAY+U,QAAS1W,IACrB,yBAAKgC,UAAU,eACX,+DAGJ,kBAAC,EAAD,QCPN2U,I,0BAEF,aAAc,IAAD,8BACT,+CACKxV,MAAQ,CACTyV,KAAM,IAEV,EAAKC,UAAY,EAAKA,UAAU3H,KAAf,iBACjB,EAAK4H,UAAY,EAAKA,UAAU5H,KAAf,iBANR,E,iFAWO,IAAD,OACfxO,MAAM,mBAAqBoC,KAAKH,QAAQrB,UACnCC,MAAK,SAAAC,GAAG,OAAIA,EAAIZ,UAChBW,MAAK,SAAAqV,GAAI,OAAI,EAAKhK,SAAS,CAACgK,KAAMA,S,yGAYvC,OACI,yBAAK5U,UAAU,qBACX,gDACA,yBAAKA,UAAU,YAAf,aAAqCc,KAAK3B,MAAMyV,KAAKtV,UACrD,yBAAKU,UAAU,eACX,kBAAC,SAAD,CAAQG,MAAM,uBAAuBC,QAASU,KAAK+T,kB,GAjChD7T,IAAMI,YAAvBuT,GAWKtT,YAAcxD,EA6BV8W,UCPAI,G,YAjCX,aAAc,IAAD,8BACT,+CAIJC,cAAgB,SAAAjW,GACZA,EAAMC,iBACN,IAAMmR,EAAQ,EAAKnS,MAAMiO,cAEnBhJ,EAAOqI,SAASC,cAAc,KACpCtI,EAAKuI,aAAa,WAAY,MAC9BvI,EAAKM,MAAMkI,QAAU,OACrBH,SAAStF,KAAK0F,YAAYzI,GAC1B,IAAI,IAAI6J,EAAI,EAAGA,EAAIqD,EAAMpO,OAAQ+K,IAC1BqD,EAAMrD,GAAGN,eACRvJ,EAAKuI,aAAa,OAAQ2E,EAAMrD,GAAGN,cACnCvJ,EAAK0I,SAGbL,SAAStF,KAAK4F,YAAY3I,GhB0B3B,SAAuBkN,EAAOhG,GACjC,IAAIY,EAAU,GACd1F,QAAQC,IAAI6K,GACZ,IAAI,IAAIrD,EAAI,EAAGA,EAAIqD,EAAMpO,OAAQ+K,IAC7B/B,EAAQ9L,KAAKkR,EAAMrD,GAAGL,KAE1BpH,QAAQC,IAAIyF,GACZrM,MAAM,iBAAkB,CACpBsM,OAAQ,OACRhF,KAAM6D,KAAKE,UAAU,CACjBgB,QAASA,IAEbE,QAAS,CACL,eAAgB,sBAGnB1L,MAAK,SAAAC,GAAG,OAAIA,EAAIZ,UAChBW,MAAK,SAAA6K,GACFD,EAAS,EAAGC,MAEfc,OAAM,SAAAC,GAAG,OAAIhB,EAAS,EAAGgB,MgB5C1B6B,CAAuB,EAAKhP,MAAMiO,eAAe,SAACtN,EAAQ+B,QAnB1D,EAAKsU,cAAgB,EAAKA,cAAc9H,KAAnB,iBAFZ,E,sEA2BT,OACI,kBAAC,SAAD,CAAQlN,UAAU,cAAcG,MAAM,WAAWoH,SAAUzG,KAAK9C,MAAMuJ,SAAUnH,QAASU,KAAKkU,oB,GA7BzEhU,IAAMI,WC0GxB6T,I,mBApGX,aAAc,IAAD,8BACT,+CAwBJC,eAAiB,SAAAnW,GACb,EAAK6L,SAAS,CAACuK,eAAe,KAxB9B,EAAKhW,MAAQ,CACT8M,cAAe,GACfmJ,aAAa,EACbD,eAAe,EACfE,gBAAgB,GAEpB,EAAKH,eAAiB,EAAKA,eAAehI,KAApB,iBACtB,EAAKoI,sBAAwB,EAAKA,sBAAsBpI,KAA3B,iBAC7B,EAAKqI,WAAa,EAAKA,WAAWrI,KAAhB,iBAClB,EAAK5J,OAAS,EAAKA,OAAO4J,KAAZ,iBACd,EAAK6G,aAAe,EAAKA,aAAa7G,KAAlB,iBAZX,E,mFAeSoE,GAAU,IAAD,OAC3BxQ,KAAK8J,SAAS,CAACqB,cAAeqF,IAAW,WAClC,EAAKnS,MAAM8M,eAAiB,EAAK9M,MAAM8M,cAAclK,OAAS,EAC7D,EAAK6I,SAAS,CAACwK,aAAa,IAE5B,EAAKxK,SAAS,CAACwK,aAAa,S,mCAS3BzW,EAAQ+B,GACjB2P,GAA8B1R,EAAQ+B,EAAM,KAAMI,KAAK9C,MAAM0S,Y,mCAGpD,IAAD,OACR5P,KAAK8J,SAAS,CACVwK,aAAa,EACbC,gBAAgB,IAEpBvU,KAAK9C,MAAMkX,eAAepU,KAAK3B,MAAM8M,eAAe,SAACd,GAC7CA,EAMA,EAAKP,SAAS,CAACwK,aAAa,IAL5B,EAAKxK,SAAS,CACVqB,cAAe,GACfkJ,eAAe,S,+BAS3BrU,KAAK8J,SAAS,CACVuK,eAAe,EACfE,gBAAgB,M,+BAMpB,IAAMG,EACF,kBAAC,IAAM7V,SAAP,KACI,6BACI,kBAAC,EAAD,CAAWoM,QAASjL,KAAK9C,MAAMuH,KAAM0G,cAAenL,KAAK3B,MAAM8M,cAAeE,oBAAqBrL,KAAKwU,sBAAuB/D,aAAa,QAAQ7M,QAAS5D,KAAK9C,MAAM0G,WAE5K,yBAAK1E,UAAU,UACbc,KAAK9C,MAAM0G,QAAU,GACnB,kBAAC,GAAD,CAAoBuH,cAAenL,KAAK3B,MAAM8M,cAAe1E,SAAUzG,KAAK3B,MAAMiW,YAAaK,mBAAoB3U,KAAKiT,eAE5H,kBAAC,SAAD,CAAQ5T,MAAOW,KAAK9C,MAAM0X,SAAUtV,QAASU,KAAKoU,eAAgB3N,SAAUzG,KAAK3B,MAAMiW,gBAKzFO,EACF,iDAGEC,EACF,6BACI,kBAAC,SAAD,CAAQzV,MAAM,MAAMC,QAASU,KAAKyU,WAAYhO,SAAUzG,KAAK3B,MAAMkW,iBACnE,kBAAC,SAAD,CAAQlV,MAAM,SAASC,QAASU,KAAKwC,UAI7C,OACI,yBAAKtD,UAAU,YACX,4BAAKc,KAAK9C,MAAM6X,SAChB,yBAAK7V,UAAU,mBACVc,KAAK9C,MAAMuH,KAAOiQ,EAAWG,GAElC,6BACI,kBAAC,SAAD,CAAQ9T,OAAQf,KAAK9C,MAAM0G,QAAS,4BAA8B,mBAAqBoR,OAAQF,EAAcvS,QAASvC,KAAK3B,MAAMgW,cAAe5R,MAAO,CAAClD,MAAO,SAAU0V,OAAO,EAAMzS,OAAQxC,KAAKwC,QAC7LxC,KAAK9C,MAAM0G,QAAU,sEAAwE,yF,GA9FhG1D,IAAMI,YCAvB4U,G,YAEF,aAAc,IAAD,8BACT,+CAmCJC,oBAAsB,SAACC,EAAc/L,GAEjC,IADA,IAAIW,EAAS,GACLgC,EAAI,EAAGA,EAAIoJ,EAAanU,OAAQ+K,IACpChC,EAAO7L,KAAKiX,EAAapJ,GAAGL,KAEhC/N,MAAM,oBAAqB,CACvBsM,OAAQ,OACRhF,KAAM6D,KAAKE,UAAU,CAACzK,SAAU,EAAKqB,QAAQrB,SAAUwL,OAAQA,IAC/DG,QAAS,CACL,eAAgB,sBAGnB1L,MAAK,SAAAC,GAAG,OAAIA,EAAIZ,UAChBW,MAAK,SAAA6K,GACFiG,GAA8B,EAAGjG,EAAS,KAAM,EAAKsG,UACrD,IAAIyF,EAAQ,EAAKhX,MAAMiX,UACvBD,EAAQ,EAAKE,eAAeF,EAAOrL,GACnC,EAAKF,SAAS,CAACwL,UAAWD,GAAQhM,EAAS,OAE9Ce,OAAM,SAAAC,GACHkF,GAA8B,EAAGlF,EAAK,KAAM,EAAKuF,UACjDvG,EAAS,OAzDR,EA6DbmM,kBAAoB,SAACJ,EAAc/L,GAE/B,IADA,IAAIW,EAAS,GACLgC,EAAI,EAAGA,EAAIoJ,EAAanU,OAAQ+K,IACpChC,EAAO7L,KAAKiX,EAAapJ,GAAGL,KAEhC/N,MAAM,eAAgB,CAClBsM,OAAQ,OACRhF,KAAM6D,KAAKE,UAAU,CAACzK,SAAU,EAAKqB,QAAQrB,SAAUwL,OAAQA,IAC/DG,QAAS,CACL,eAAgB,sBAGnB1L,MAAK,SAAAC,GAAG,OAAIA,EAAIZ,UAChBW,MAAK,SAAA6K,GACFiG,GAA8B,EAAGjG,EAAS,KAAM,EAAKsG,UACrD,IAAI/L,EAAY,EAAKxF,MAAMoX,cAC3B5R,EAAY,EAAK0R,eAAe1R,EAAWmG,GAC3C,EAAKF,SAAS,CAAC2L,cAAe5R,GAAYwF,EAAS,OAEtDe,OAAM,SAAAC,GACHkF,GAA8B,EAAGlF,EAAK,KAAM,EAAKuF,UACjDvG,EAAS,OAhFjB,EAAKhL,MAAQ,CACTG,SAAU,GACVkX,UAAW,GACXJ,UAAW,GACXG,cAAe,IAEnB,EAAKN,oBAAsB,EAAKA,oBAAoB/I,KAAzB,iBAC3B,EAAKoJ,kBAAoB,EAAKA,kBAAkBpJ,KAAvB,iBACzB,EAAKuJ,aAAe,EAAKA,aAAavJ,KAAlB,iBACpB,EAAKmJ,eAAiB,EAAKA,eAAenJ,KAApB,iBAXb,E,iFAgBO,IAAD,OACfxO,MAAM,wBAA0BoC,KAAKH,QAAQrB,UACxCC,MAAK,SAAAC,GAAG,OAAIA,EAAIZ,UAChBW,MAAK,SAAA6K,GAGF,IAFA,IAAIsM,EAAW,GACXhS,EAAU,GACNoI,EAAI,EAAGA,EAAI1C,EAAQrI,OAAQ+K,IACN,aAAtB1C,EAAQ0C,GAAGnO,OACV+X,EAASzX,KAAKmL,EAAQ0C,IAEtBpI,EAAQzF,KAAKmL,EAAQ0C,IAG7B,EAAKlC,SAAS,CACVwL,UAAWM,EACXH,cAAe7R,S,mCAuDlBiS,EAAW9P,GACpB,IAAI,IAAIiG,EAAI,EAAGA,EAAI6J,EAAU5U,OAAQ+K,IACjC,GAAG6J,EAAU7J,GAAGL,MAAQ5F,EACpB,OAAOiG,EAGf,OAAQ,I,qCAGGqD,EAAOmB,GAClB,IAAI,IAAIxE,EAAI,EAAGA,EAAIwE,EAASvP,OAAQ+K,IAAI,CACpC,IAAI8J,EAAQ9V,KAAK2V,aAAatG,EAAOmB,EAASxE,IAC3C8J,GAAS,GACRzG,EAAM0G,OAAOD,EAAO,GAG5B,OAAOzG,I,+BAGF,IAAD,OACJ,OACI,yBAAKnQ,UAAU,eACX,4CACA,yBAAKA,UAAU,eACX,kBAAC,GAAD,MACA,yBAAKA,UAAU,iBACX,kBAAC,YAAD,CAAU8D,IAAK,SAACkN,GAAD,OAAQ,EAAKN,SAAWM,KACvC,kBAAC,GAAD,CAAU6E,QAAQ,mBAAmBH,SAAS,mBAC1CnQ,KAAMzE,KAAK3B,MAAMiX,UACjBlB,eAAgBpU,KAAKmV,oBACrBvF,SAAU5P,KAAK4P,WAEnB,kBAAC,GAAD,CAAUmF,QAAQ,gCAAgCH,SAAS,iBACvDnQ,KAAMzE,KAAK3B,MAAMoX,cACjB7R,SAAS,EACTwQ,eAAgBpU,KAAKwV,2B,GA3H3BtV,IAAMI,WAAtB4U,GAgBK3U,YAAcxD,EAoHVmY,UCuBAc,GA7JE,SAAXA,EAAY9Y,GAEd,IAAMC,EAAOC,qBAAWL,GAFA,EAIEM,mBAAS,IAJX,mBAIjBgQ,EAJiB,KAIV+B,EAJU,OAKQ/R,mBAAS,IALjB,mBAKjB4Y,EALiB,KAKPC,EALO,OAMgB7Y,mBAAS,IANzB,mBAMjB8Y,EANiB,KAMHC,EANG,OAOgB/Y,mBAAS,IAPzB,mBAOjBgZ,EAPiB,KAOHC,EAPG,OAQcjZ,oBAAS,GARvB,mBAQjBkZ,EARiB,KAQJC,EARI,OASYnZ,oBAAS,GATrB,mBASjBoZ,EATiB,KASLC,EATK,OAUoBrZ,oBAAS,GAV7B,mBAUjBsZ,EAViB,KAUDC,EAVC,OAWsBvZ,oBAAS,GAX/B,mBAWjBwZ,EAXiB,KAWAC,EAXA,OAYwBzZ,oBAAS,GAZjC,mBAYjB0Z,EAZiB,KAYCC,EAZD,OAaoB3Z,oBAAS,GAb7B,mBAajB4Z,EAbiB,KAaDC,EAbC,KAexBxZ,qBAAU,WACQ,8CACR4P,KAAKD,GAASyJ,GAAmB,GAASA,GAAmB,KACpE,CAACzJ,IAEJ3P,qBAAU,WACNuY,EAAShV,QAAU,EAAI+V,GAAoB,GAASA,GAAoB,KACzE,CAACf,IAEJvY,qBAAU,WACNyY,EAAalV,QAAU,EAAKkV,IAAiBE,GAAgBa,GAAkB,GAASA,GAAkB,KAC3G,CAACf,EAAcE,IAElB,IAAMc,EAAoB,SAAClZ,GAEvB,OADWA,EAAMkS,OAAOrP,MAEpB,IAAK,QACDsO,EAASnR,EAAMkS,OAAOnL,OACtB,MACJ,IAAK,WACDkR,EAAYjY,EAAMkS,OAAOnL,OACzB,MACJ,IAAK,eACDoR,EAAgBnY,EAAMkS,OAAOnL,OAC7B,MACJ,IAAK,eACDsR,EAAgBrY,EAAMkS,OAAOnL,SAOnCiD,EAAa,WACfmH,EAAS,IACT8G,EAAY,IACZE,EAAgB,IAChBE,EAAgB,IAChBE,GAAe,GACfE,GAAc,GACdE,GAAkB,GAClBE,GAAmB,GACnBE,GAAoB,GACpBE,GAAkB,IAGhBE,EAAW,uCAAG,WAAOnZ,GAAP,mBAAAN,EAAA,6DAChBM,EAAMC,iBACAoG,EAAM,wBAA0B+I,EAFtB,SAGEzP,MAAM0G,GAHR,cAGV5F,EAHU,gBAIGA,EAAIZ,OAJP,OAIVA,EAJU,OAKbY,EAAIsR,KACHwG,GAAe,GACfE,EAAc5Y,EAAKuZ,QACnBT,EAAkB9Y,EAAKwZ,aARX,2CAAH,sDAYXtZ,EAAY,uCAAG,WAAOC,GAAP,iBAAAN,EAAA,6DACjBM,EAAMC,iBADW,SAECN,MAAM,cAAe,CACnCsM,OAAQ,OACRhF,KAAM6D,KAAKE,UAAU,CACjB6K,KAAM,CAAEtV,SAAU6O,EAAO4I,SAAUA,KAEvC9L,QAAS,CAAE,eAAgB,sBAPd,cAEXzL,EAFW,gBASEA,EAAIZ,OATN,QASX8B,EATW,QAUTR,eACJmF,QAAQC,IAAI,iBACZyD,IACA9K,EAAK2C,aAAaF,IAElBoW,EAASpG,SAASjC,KAAK,CAACC,SAAU,QAASC,QAAS,eAAgBC,OAAQ,6CAf/D,2CAAH,sDAmBZyJ,GAAe,uCAAG,WAAOtZ,GAAP,iBAAAN,EAAA,6DACpBM,EAAMC,iBADc,SAEFN,MAAM,iBAAkB,CACtCsM,OAAQ,OACRhF,KAAM6D,KAAKE,UAAU,CACjB6K,KAAM,CAAEtV,SAAU6O,EAAO4I,SAAUE,EAAckB,OAAQZ,KAE7DtM,QAAS,CAAE,eAAgB,sBAPX,cAEdzL,EAFc,gBASDA,EAAIZ,OATH,QASd8B,EATc,QAUZ/B,QACJoK,IACA9K,EAAK2C,aAAa,CAACV,cAAeQ,EAAKR,cAAeZ,SAAUoB,EAAKpB,YAErEwX,EAASpG,SAASjC,KAAK,CAACC,SAAU,QAASC,QAAS,sBAAuBC,OAAQ,sBAdnE,2CAAH,sDAmDrB,OACI,kBAAC,IAAMjP,SAAP,KACI,8CACA,kBAAC,YAAD,CAAUmE,IAAK,SAACkN,GAAD,OAAQ8F,EAASpG,SAAWM,KAC3C,iDACA,yBAAKhR,UAAU,cACX,kBAAC,aAAD,CAAW2F,KAAK,QAAQ/D,KAAK,QAAQkE,MAAOqI,EAAOjH,SAAU+Q,IAC7D,kBAAC,SAAD,CAAQjY,UAAU,eAAeG,MAAM,OAAOmY,KAAK,oBAAoBlY,QAAS8X,EAAa3Q,SAAUoQ,KAEzGN,EAAc,yBAAKrX,UAAU,iBAAiByX,EAxChD,kBAAC,IAAM9X,SAAP,KACI,yDACA,yBAAKK,UAAU,UAAf,wDACA,kBAAC,aAAD,CAAWA,UAAU,WAAW2F,KAAK,WAAW/D,KAAK,WAAWkE,MAAOiR,EAAU7P,SAAU+Q,IAC3F,6BACI,kBAAC,SAAD,CAAQ9X,MAAM,QAAQC,QAAStB,EAAcyI,SAAUsQ,MAQ/D,kBAAC,IAAMlY,SAAP,KACI,4BAAK4X,EAAa,4BAA6B,oBAA/C,oBACA,6BACI,yBAAKvX,UAAU,UAAf,wDACA,kBAAC,aAAD,CAAWA,UAAU,WAAW2F,KAAK,WAAW/D,KAAK,eAAekE,MAAOmR,EAAc/P,SAAU+Q,KAEvG,6BACI,yDACA,kBAAC,aAAD,CAAWjY,UAAU,WAAW2F,KAAK,WAAW/D,KAAK,eAAekE,MAAOqR,EAAcjQ,SAAU+Q,KAEvG,6BACI,kBAAC,SAAD,CAAQ9X,MAAM,WAAWC,QAASiY,GAAiB9Q,SAAUwQ,OAgBkC,KCpIpGha,I,OAAAA,aAnBD,SAACC,GACX,IAAMC,EAAOC,qBAAWL,GAChBS,EAAaN,EAAbM,SACFia,EAAMja,EAASa,MAAMO,UAE3B,OACI,kBAAC,IAAMC,SAAP,KACK1B,EAAKiC,cAAgB,kBAAC,IAAD,CAAUL,GAAIvB,EAASa,MAAMC,OAC/C,yBAAKY,UAAU,eACX,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,aAAauY,GAAY,IACxC,kBAAC,GAAD,aC8BTC,I,wLA3CP,IAAMzV,EACF,6BACCjC,KAAK9C,MAAMya,SAAS3V,QAAQC,YAAYhB,OACrCjB,KAAK9C,MAAMya,SAAS3V,QAAQC,YAAYtB,KAAI,SAACC,GAAD,OACxC,wBAAIC,IAAKD,EAAKuB,KAAMjD,UAAU,WAC1B,yBAAKA,UAAU,cAAc0B,EAAKwB,UAClC,6BACA,yBAAKlD,UAAU,cAAa,uBAAGQ,KAAMkB,EAAKuB,MAAOvB,EAAKuB,WAI9D,yBAAKjD,UAAU,cAAf,mBAOR,OACI,kBAAC,IAAML,SAAP,KACI,wBAAIK,UAAU,iBAAd,YAAwCc,KAAK9C,MAAMya,SAAS3V,QAAQ3C,OACpE,yBAAKH,UAAU,cACX,yBAAKA,UAAU,qBACX,6CACA,4BACK+C,IAGT,yBAAK/C,UAAU,qBACX,gDACA,wBAAIA,UAAU,cAAd,WAAoCc,KAAK9C,MAAMya,SAAStV,gBAAgBf,OAAS,uBAAG5B,KAAMM,KAAK9C,MAAMya,SAAStV,gBAAgBf,QAAStB,KAAK9C,MAAMya,SAAStV,gBAAgBf,QAAc,iBACzL,wBAAIpC,UAAU,cAAd,YAAqCc,KAAK9C,MAAMya,SAAStV,gBAAgBC,UAE7E,yBAAKpD,UAAU,qBACX,8CACA,yBAAKA,UAAU,cAAcc,KAAK9C,MAAMya,SAAStQ,OAAOvG,KAAOd,KAAK9C,MAAMya,SAAStQ,OAAOvG,KAAO,wB,GAtCzFZ,IAAMI,YCkCvBsX,G,iLA9BP,IAAMC,EACF,6BACM7X,KAAK9C,MAAMya,SAASG,cAAgB,uBAAGpY,KAAMM,KAAK9C,MAAMya,SAASG,eAAgB9X,KAAK9C,MAAMya,SAASG,eAAqB,iBAIpI,OACI,kBAAC,IAAMjZ,SAAP,KACI,wBAAIK,UAAU,iBAAd,+BACA,yBAAKA,UAAU,cACX,yBAAKA,UAAU,qBACX,iDACA,yBAAKA,UAAU,cACV2Y,IAGT,yBAAK3Y,UAAU,qBACX,iDACA,kBAAC,EAAD,CAAiBwB,MAAOV,KAAK9C,MAAMya,SAASnU,UAEhD,yBAAKtE,UAAU,qBACX,uDACA,kBAAC,EAAD,CAAmBwB,MAAOV,KAAK9C,MAAMya,SAASrU,iB,GAzB1CpD,IAAMI,WCiCnByX,G,iLA9BP,IAAMF,EACF,6BACM7X,KAAK9C,MAAMya,SAASK,cAAgB,uBAAGtY,KAAMM,KAAK9C,MAAMya,SAASK,eAAgBhY,KAAK9C,MAAMya,SAASK,eAAqB,iBAIpI,OACI,kBAAC,IAAMnZ,SAAP,KACI,wBAAIK,UAAU,iBAAd,sCACA,yBAAKA,UAAU,cACX,yBAAKA,UAAU,qBACX,iDACA,yBAAKA,UAAU,cACV2Y,IAGT,yBAAK3Y,UAAU,qBACX,+CACA,kBAAC,EAAD,CAAiBwB,MAAOV,KAAK9C,MAAMya,SAASlU,UAEhD,yBAAKvE,UAAU,qBACX,uDACA,kBAAC,EAAD,CAAmBwB,MAAOV,KAAK9C,MAAMya,SAASpU,iB,GAzB1CrD,IAAMI,WCmFnB2X,G,YAzEX,aAAc,IAAD,8BACT,+CACK5Z,MAAQ,CACToG,KAAM,GACNyT,QAAS,GACTlW,QAAS,GACTc,IAAK,GACLI,IAAK,GACL8P,SAAS,EACTjF,QAAS,IAEb,EAAK4B,YAAc,EAAKA,YAAYvD,KAAjB,iBAXV,E,iFAcO,IAAD,OACf7H,QAAQC,IAAIxE,KAAK9C,MAAMib,MAAM1I,OAAO2I,IAAM,IAAMpY,KAAK9C,MAAMib,MAAM1I,OAAO4I,KACxE,IAAIxL,EAAS,aAAe7M,KAAK9C,MAAMib,MAAM1I,OAAO2I,IAAM,IAAMpY,KAAK9C,MAAMib,MAAM1I,OAAO4I,IACxF9T,QAAQC,IAAIqI,GACZX,EAAmBW,GAAQ,SAACpI,GACxBF,QAAQC,IAAIC,GACTA,EACC,EAAKqF,SAAS,CACVrF,KAAMA,EACNyT,QAAS,CAACpX,KAAM2D,EAAK3D,KAAMe,UAAW4C,EAAK5C,UAAWD,YAAa6C,EAAK7C,aACxEI,QAAS,CAACA,QAASyC,EAAKzC,QAASqF,OAAQ5C,EAAK4C,OAAQhF,gBAAiBoC,EAAKpC,iBAC5ES,IAAK,CAACQ,QAASmB,EAAKnB,QAASE,OAAQiB,EAAKjB,OAAQsU,cAAerT,EAAKzC,QAAQ8V,eAC9E5U,IAAK,CAACK,QAASkB,EAAKlB,QAASE,OAAQgB,EAAKhB,OAAQuU,cAAevT,EAAKzC,QAAQgW,eAC9EhF,SAAS,IAGb,EAAKlJ,SAAS,CAACiE,QAAS,+C,kCAKxBlQ,EAAQ+B,GAChB2P,GAA8B1R,EAAQ+B,EAAMI,KAAK6P,gBAAiB7P,KAAK4P,Y,+BAGlE,IAAD,OACJ,OACI,yBAAK1Q,UAAU,eACX,kBAAC,YAAD,CAAU8D,IAAK,SAACkN,GAAD,OAAQ,EAAKN,SAAWM,KACvC,yBAAKhR,UAAU,aACX,8CAAoBc,KAAK3B,MAAMoG,KAAK3D,MACpC,kBAAC,GAAD,CAAoB2F,UAAU,EAAO0E,cAAe,CAACnL,KAAK3B,MAAMoG,MAAOkQ,mBAAoB3U,KAAK2P,eAEpG,kBAAC,EAAD,CAAsB/P,KAAMI,KAAK3B,MAAM6Z,UACvC,yBAAKhZ,UAAU,gBACVc,KAAK3B,MAAM2U,QACR,kBAAC,UAAD,CAASnQ,kBAAkB,GACvB,kBAAC,WAAD,CAAU9B,OAAO,WACb,kBAAC,GAAD,CAAmB4W,SAAU3X,KAAK3B,MAAM2D,WAE3ChC,KAAK3B,MAAMoG,KAAKyC,SAASvG,KAAI,SAACkE,GAAD,OAC1B,kBAAC,WAAD,CAAUhE,IAAKgE,EAAK/D,KAAMC,OAAQ8D,EAAK/D,MACpB,QAAd+D,EAAK/D,KACF,kBAAC,GAAD,CAAe6W,SAAU,EAAKtZ,MAAMyE,MAEpC,kBAAC,GAAD,CAAe6U,SAAU,EAAKtZ,MAAM6E,WAMpD,4BAAKlD,KAAK3B,MAAM0P,e,GAlErB7N,IAAMI,WCoEVgY,G,YA/DX,aAAc,IAAD,8BACT,+CACKja,MAAQ,CACTe,eAAe,EACfoS,SAAS,EACTsC,KAAM,GACNhU,aAAc,SAACkF,GACX,EAAK8E,SAAS,CACV1K,cAAe4F,EAAM5F,cACrBZ,SAAUwG,EAAMxG,SAChBgT,QAASxM,EAAMwM,WAGvB7S,eAAgB,WACZ,EAAKmL,SAAS,CACV1K,eAAe,EACfoS,SAAS,EACTsC,KAAM,OAjBT,E,iFAuBO,IAAD,OACX9T,KAAK3B,MAAMe,eACXxB,MAAM,oBACLa,MAAK,SAAAC,GACF,OAAkB,MAAfA,EAAIb,OACIa,EAAIZ,OAEJ,CAACsB,eAAe,EAAOoS,SAAS,EAAOhT,SAAU,OAG/DC,MAAK,SAAAmB,GAAS,EAAKvB,MAAMyB,aAAaF,Q,+BAM3C,IAAM2Y,EACF,kBAAC,GAAD,MAGJ,OACI,kBAACxb,EAAYkT,SAAb,CAAsBjL,MAAOhF,KAAK3B,OAC9B,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOS,OAAK,EAACR,KAAM,IAAI8B,UAAWoY,IAClC,kBAAC,IAAD,CAAO1Z,OAAK,EAACR,KAAM,cAAc8B,UAAWsO,KAC5C,kBAAC,IAAD,CAAO5P,OAAK,EAACR,KAAM,aAAa8B,UAAWsQ,KAC3C,kBAAC,IAAD,CAAO5R,OAAK,EAACR,KAAM,SAAS8B,UAAWyS,KACvC,kBAAC,IAAD,CAAO/T,OAAK,EAACR,KAAM,iBAAiB8B,UAAWqT,KAC/C,kBAAC,IAAD,CAAO3U,OAAK,EAACR,KAAM,YAAY8B,UAAWuT,KAC1C,kBAAC,IAAD,CAAO7U,OAAK,EAACR,KAAK,kBAAkB8B,UAAWqY,KAC/C,kBAAC,IAAD,CAAOna,KAAK,aAAa8B,UAAW6X,KACpC,kBAAC,EAAD,CAAc3Z,KAAK,WAAW8B,UAAWmY,EAASlY,SAAS,qBAE/D,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GA1DKH,IAAMI,WCDZoY,G,iLARb,OACC,yBAAKxZ,UAAU,OACd,kBAAC,GAAD,W,GAJcgB,IAAMI,WCOJqY,QACW,cAA7BC,OAAOpb,SAASqb,UAEe,UAA7BD,OAAOpb,SAASqb,UAEhBD,OAAOpb,SAASqb,SAASV,MACvB,2DCRNW,IAAS7Y,OACL,kBAAC,IAAD,KACI,kBAAC,GAAD,OAELuK,SAASuO,eAAe,SDmHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMza,MAAK,SAAA0a,GACjCA,EAAaC,iB","file":"static/js/main.1d05efb3.chunk.js","sourcesContent":["import { createContext } from 'react';\n\nexport const AuthContext = createContext();","import React, {useState, useEffect, useContext} from 'react';\nimport { NavLink } from 'react-router-dom';\nimport {Button} from 'primereact/button';\nimport {AuthContext} from '../../context/auth';\nimport './Navigation.css';\nimport { slide as Menu } from 'react-burger-menu';\nimport {withRouter} from 'react-router'\n\nconst Navigation = (props) => {\n\n    const auth = useContext(AuthContext);\n    const [isOnline, setIsOnline] = useState(false);\n    const { location, history } = props\n\n    useEffect(() => {\n        const checkStatus = async () => {\n            const status = await fetch('/pachyderm/status');\n            const json = await status.json();\n            setIsOnline(json.isOnline);\n        }\n        checkStatus();\n    }, []);\n\n    const onLoginClick = (event) => {\n        event.preventDefault();\n        history.push({pathname: '/Authentication', state:{path: location.pathname}});\n    }\n\n    const onLogoutClick = (event) => {\n        event.preventDefault();\n        fetch('/user/logout/:' + auth.username)\n            .then(res => {\n                auth.resetAuthToken();\n                history.push({pathname: '/Authentication', state:{path: location.pathname, logoutMsg: 'You have logged out'}});\n            });            \n    }\n\n    return(\n        <React.Fragment>\n            <header>\n                <NavLink exact to='/'><img src={process.env.PUBLIC_URL + \"/images/trumpet-orcestra.png\"} alt='' /></NavLink>\n                <div className='navBarContainer'>\n                    <div className='navBar'>\n                        <div><NavLink exact to='/' activeClassName='active-link'>Home</NavLink></div>\n                        <div><NavLink exact to=\"/PSetSearch\" activeClassName='active-link'>Search and Request</NavLink></div>\n                        <div><NavLink exact to=\"/Dashboard\" activeClassName='active-link'>Request Status</NavLink></div>\n                        <div><NavLink exact to=\"/Documentation\" activeClassName='active-link'>Documentation</NavLink></div>\n                        { auth.authenticated && <div className='menu-item'><NavLink exact to=\"/Profile\" activeClassName='active-link'>Profile</NavLink></div> }\n                        <div>\n                            {\n                                auth.authenticated ? \n                                <Button label='Logout' onClick={onLogoutClick}/> : <Button label='Login/Register' onClick={onLoginClick}/>\n                            }\n                        </div> \n                        <div>\n                            {isOnline ? \n                                <div className='pachydermStatus isOnline'>\n                                    <div className='icon'><i className='pi pi-check'></i></div><div className='text'>Pachyderm is <br />online</div>\n                                </div> \n                                : \n                                <span className='pachydermStatus isOffline'>\n                                    <div className='icon'><i className='pi pi-ban'></i></div><div className='text'>Pachyderm is <br />offline</div>\n                                </span>\n                            }\n                        </div>    \n                    </div>\n                    <div className='burgerNav'>\n                        <Menu width={ 200 } isOpen={true} > \n                            <div className='menu-item'><NavLink exact to='/' activeClassName='active-link'>Home</NavLink></div>\n                            <div className='menu-item'><NavLink exact to=\"/PSetSearch\" activeClassName='active-link'>Search and Request</NavLink></div>\n                            <div><NavLink exact to=\"/Dashboard\" activeClassName='active-link'>Request Status</NavLink></div>\n                            <div><NavLink exact to=\"/Documentation\" activeClassName='active-link'>Documentation</NavLink></div>\n                            { auth.authenticated && <div className='menu-item'><NavLink exact to=\"/Profile\" activeClassName='active-link'>Profile</NavLink></div> }\n                            <div className='menu-item'>\n                                {\n                                    auth.authenticated ? \n                                    <Button label='Logout' onClick={onLogoutClick}/> : <Button label='Login/Register' onClick={onLoginClick}/>\n                                }\n                            </div>\n                            <div>\n                                {isOnline ? \n                                    <div className='pachydermStatus isOnline'>\n                                        <div className='icon'><i className='pi pi-check'></i></div><div className='text'>Pachyderm is <br />online</div>\n                                    </div> \n                                    : \n                                    <span className='pachydermStatus isOffline'>\n                                        <div className='icon'><i className='pi pi-ban'></i></div><div className='text'>Pachyderm is <br />offline</div>\n                                    </span>\n                                }\n                            </div>\n                        </Menu>\n                    </div>   \n                </div>\n                \n                <div className='loggedIn'>{auth.authenticated ? 'Logged in as: ' + auth.username : ''}</div> \n            </header>\n        </React.Fragment>\n    );\n}\n\nexport default withRouter(Navigation);","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport './Footer.css';\n\nconst Footer = (props) => {\n    return(\n        <div className='appFooter'>\n            <div className='footerContainer'>\n                <div className=\"footerMenu footerLinks\">\n                    <h3>Menu</h3>\n                    <NavLink exact to=\"/PSetSearch\" >Search and Request</NavLink>\n                    <NavLink exact to=\"/Dashboard\" >Request Status</NavLink>\n                    <NavLink exact to=\"/Stats\" >Statistics</NavLink>\n                </div>\n                <div className=\"footerSupport footerLinks\">\n                    <h3>Support</h3>\n                    <NavLink exact to=\"/Documentation\" >Documentation</NavLink>\n                    <NavLink exact to=\"/Tutorial\" >Contributing your data</NavLink>\n                    <a href=\"https://github.com/bhklab\">GitHub</a>\n                    <a href=\"https://bhklab.ca/\">BHKLab</a>\n                </div>\n                <div className=\"footerContact\">\n                    <h3>BHKLab</h3>\n                    <div className='contactInfo'>\n                        The MaRS center\n                        <br />\n                        101 College St, Toronto ON\n                        {' '}\n                        <br />\n                        TMDT RM 11-310\n                    </div>\n                </div>\n            </div>\n        </ div>\n    );\n} \n\nexport default Footer;","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport {AuthContext} from '../../context/auth';\n\nclass PrivateRoute extends React.Component {\n    \n    static contextType = AuthContext;\n\n    componentDidMount(){\n        fetch('/user/checkToken')\n            .then(res => {\n                if(res.status === 200){\n                    return(res.json());\n                }else{\n                    return({authenticated: false, username: ''});\n                }\n            })\n            .then(data => {this.context.setAuthToken(data)});\n    }\n    \n    render(){\n        const userAuth = this.context;\n        return(\n            <Route            \n                exact path={this.props.path} \n                render={(props) => userAuth.authenticated ? React.cloneElement(this.props.component, {...props}) : (<Redirect to={{pathname: this.props.redirect, state: {path: this.props.path}}} />)}\n            />\n        );\n    }\n}\n\nexport default PrivateRoute;","import React from 'react';\nimport {Accordion,AccordionTab} from 'primereact/accordion';\n\nclass PSetToolAccordion extends React.Component {\n\n    render(){\n        const toolAccordionTabs = this.props.items.map((item) => \n            <AccordionTab key={item.name} header={item.name}>\n                {item.commands.length ? \n                    <ul>\n                        {item.commands.map((command) => \n                            <li key={command}>\n                                {command}\n                            </li>    \n                        )}\n                    </ul>\n                    :\n                    \"Not Available\"\n                }\n                   \n            </AccordionTab>\n        );\n        \n        return(\n            this.props.items.length ? \n                <Accordion multiple={true}>\n                    {toolAccordionTabs}\n                </Accordion>\n                :\n                <div className='subContent'>Not Available</div>\n        );\n    }\n\n}\n\nclass RNARefAccordion extends React.Component {\n    \n    render(){\n        const rnaRefAccordionTabs = this.props.items.map((item) => \n            <AccordionTab key={item.name} header={item.name}>\n                <ul>\n                    <li className='listItem-1'>\n                        <div>{item.name.length ? item.name : 'Currently not available'}</div>\n                        <div>{item.source.length ? <a href={item.source}>{item.source}</a> : 'Currently not available'}</div>\n                    </li>                    \n                </ul> \n            </AccordionTab>\n        );\n    \n        return(\n            this.props.items.length ? \n                <Accordion multiple={true}>\n                    {rnaRefAccordionTabs}\n                </Accordion>\n                :\n                <div className='subContent'>Not Available</div>\n        );\n    }\n    \n}\n\nclass DNARefAccordion extends React.Component {\n\n    render(){\n        const exomeRefAccordionTabs = this.props.items.map((item) => \n            <AccordionTab key={item.name} header={item.name}>\n                <ul>\n                    <li className='listItem-1'>\n                        <div>{item.name.length ? item.name: 'Currently not available'}</div>\n                        <div>{item.source.length ? <a href={item.source}>{item.source}</a> : 'Currently not available'}</div>\n                    </li>\n                    <li className='listItem-1'>\n                        <div>{item.cosmic.name}</div>\n                        <div><a href={item.cosmic.source}>{item.cosmic.source}</a> </div>\n                    </li>\n                    <li className='listItem-1'>\n                        <div>{item.exonTarget.name}</div>\n                        <div><a href={item.exonTarget.source}>{item.exonTarget.source}</a></div>\n                    </li>                       \n                </ul> \n            </AccordionTab>\n        );\n    \n        return(\n            this.props.items.length ? \n                <Accordion multiple={true}>\n                    {exomeRefAccordionTabs}\n                </Accordion>\n                :\n                <div className='subContent'>Not Available</div>\n        );\n    }\n\n}\n\nclass GeneralInfoAccordion extends React.Component {\n    render(){   \n        return(\n            <Accordion className='generalInfoAccordion'>\n                <AccordionTab header=\"General Information\">\n                    <h4 className='subContent'>PSet Name: {this.props.data.name}</h4>\n                    <h4 className='subContent'>Date Created: {this.props.data.dateCreated}</h4>\n                    {this.props.data.createdBy && <h4 className='subContent'>Created By {this.props.data.createdBy}</h4>}\n                </AccordionTab>    \n            </Accordion>    \n        );\n    }\n}\n\nexport {\n    PSetToolAccordion,\n    RNARefAccordion,\n    DNARefAccordion,\n    GeneralInfoAccordion\n}\n","import React from 'react';\nimport {Dialog} from 'primereact/dialog';\nimport {Accordion,AccordionTab} from 'primereact/accordion';\nimport {TabView,TabPanel} from 'primereact/tabview';\nimport {PSetToolAccordion, RNARefAccordion, DNARefAccordion} from '../PSet/PSetAccordion';\n\nconst DatasetDialog = (props) => {\n    \n    const datasetAccordionTabs = props.dataset.map((item) => \n        <AccordionTab key={item.label} header={item.label}>\n            <div className='tabContent'>\n                <div className='tabContentSection'>\n                    <h3>Publication: </h3>\n                    <ul>\n                        <div>    \n                            {item.publication.length ? \n                                item.publication.map((p) => \n                                    <li key={p.link} className='pubList'>\n                                        <div className='subContent'>{p.citation}</div>\n                                        <br />\n                                        <div className='subContent'><a href={p.link}>{p.link}</a></div>\n                                    </li>\n                                )\n                                :\n                                <div className=\"subContent\">\n                                    Not available.\n                                </div>\n                            }  \n                        </div>\n                    </ul> \n                </div>\n                <div className='tabContentSection'>\n                    <h3>Drug Sensitivity</h3>\n                    <h4 className='subContent'>Source: {item.drugSensitivity.source ? <a href={item.drugSensitivity.source}>{item.drugSensitivity.source}</a> : 'Not available'}</h4>\n                    <h4 className='subContent'>Version: {item.drugSensitivity.version}</h4>\n                </div>\n            </div> \n        </AccordionTab>\n    );\n    \n    return(\n        <Dialog header=\"Dataset Overview\" visible={props.visible} onHide={props.onHide} style={{minWidth: '50vw', minHeight: '30vh'}} >\n            <Accordion multiple={true}>\n                {datasetAccordionTabs}\n            </Accordion>\n        </Dialog>\n    )\n}\n\nconst RNADialog = (props) => {\n    return(\n        <Dialog header=\"RNA Pipeline Overview\" visible={props.visible} onHide={props.onHide} style={{minWidth: '50vw', minHeight: '30vh'}} >\n            <TabView renderActiveOnly={false}>\n                <TabPanel key='rnaTools' header=\"RNA Tools\">\n                    <h3>Available RNA Pipeline Tools</h3>\n                    <PSetToolAccordion items={props.rna.tool} />\n                </TabPanel>\n                <TabPanel key='rnaRef' header=\"RNA References\">\n                    <h3>Available RNA Transcriptome References</h3>\n                    <RNARefAccordion items={props.rna.ref} />\n                </TabPanel>\n            </TabView>\n        </Dialog>\n    )\n}\n\nconst DNADialog = (props) => {\n    return(\n        <Dialog header=\"DNA Sequence Alignment Overview\" visible={props.visible} onHide={props.onHide} style={{minWidth: '50vw', minHeight: '30vh'}} >\n            <TabView renderActiveOnly={false}>\n                <TabPanel key='dnaTools' header=\"DNA Tools\">\n                    <h3>Available DNA Pipeline Tools</h3>\n                    <PSetToolAccordion items={props.dna.tool} />\n                </TabPanel>\n                <TabPanel key='dnaRef' header=\"DNA References\">\n                    <h3>Available DNA Exome References</h3>\n                    <DNARefAccordion items={props.dna.ref} />\n                </TabPanel>\n            </TabView>\n        </Dialog>\n    )\n}\n\nexport {\n    DatasetDialog,\n    RNADialog,\n    DNADialog\n}","import React, {useState, useEffect} from 'react';\nimport {DataTable} from 'primereact/datatable';\nimport {Column} from 'primereact/column';\nimport { Link } from 'react-router-dom';\nimport {DatasetDialog, RNADialog, DNADialog} from '../MainDialog/MainDialog';\nimport './Main.css';\n\nconst OrcestraMain = (props) => {\n    \n    const [statsData, setStatsData] = useState([]);\n    const [formData, setFormData] = useState({\n        dataset: [],\n        rnaTool: [],\n        dnaTool: [],\n        rnaRef: [],\n        dnaRef: []\n    });\n    const [dashboard, setDashboard] = useState({\n        pending: 0,\n        inProcess: 0\n    });\n    const [datasetVisible, setDatasetVisible] = useState(false);\n    const [rnaVisible, setRNAVisible] = useState(false);\n    const [dnaVisible, setDNAVisible] = useState(false);\n\n    useEffect(() => {\n        const fetchData = async (api) => {\n            const res = await fetch(api);\n            const json = await res.json();\n            console.log(json);\n            setStatsData(json.pset);\n            setFormData(json.form[0]);\n            setDashboard(json.dashboard);\n        }\n        fetchData('/landing/data');\n    }, [])\n\n    const nameColumnTemplate = (rowData, column) => {\n        let route = '/' + rowData.doi;\n        return(\n            <Link to={route} >{rowData.name}</Link>\n        );\n    }\n\n    const showDialog = (type) => {\n        switch(type){\n            case 'dataset':\n                setDatasetVisible(true);\n                break;\n            case 'rna':\n                setRNAVisible(true);\n                break;\n            case 'dna':\n                setDNAVisible(true);\n                break;\n            default:\n                break;\n        }\n    }\n\n    const hideDialog = (type) => {\n        switch(type){\n            case 'dataset':\n                setDatasetVisible(false);\n                break;\n            case 'rna':\n                setRNAVisible(false);\n                break;\n            case 'dna':\n                setDNAVisible(false);\n                break;\n            default:\n                break;\n        }\n    }\n\n    return (\n        <React.Fragment>\n            <div className='mainContent'>\n                <div className=\"home\">\n                    <h1>ORCESTRA</h1>   \n                    <h2>Orchestration platform for reproducing pharmacogenomic analyses</h2>\n                    <div className='mainMenuContainer'>\n                        <div className='mainMenuRow'>\n                            <div className='mainMenuColumn'>\n                                <div className='mainMenuItem'>\n                                    <h2>Search and Request PSets</h2>\n                                    <div className='mainMenuItemContent'>\n                                        <div>Design your own PSet using:</div>\n                                        <div className='mainMenuItemLine'><span className='largeNum'>\n                                            <button onClick={() => {showDialog('dataset')}}>{formData.dataset.length}</button></span> <span>Datasets.</span>\n                                        </div>\n                                        <div className='mainMenuItemLine'><span className='largeNum'>\n                                            <button onClick={() => {showDialog('rna')}}>{formData.rnaTool.length}</button></span> <span>RNA pipelines.</span>\n                                        </div>\n                                        <div className='mainMenuItemLine'><span className='largeNum'>\n                                            <button onClick={() => {showDialog('dna')}}>{formData.dnaTool.length}</button></span> <span>DNA sequence alignment tools.</span>\n                                        </div>\n                                        <div className='mainMenuLink'>\n                                            <a className='button' href=\"/PSetSearch\">Search and Request</a>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                            <div className='mainMenuColumn'>\n                                <div className='mainMenuItem' style={{ alignSelf: 'flex-start'}}>\n                                    <h2>View PSet Request Status</h2>\n                                    <div className='mainMenuItemContent'>\n                                        <div>ORCESTRA is processing following requests:</div>\n                                        <div className='mainMenuItemLine'><span className='largeNum'>{dashboard.pending}</span> <span>Requests in queue.</span></div>\n                                        <div className='mainMenuItemLine'><span className='largeNum'>{dashboard.inProcess}</span> <span >Requests in process.</span></div>\n                                        <div className='mainMenuLink'><a className='button' href=\"/Dashboard\">View Dashboard</a></div>\n                                    </div>\n                                </div>\n                            </div> \n                            <div className='mainMenuColumn'>\n                                <div className='mainMenuItem'>\n                                    <h2>Top 5 Popular PSets</h2>\n                                    <div className='mainMenuItemContent'>\n                                        <DataTable value={statsData} >\n                                            <Column className='textField' field='download' header='Download' />\n                                            <Column className='textField' field='name' header='Name' body={nameColumnTemplate}/>\n                                        </DataTable>\n                                        <div className='mainMenuLink'><a className='button' href=\"/Stats\">View Statistics</a></div>\n                                    </div>\n                                </div> \n                                <div className='mainMenuItem'>\n                                    <h2>Generate PSets with Your Data</h2>\n                                    <div className='mainMenuItemContent'>\n                                        <p>\n                                            <b>You can generate PSets using your own datasets.</b> <br /> \n                                            For more information, please read about <a href='/Tutorial'>contributing your data</a>.\n                                        </p>    \n                                    </div>\n                                </div> \n                            </div>    \n                        </div>  \n                    </div>  \n                </div>\n            </div>\n            <DatasetDialog visible={datasetVisible} onHide={() => {hideDialog('dataset')}} dataset={formData.dataset} />\n            <RNADialog visible={rnaVisible} onHide={() => {hideDialog('rna')}} rna={{tool: formData.rnaTool, ref: formData.rnaRef}} />\n            <DNADialog visible={dnaVisible} onHide={() => {hideDialog('dna')}} dna={{tool: formData.dnaTool, ref: formData.dnaRef}} />\n            }\n            \n        </React.Fragment>\n    );\n    \n}\n\nexport default OrcestraMain;","import React from 'react';\nimport './PSetDropdown.css';\nimport {MultiSelect} from 'primereact/multiselect';\nimport {Dropdown} from 'primereact/dropdown';\n\n// props: id, className, isHidden, selectOne, parameterName, parameterOptions[], selecedParameter[], handleUpdateSelection()\n\nclass PSetDropdown extends React.Component {\n    \n    render(){\n        const dataTemplate =  (option) => {\n            return(\n                <div className=\"\">\n                    <span style={{fontSize:'1em',margin:'1em .5em 0 0'}}>{option.label}</span>\n                </div>\n            );\n        }\n\n        const selectedDataTemplate = (item) => {\n            if (item) {\n                return (\n                    <div className=\"my-multiselected-item-token\">\n                        <span>{item.label}</span>\n                    </div>\n                );\n            }\n            else {\n                return <span>Select...</span>\n            }\n        }\n            \n        if(this.props.isHidden){\n            return(null);\n        }\n        if(this.props.selectOne){\n            return(\n                <div className='filterSet'>\n                    <label>{this.props.parameterName}</label>\n                    <Dropdown \n                        id={this.props.id} \n                        className='paramInput' \n                        optionLabel='label' \n                        value={this.props.selectedParameter}   \n                        options={this.props.parameterOptions} \n                        onChange={this.props.handleUpdateSelection}\n                        filter={true} \n                        itemTemplate={dataTemplate}\n                        placeholder=\"Select one...\"\n                        disabled={this.props.disabled}\n                    />\n                </div>\n            );\n        }\n        return(\n            <div className='filterSet'>\n                <label>{this.props.parameterName}</label>\n                <MultiSelect \n                    id={this.props.id}\n                    className='paramInput' \n                    optionLabel='label' \n                    value={this.props.selectedParameter} \n                    options={this.props.parameterOptions} \n                    onChange={this.props.handleUpdateSelection}\n                    filter={true} \n                    itemTemplate={dataTemplate} \n                    selectedItemTemplate={selectedDataTemplate}\n                    disabled={this.props.disabled}\n                />\n            </div>\n        );\n    }\n    \n}\n\nexport default PSetDropdown;","import React, {useState, useEffect, useContext} from 'react';\nimport {InputSwitch} from 'primereact/inputswitch';\nimport PSetDropdown from '../../Shared/PSetDropdown/PSetDropdown';\nimport {SearchReqContext} from '../PSetSearch';\nimport './PSetFilter.css';\n\nlet formDataInit = {};\nlet formData = {};\nlet rnaRefOptions = [];\nlet dnaRefOptions = [];\n\nasync function fetchData(url) {\n    const response = await fetch(url);\n    const json = await response.json();\n    return(json);\n}\n\nconst PSetFilter = () => {\n    \n    const context = useContext(SearchReqContext);\n\n    const [dataType, setDataType] = useState([]);\n    const [dataset, setDataset] = useState([]);\n    const [drugSensitivity, setDrugSensitivity] = useState([]);\n    const [genome, setGenome] = useState([]);\n    const [rnaTool, setRNATool] = useState([]);\n    const [rnaRef, setRNARef] = useState([]);\n    const [dnaTool, setDNATool] = useState([]);\n    const [dnaRef, setDNARef] = useState([]);\n\n    const [drugSensitivityOptions, setDrugSensitivityOptions] = useState([]);\n    const [hideRNAToolRef, setHideRNAToolRef] = useState(false);\n    const [hideDNAToolRef, setHideDNAToolRef] = useState(false);\n\n    const getParameters = () => {\n        let parameters = {\n            dataType, \n            dataset, \n            drugSensitivity, \n            genome, \n            rnaTool, \n            rnaRef, \n            dnaTool, \n            dnaRef\n        };\n        return parameters;\n    }\n    \n    useEffect(() => {\n        const initialize = async () => {\n            const formDataset = await fetchData('/formData');\n            formDataInit = formDataset[0];\n            formData = formDataset[0];\n            rnaRefOptions = formData.rnaRef;\n            dnaRefOptions = formData.dnaRef;\n        }\n        initialize();\n    }, []);\n    \n    useEffect(() => {\n        if(dataType.length === 1){\n            if(dataType[0].name === 'RNA'){             \n                setHideDNAToolRef(true);\n                setDNATool([]);\n                setDNARef([]);\n            }else{\n                setHideRNAToolRef(true);\n                setRNATool([]);\n                setRNARef([]);\n            }\n        }else{\n            setHideRNAToolRef(false);\n            setHideDNAToolRef(false);\n        }\n        const parameters = getParameters();\n        context.setParameters(parameters);\n    }, [dataType]);\n\n    useEffect(() => {\n        if(genome.length === 0){\n            dnaRefOptions = formData.dnaRef;\n            rnaRefOptions = formData.rnaRef;\n        }else{\n            let dnaRefs = dnaRef;\n            let rnaRefs = rnaRef;\n            \n            if(Array.isArray(genome)){\n                let genomeName = genome.map((genome) => {return(genome.name)});\n                dnaRefs = dnaRef.filter((ref) => {return(genomeName.includes(ref.genome) && ref)});\n                rnaRefs = rnaRef.filter((ref) => {return(genomeName.includes(ref.genome) && ref)});\n                dnaRefOptions = formData.dnaRef.filter((ref) => {return(genomeName.includes(ref.genome) && ref)});\n                rnaRefOptions = formData.rnaRef.filter((ref) => {return(genomeName.includes(ref.genome) && ref)});\n            }else{\n                dnaRefs = dnaRef.filter((ref) => {return(genome.name === ref.genome && ref)});\n                rnaRefs = rnaRef.filter((ref) => {return(genome.name === ref.genome && ref)});\n                dnaRefOptions = formData.dnaRef.filter((ref) => {return(genome.name === ref.genome && ref)});\n                rnaRefOptions = formData.rnaRef.filter((ref) => {return(genome.name === ref.genome && ref)});\n            }\n            \n            setDNARef(dnaRefs);\n            setRNARef(rnaRefs);\n        }  \n        const parameters = getParameters();\n        context.setParameters(parameters);\n    }, [genome])\n\n    useEffect(() => {\n        const parameters = getParameters();\n        context.setParameters(parameters);\n    }, [dataset, rnaTool, rnaRef, dnaTool, dnaRef]);\n\n    const setRequestView = (isRequest) => {\n        let fData = JSON.parse(JSON.stringify(formData));\n        if(isRequest){\n            if(dataset.length){\n                fData.dataset = dataset;\n                setDataset(dataset[0]);\n            }\n            if(genome.length){\n                fData.genome = genome;\n                setGenome(genome[0]);\n            }\n        }else{\n            if(fData.dataset.length < formDataInit.dataset.length){\n                setDataset(fData.dataset);\n            }else if(!Array.isArray(dataset)){\n                let val  = dataset;\n                setDataset([val]);\n            }\n            if(fData.genome.length < formDataInit.genome.length){\n                setGenome(fData.genome);\n            }else if(!Array.isArray(genome)){\n                let val = genome;\n                setGenome([val]);\n            }\n            fData = formDataInit;\n        }\n        formData = fData;\n        context.setParameters(getParameters());\n        context.setIsRequest(isRequest);\n    }\n    \n    return(\n        <React.Fragment>\n            <div className='pSetFilterContainer'>\n                <div className='pSetFilter'>\n                    <h2>PSet Parameters</h2>\n                    <div className='filterSet'>\n                        <label className='bold'>Request PSet: </label> \n                        <InputSwitch checked={context.isRequest} tooltip=\"Turn this on to request a PSet.\" \n                            onChange={(e) => setRequestView(e.value)} />\n                    </div>\n                    <PSetDropdown id='dataType' isHidden={false} parameterName='Data Type:' \n                        parameterOptions={formData.dataType} selectedParameter={context.parameters.dataType} \n                        handleUpdateSelection={(e) => setDataType(e.value)} />\n\n                    <PSetDropdown id='dataset' isHidden={false} parameterName='Dataset:' selectOne={context.isRequest} \n                        parameterOptions={formData.dataset} selectedParameter={context.parameters.dataset} \n                        handleUpdateSelection={(e) => setDataset(e.value)} />\n                    \n                    {/* <PSetDropdown id='drugSensitivity' className={this.props.dropdownClassName} isHidden={false} parameterName='Drug Sensitivity:' selectOne={true} disabled={true} \n                        parameterOptions={this.state.drugSensitivityOptions} selectedParameter={this.props.parameters.drugSensitivity} handleUpdateSelection={this.handleFilterChange} /> */}\n                    \n                    <PSetDropdown id='genome' isHidden={false} parameterName='Genome:' selectOne={context.isRequest} \n                        parameterOptions={formData.genome} selectedParameter={context.parameters.genome} \n                        handleUpdateSelection={(e) => setGenome(e.value)} />\n                    \n                    <PSetDropdown id='rnaTool' isHidden={hideRNAToolRef} parameterName='RNA Tool:' \n                        parameterOptions={formData.rnaTool} selectedParameter={context.parameters.rnaTool} \n                        handleUpdateSelection={(e) => setRNATool(e.value)} />\n\n                    <PSetDropdown id='rnaRef' isHidden={hideRNAToolRef} parameterName='RNA Ref:' \n                        parameterOptions={rnaRefOptions} selectedParameter={context.parameters.rnaRef} \n                        handleUpdateSelection={(e) => setRNARef(e.value)} />\n                    \n                    <PSetDropdown id='dnaTool' isHidden={hideDNAToolRef} parameterName='DNA Tool:' \n                        parameterOptions={formData.dnaTool} selectedParameter={context.parameters.dnaTool} \n                        handleUpdateSelection={(e) => setDNATool(e.value)} />\n                    \n                    <PSetDropdown id='dnaRef' isHidden={hideDNAToolRef} parameterName='DNA Ref:' \n                        parameterOptions={dnaRefOptions} selectedParameter={context.parameters.dnaRef} \n                        handleUpdateSelection={(e) => setDNARef(e.value)} />\n                </div>\n            </div>\n        </React.Fragment>\n    );\n}\n\nexport default PSetFilter;","\nexport function queryPSet(api, callback){\n    //console.log(api);\n    fetch(api)  \n        .then(res => res.json())\n        .then(resData => {\n            callback(resData);\n        }   \n    );\n}\n\nexport function saveOrUpdateUserPSets(username, selectedPSets, callback){\n    if(selectedPSets.length){\n        var userPSet = { username: username };\n        var psetId = [];\n        for(let i = 0; i < selectedPSets.length; i++){\n            psetId.push(selectedPSets[i]._id);\n        }\n        userPSet.psetId = psetId;\n\n        fetch('/user/pset/add', {\n            method: 'POST',\n            body: JSON.stringify({reqData: userPSet}),\n            headers: {\n                'Content-type': 'application/json'\n            }\n        })\n            .then(res => res.json())\n            .then(resData => callback(1, resData))\n            .catch(err => callback(0, err));\n\n    }\n}\n\nexport function requestPSet(data, callback){\n    console.log(data);\n    fetch('/pset/request', {\n        method: 'POST',\n        body: JSON.stringify({\n            reqData: data\n        }),\n        headers: {\n            'Content-type': 'application/json'\n        }\n    })\n        .then(res => res.json())\n        .then(resData => callback(1, resData))\n        .catch(err => callback(0, err));\n}\n\nexport function downloadPSets(psets, callback){\n    var psetIDs = [];\n    console.log(psets);\n    for(let i = 0; i < psets.length; i++){\n        psetIDs.push(psets[i]._id);\n    }\n    console.log(psetIDs);\n    fetch('/pset/download', {\n        method: 'POST',\n        body: JSON.stringify({\n            psetIDs: psetIDs\n        }),\n        headers: {\n            'Content-type': 'application/json'\n        }\n    })\n        .then(res => res.json())\n        .then(resData => {\n            callback(1, resData);\n        })\n        .catch(err => callback(0, err));\n}\n\nexport function downloadOnePSet(psetID){\n    console.log('downloadOnePSet: ' + psetID);\n    var psetIDs = [psetID];\n    fetch('/pset/download', {\n        method: 'POST',\n        body: JSON.stringify({\n            psetIDs: psetIDs\n        }),\n        headers: {\n            'Content-type': 'application/json'\n        }\n    })\n        .then(res => res.json())\n        .catch(err => console.log(err));\n}","import React, {useState, useEffect, useContext} from 'react';\nimport {DataTable} from 'primereact/datatable';\nimport {Column} from 'primereact/column';\nimport { Link } from 'react-router-dom';\nimport * as API from '../Shared/APICalls';\nimport {AuthContext} from '../../context/auth';\n\nconst PSetTable = (props) => {\n\n    const auth = useContext(AuthContext);\n    \n    const [state, setState] = useState({\n        rows: 10,\n        first: 0,\n        start: 0,\n        end: 10,\n        totalRecords: 0,\n        loading: true\n    })\n\n    useEffect(()=>{\n        setState({...state, loading: false})\n    }, []);\n\n    const downloadOnePSet = (id, link) => (event) => {\n        event.preventDefault();\n        console.log('downloadOnePSet');\n        API.downloadOnePSet(id);\n        const anchor = document.createElement('a');\n        anchor.setAttribute('download', null);\n        anchor.style.display = 'none';\n        anchor.setAttribute('href', link);\n        document.body.appendChild(anchor);\n        anchor.click();\n        document.body.removeChild(anchor);\n    }\n\n    const toolsRefTemplate = (rowData, column) => {\n        let output ='';\n        if(rowData[column.field]){\n            output = rowData[column.field].map(item => <div key={item.name}>{item.name}</div>);\n        }\n        return(\n            <div>{output}</div>\n        );\n    }\n\n    const nameColumnTemplate = (rowData, column) => {\n        let route = '/' + rowData.doi;\n        return(\n            <Link to={route} >{rowData.name}</Link>\n        );\n    }\n\n    const downloadTemplate = (rowData, column) => {\n        let link = 'Not Available';\n        if(rowData.downloadLink){\n            link = <a id={rowData._id} href='#' onClick={downloadOnePSet(rowData._id, rowData.downloadLink)}>Download</a>\n        }\n        return(\n            link\n        )\n    }\n\n    const updatePSetSelectionEvent = event => {\n        props.updatePSetSelection(event.value);\n    }\n\n    return(\n        <DataTable \n            value={props.allData} \n            selection={props.selectedPSets} onSelectionChange={updatePSetSelectionEvent} \n            paginator={true} rows={state.rows} \n            scrollable={true}\n        >\n            {auth.authenticated && <Column selectionMode=\"multiple\" style={{width: '2.5em'}} />}\n            <Column className='textField' field='name' header='Name' style={{width:'10em'}} body={nameColumnTemplate} sortable={true} />\n            <Column className='textField' field='dataset.name' header='Dataset' style={{width:'6.5em'}} sortable={true} />\n            <Column className='textField' field='drugSensitivity.version' header='Drug Sensitivity' style={{width:'10.5em'}} sortable={true} />\n            <Column field='rnaTool' body={toolsRefTemplate} style={{width:'8em'}} header='RNA Tool' sortable={true}  />\n            <Column field='dnaTool' body={toolsRefTemplate} style={{width:'8em'}} header='DNA Tool' sortable={true} />\n            <Column field='rnaRef' body={toolsRefTemplate} style={{width:'15em'}} header='RNA Ref' sortable={true} />\n            <Column field='dnaRef' body={toolsRefTemplate} style={{width:'15em'}} header='DNA Ref' sortable={true} />\n            <Column field='downloadLink' body={downloadTemplate} style={{width:'6.5em'}} header='Download' />\n        </DataTable>\n    );\n\n}\n\nexport default PSetTable;","import React from 'react';\nimport {Button} from 'primereact/button';\nimport {AuthContext} from '../../../context/auth';\nimport * as APICalls from '../APICalls';\n\nclass SavePSetButton extends React.Component{\n    constructor(){\n        super();\n        this.saveSelectedPSets = this.saveSelectedPSets.bind(this);\n    }\n\n    static contextType = AuthContext;\n\n    saveSelectedPSets = event => {\n        event.preventDefault();\n        if(this.context.authenticated){\n            APICalls.saveOrUpdateUserPSets(this.context.username, this.props.selectedPSets, (status, data) => {this.props.onSaveComplete(status, data)});\n        }\n    }\n\n    render(){\n        return(\n            this.context.authenticated ? <Button label='Save' onClick={this.saveSelectedPSets} disabled={this.props.disabled}/> : '*Login or register to save existing PSets to your profile.'\n        );\n    }\n}\n\nexport default SavePSetButton;\n","// Helper functions used for PSet API requests.\n\nexport function getFilterSet(data){\n    var filterset = {}\n    filterset.datatype = toFilterArray(data.dataType);\n    filterset.datasetName = toFilterArray(data.dataset);\n    filterset.datasetVersion = toFilterArray(data.dataset, true);\n    filterset.genome = toFilterArray(data.genome);\n    filterset.rnaTool = toFilterArray(data.rnaTool);\n    filterset.dnaTool = toFilterArray(data.dnaTool);\n    filterset.rnaRef = toFilterArray(data.rnaRef);\n    filterset.dnaRef = toFilterArray(data.dnaRef);\n    filterset.drugSensitivity = toFilterArray(data.drugSensitivity, true);\n    return(filterset);\n}\n\nexport function buildAPIStr(filterSet){\n    let apiStr = '/pset?status=complete&';\n    let apiFragments = [];\n    apiFragments.push(buildAPIStrFragment('dtp', filterSet.datatype));\n    apiFragments.push(buildAPIStrFragment('dsv', filterSet.datasetVersion));\n    apiFragments.push(buildAPIStrFragment('dsn', filterSet.datasetName));\n    apiFragments.push(buildAPIStrFragment('gnm', filterSet.genome));\n    apiFragments.push(buildAPIStrFragment('rnat', filterSet.rnaTool));\n    apiFragments.push(buildAPIStrFragment('dnat', filterSet.dnaTool));\n    apiFragments.push(buildAPIStrFragment('rnar', filterSet.rnaRef));\n    apiFragments.push(buildAPIStrFragment('dnar', filterSet.dnaRef));\n    apiFragments.push(buildAPIStrFragment('dst', filterSet.drugSensitivity));\n    for(let i = 0; i < apiFragments.length; i++){\n        if(apiFragments[i].length > 0){\n            apiStr += apiFragments[i] + '&';\n        }\n    }\n    apiStr = apiStr.replace(/&$/, '');\n    return(apiStr);\n}\n\nexport function isNoneSelected(filterset){\n    if(!filterset.datatype.length && \n        !filterset.datasetName.length && \n        !filterset.genome.length && \n        !filterset.rnaTool.length &&\n        !filterset.dnaTool.length &&\n        !filterset.rnaRef.length &&\n        !filterset.dnaRef.length &&\n        !filterset.drugSensitivity.length){\n        return(true);\n    }\n    return(false);\n}\n\nexport function isNotReadyToSubmit(request){\n    if(!isSelected(request.dataType)){\n        return(true);\n    }else if(request.dataType.length === 1){\n        if(request.dataType[0] === 'RNA' && (!isSelected(request.rnaRef) || !isSelected(request.rnaTool))){\n            return(true);\n        }else if(request.dataType[0] === 'DNA' && (!isSelected(request.dnaRef) || !isSelected(request.dnaTool))){\n            return(true);\n        }\n    }else{\n        if(!isSelected(request.rnaRef)){\n            return(true);\n        }\n        if(!isSelected(request.dnaRef)){\n            return(true);\n        }\n        if(!isSelected(request.rnaTool)){\n            return(true);\n        }\n        if(!isSelected(request.dnaTool)){\n            return(true);\n        }\n    }\n\n    if(!isSelected(request.genome)){\n        return(true);\n    } \n    if(!isSelected(request.dataset)){\n        return(true);\n    }\n    // if(!isSelected(request.drugSensitivity)){\n    //     return(true);\n    // }\n    if(!hasName(request.name)){\n        return(true);\n    }\n    if(!isValidEmail(request.email)){\n        return(true);\n    }\n    return(false);\n}\n\nexport function isSelected(reqParam){\n    if(typeof reqParam === 'undefined' || reqParam === null){\n        return(false);\n    }\n    if(Array.isArray(reqParam) && !reqParam.length){\n        return(false);\n    }\n    return(true);\n}\n\nexport function messageAfterRequest(status, data, initialize=null, msgComponent){\n    if(initialize){\n        initialize();\n    }\n    if(status){\n        msgComponent.show({severity: 'success', summary: data.summary, detail: data.message, sticky: true});\n    }else{\n        msgComponent.show({severity: 'error', summary: 'An error occured', detail: data.toString(), sticky: true});\n    } \n}\n\nfunction hasName(name){\n    if(typeof name === 'undefined' || name === null){\n        return(false);\n    }\n    if(name.length === 0){\n        return(false);\n    }\n    return(true);\n}\n\nfunction isValidEmail(email){\n    const regex = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/;\n    if(typeof email === 'undefined' || email === null){\n        return(false);\n    }\n    if(email.length === 0){\n        return(false);\n    }\n    if(!regex.test(email)){\n        return(false);\n    }\n    return(true);\n}\n\nfunction toFilterArray(selectedValues, isDatasetVersion = false){\n    var filterArray = [];\n    if(typeof selectedValues === 'undefined' || selectedValues === null){\n        return(filterArray);\n    }\n    if(Object.keys(selectedValues).length === 0 && selectedValues.constructor === Object){\n        return(filterArray);\n    }\n    if(Array.isArray(selectedValues)){\n        if(isDatasetVersion){\n            for(let i = 0; i < selectedValues.length; i++){   \n                filterArray.push(selectedValues[i].version);\n            }\n        }else{\n            for(let i = 0; i < selectedValues.length; i++){   \n                filterArray.push(selectedValues[i].name);\n            }\n        }\n        return(filterArray);\n    } \n    if(isDatasetVersion){\n        filterArray.push(selectedValues.version);\n    }else{\n        filterArray.push(selectedValues.name);\n    }\n    return(filterArray);\n}\n\nfunction buildAPIStrFragment(keyName, filterArray){\n    var apiFragment = '';\n    if(filterArray.length > 0){\n        for(let i = 0; i < filterArray.length; i++){\n            apiFragment += keyName + '=' + filterArray[i]\n            if(i < filterArray.length - 1){\n                apiFragment += '&';\n            }\n        }\n    }   \n    return(apiFragment);\n}\n","import React, {useState, useEffect} from 'react';\nimport './PSetSearch.css';\nimport PSetFilter from './subcomponents/PSetFilter';\nimport PSetTable from '../Shared/PSetTable';\nimport SavePSetButton from '../Shared/Buttons/SavePSetButton';\nimport {usePromiseTracker} from \"react-promise-tracker\";\nimport {trackPromise} from 'react-promise-tracker';\nimport Loader from 'react-loader-spinner';\nimport {Button} from 'primereact/button';\nimport {InputText} from 'primereact/inputtext';\nimport {Messages} from 'primereact/messages';\nimport * as APIHelper from '../Shared/PSetAPIHelper';\n\nexport const SearchReqContext = React.createContext();\n\nasync function fetchData(url) {\n    const response = await fetch(url);\n    const json = await response.json();\n    return(json);\n}\n\nconst PSetSearch = (props) => {\n    const [allData, setAllData] = useState([]);\n    const [searchAll, setSearchAll] = useState(true);\n    const [selectedPSets, setSelectedPSets] = useState([]);\n    const [disableSaveBtn, setDisableSaveBtn] = useState(true);\n    const [isRequest, setIsRequest] = useState(false);\n    const [notReadyToSubmit, setNotReadyToSubmit] = useState(true);\n    const [parameters, setParameters] = useState({});\n    \n    const [name, setName] = useState('');\n    const [email, setEmail] = useState('');\n\n    useEffect(() => {\n        const initializeView = async () => {\n            const psets = fetchData('/pset?status=complete');\n            setAllData(psets);\n            setSearchAll(true);\n        }\n        initializeView();\n    }, []);\n\n    useEffect(() => {\n        setDisableSaveBtn(APIHelper.isSelected(selectedPSets) ? false : true)\n    }, [selectedPSets]);\n\n    useEffect(() => {\n        async function update() {\n            let filterset = APIHelper.getFilterSet(parameters);\n            let apiStr = APIHelper.buildAPIStr(filterset);\n            console.log(apiStr);\n            let searchAll = apiStr === '/pset' ||  apiStr === '/pset?status=complete' ? true : false;\n            const psets = await fetchData(apiStr);\n            setAllData(psets);\n            setSearchAll(searchAll);\n        }\n        update();\n        let params = parameters;\n        params.name = name;\n        params.email = email;\n        setNotReadyToSubmit(APIHelper.isNotReadyToSubmit(params));\n    }, [parameters])\n\n    const updatePSets = async () => {\n        let filterset = APIHelper.getFilterSet(parameters);\n        let apiStr = APIHelper.buildAPIStr(filterset);\n        console.log(apiStr);\n        let searchAll = apiStr === '/pset' ||  apiStr === '/pset?' ? true : false;\n        const psets = await fetchData(apiStr);\n        setAllData(psets);\n        setSearchAll(searchAll);\n    }\n\n    const showMessage = (status, data) => {\n        let severity = status ? 'success' : 'error';\n        PSetSearch.messages.show({severity: severity, summary: data.summary, detail: data.message, sticky: true});\n        initializeState();\n    }\n\n    const updatePSetSelection = (selected) => {\n        setSelectedPSets(selected);\n    }\n\n    const initializeState = () => {\n        setSelectedPSets([]);\n        setDisableSaveBtn(true);\n    }\n\n    const handleSubmitRequest = async event => {\n        event.preventDefault();\n        let reqData = parameters;\n        reqData.drugSensitivity = reqData.dataset.drugSensitivity;\n        reqData.name = name;\n        reqData.email = email;\n        console.log(reqData);\n        const res = await trackPromise(fetch('/pset/request', {\n                method: 'POST',\n                body: JSON.stringify({reqData: reqData}),\n                headers: {'Content-type': 'application/json'}\n            }));\n        const resData = await res.json();\n        showMessage(res.ok, resData);\n        initializeState();\n    }\n\n    useEffect(() => {\n        let params = parameters;\n        params.name = name;\n        params.email = email;\n        setNotReadyToSubmit(APIHelper.isNotReadyToSubmit(params));\n    }, [name, email])\n    \n    const SubmitRequestButton = () => {\n        const {promiseInProgress} = usePromiseTracker();\n        return(\n            promiseInProgress ? \n                <div className='loaderContainer'>\n                    <Loader type=\"ThreeDots\" color=\"#3D405A\" height={100} width={100} />\n                </div>\n                :\n                <Button label='Submit Request' type='submit' disabled={notReadyToSubmit} onClick={handleSubmitRequest}/>\n        );\n    }\n        \n    return(\n        <SearchReqContext.Provider value={{ \n                parameters: parameters, \n                setParameters: setParameters, \n                updatePSets: updatePSets, \n                isRequest: isRequest, \n                setIsRequest: setIsRequest\n            }}\n        >\n            <div className='pageContent'>\n                <h1>Search or Request Pharmacogenomic Datasets</h1>\n                <div className='pSetListContainer'>\n                    <PSetFilter /> \n                    <div className='pSetTable'>\n                        <Messages ref={(el) => PSetSearch.messages = el} />\n                        <div className='pSetSelectionSummary'>\n                            <div className='summaryPanel'>\n                                <h2>Summary</h2>\n                                <div className='pSetSummaryContainer'>\n                                    <div className='pSetSummaryItem'>\n                                        {\n                                            searchAll ? \n                                            <span><span className='pSetSummaryNum'>{allData.length ? allData.length : 0}</span> <span>dataset(s) available.</span></span>\n                                            :\n                                            <span><span className='pSetSummaryNum'>{allData.length}</span> <span>{allData.length === 1 ? ' match' : ' matches'}</span> found.</span>\n                                        }\n                                    </div>\n                                </div>\n                                <SavePSetButton selectedPSets={selectedPSets} disabled={disableSaveBtn} onSaveComplete={showMessage} />\n                            </div>\n                            {\n                                isRequest &&\n                                <div className='requestFormPanel'>\n                                    <h2>Request PSet</h2>\n                                    <div className='reqFormInput'>\n                                        <label>PSet Name:</label>\n                                            <InputText id='name' className='paramInput' value={name || ''} onChange={(e) => {setName(e.target.value)}} />\n                                    </div>\n                                    <div className='reqFormInput'>\n                                        <label>Email to receive DOI:</label>\n                                            <InputText id='email' className='paramInput' value={email || ''} onChange={(e) => {setEmail(e.target.value)}} />\n                                    </div>\n                                    <div className='reqFormInput'>\n                                        <SubmitRequestButton />\n                                    </div>\n                                </div>\n                            }\n                        </div>\n                        {\n                            allData.length ?\n                            <PSetTable allData={allData} selectedPSets={selectedPSets} updatePSetSelection={updatePSetSelection} scrollHeight='600px'/> \n                            :\n                            <div className='tableLoaderContainer'>\n                                <Loader type=\"ThreeDots\" color=\"#3D405A\" height={100} width={100} />\n                            </div>\n                        }  \n                    </div>\n                </div>\n            </div>\n        </SearchReqContext.Provider>\n    );\n}\n\nexport default PSetSearch;","import React, {useState, useEffect, useContext} from 'react';\nimport './Dashboard.css';\nimport {usePromiseTracker} from \"react-promise-tracker\";\nimport {trackPromise} from 'react-promise-tracker';\nimport Loader from 'react-loader-spinner';\nimport {Messages} from 'primereact/messages';\nimport {DataTable} from 'primereact/datatable';\nimport {Column} from 'primereact/column';\nimport {AuthContext} from '../../context/auth';\n\nconst Dashboard = (props) => {\n    \n    const auth = useContext(AuthContext);\n    const [data, setData] = useState([]);\n    const [loading, setLoading] = useState(true);\n\n    const { promiseInProgress } = usePromiseTracker();\n\n    const show = (message) => {\n        Dashboard.messages.show(message);\n    }\n\n    const fetchData = async (url) => {\n        const response = await fetch(url);\n        const json = await response.json();\n        setData(json);\n        setLoading(false);\n    }\n\n    const submitRequest = async (id) => {\n        const result = await trackPromise(fetch(\n            '/pset/process', \n            { \n                method: 'POST', \n                body: JSON.stringify({id: id}), \n                headers: {'Content-type': 'application/json'} \n            }\n        ));\n        const json = await result.json();\n        return({ok: result.ok, data: json});\n    }\n\n    useEffect(() => {\n        fetchData('/pset?status=pending&status=in-process');\n    }, []);\n    \n    const onSubmit = async (event) => {\n        event.preventDefault();\n        console.log(event.target.id);\n        const result = await submitRequest(event.target.id);\n        if(result.ok){\n            show({severity: 'success', summary: result.data.summary, detail: result.data.message, sticky: true});\n        }else{\n            show({severity: 'error', summary: result.data.summary, detail: result.data.message, sticky: true});\n        }\n        await fetchData('/pset?status=pending&status=in-process');\n    }\n\n    const dateTimeTemplate = (rowData, column) => {\n        let dateTimeStr = '';\n        if(rowData[column.field]){\n            dateTimeStr = new Date(rowData[column.field]).toLocaleString(undefined, {dateStyle: 'long', timeStyle: 'medium'});\n        }\n        return(<div>{dateTimeStr}</div>)\n    }\n\n    const buttonTemplate = (rowData, column) => {\n        let button = '';\n        if(rowData.status === 'pending'){\n            button = <button id={rowData._id} onClick={onSubmit} className='dashboardBtn' type='button'>Submit</button>\n        }\n        return(<div className='dashBoardBtnContainer'>{button}</div>)\n    }\n\n    return(\n        <div className='pageContent'>\n            <div className='dashboardWrapper'>\n                <h1>PSet Request Status Board</h1>\n                <Messages ref={(el) => Dashboard.messages = el }></Messages>\n                <div className='dashboardSummary'>\n                    <h2>Request Status Summary</h2>\n                    <div className='dashboardSummaryContainer'>\n                        <div className='dashboardSummarySection'>\n                            <span className='number'>{ data.filter(d => d.status === 'pending').length }</span> pending request(s).\n                        </div>\n                        <div className='dashboardSummarySection'>\n                            <span className='number'>{ data.filter(d => d.status === 'in-process').length }</span> request(s) in process.\n                        </div>    \n                    </div>    \n                </div>\n                <div className='dashboardTable'>\n                    {\n                        !loading ?\n                        [\n                            data.length > 0 ?\n                            <DataTable value={data} paginator={true}  scrollable={true} rows={10} >\n                                <Column className='textField' field='status' header='Status' style={{width:'2em'}} sortable={true} />\n                                <Column className='textField' field='name' header='Name' style={{width:'5em'}} sortable={true} />\n                                <Column className='textField' field='dateSubmitted' header='Submitted Date' body={dateTimeTemplate} style={{width:'4em'}} sortable={true} />\n                                <Column className='textField' field='dateProcessed' header='Process Start Date' body={dateTimeTemplate} style={{width:'4em'}} sortable={true} />\n                                { auth.isAdmin && <Column body={buttonTemplate} style={{width:'1.5em'}}/> }\n                            </DataTable>\n                            :\n                            <h3>There currently are no pending or in-process requests.</h3>\n                        ]\n                        :   \n                        <div className='dashboardTableLoaderContainer'>\n                            <Loader type=\"ThreeDots\" color=\"#3D405A\" height={100} width={100} />\n                        </div>\n                    } \n                    {\n                        promiseInProgress && \n                        <div className='dashboardTableOverlay'>\n                            <div className='dashboardLoaderContainer'>\n                                <Loader type=\"ThreeDots\" color=\"#3D405A\" height={100} width={100} />\n                            </div>\n                        </div>   \n                    }\n                </div> \n            </div>   \n        </div>  \n    );\n}\n\nexport default Dashboard;","import React from 'react';\n\nimport Plotly from \"plotly.js-basic-dist\";\nimport createPlotlyComponent from \"react-plotly.js/factory\";\nconst Plot = createPlotlyComponent(Plotly);\n\nclass DownloadChart extends React.Component{\n    render() {\n        let value = this.props.data.value;\n        let name = this.props.data.name;\n        \n        return (\n          <Plot\n            data={[\n                {\n                    type: 'bar', \n                    x: value, \n                    y: name, \n                    orientation: 'h', \n                    marker: {color: '#3D405A'}\n                },\n            ]}\n            layout={ {\n                autosize: true,\n                title: this.props.title, \n                xaxis: {\n                    title: {text: 'Number of Downloads', font: {size: 14, color: '#3D405A'}}\n                },\n                yaxis: {\n                    autorange: 'reversed',\n                }, \n                titlefont: {size: 18, color: '#3D405A'}, \n                font:{color: '#3D405A'}\n            } }\n            style = {{width: \"100%\"}}\n            useResizeHandler = {true}\n          />\n        );\n    }\n}\n\nexport default DownloadChart;","import React from 'react';\nimport './Stats.css';\nimport {Messages} from 'primereact/messages';\nimport PSetTable from '../Shared/PSetTable';\nimport SavePSetButton from '../Shared/Buttons/SavePSetButton';\nimport * as APICalls from '../Shared/APICalls';\nimport * as APIHelper from '../Shared/PSetAPIHelper';\nimport {AuthContext} from '../../context/auth';\nimport DownloadChart from './DownloadChart';\nimport Loader from 'react-loader-spinner';\n\nclass Stats extends React.Component{\n    constructor(){\n        super();\n        this.state = {\n            allData: [],\n            chartData: {},\n            selectedPSets: [],\n            disableBtn: true,\n            isReady: false\n        }\n        this.updatePSetSelection = this.updatePSetSelection.bind(this);\n        this.showMessages = this.showMessages.bind(this);\n        this.initializeState = this.initializeState.bind(this);\n    }\n\n    static contextType = AuthContext;\n\n    componentDidMount(){\n        APICalls.queryPSet('/pset/sort', (resData) => {\n            const data = [];\n            const name = [];\n            const value = [];\n            for(let i = 0; i < resData.length; i++){\n                data.push({name: resData[i].name, value: resData[i].download});\n                name.push(resData[i].name);\n                value.push(resData[i].download);\n                if(i >= 9){\n                    break;\n                }\n            }\n            this.setState({\n                allData: resData,\n                chartData: {data: data, name: name, value: value},\n                isReady: true\n            });\n        });\n    }\n\n    updatePSetSelection(selected){\n        this.setState({selectedPSets: selected}, () => {\n            if(APIHelper.isSelected(this.state.selectedPSets)){\n                this.setState({disableBtn: false});\n            }else{\n                this.setState({disableBtn: true});\n            }\n        });\n    }\n\n    showMessages(status, data){\n        APIHelper.messageAfterRequest(status, data, this.initializeState, this.messages);\n        APICalls.queryPSet('/pset/sort', (resData) => {\n            this.setState({\n                allData: resData\n            });\n        });\n    }\n\n    initializeState(){\n        this.setState({\n            selectedPSets: [],\n            disableBtn: true\n        });\n    }\n    \n    render(){\n        return(\n            <div className='pageContent'>\n                <h1>PSet Usage and Downloads</h1>\n                <div className='statContainer'>\n                    {\n                        this.state.isReady ?\n                        <React.Fragment>\n                            <div className='container rankingTable'>\n                                <h3>Download Ranking</h3>\n                                <Messages ref={(el) => this.messages = el} />\n                                <PSetTable allData={this.state.allData} selectedPSets={this.state.selectedPSets} updatePSetSelection={this.updatePSetSelection} showDownload={true} scrollHeight='340px'/>\n                                <div className='rankingTableFooter'>\n                                    {/* <DownloadPSetButton selectedPSets={this.state.selectedPSets} disabled={this.state.disableBtn} onDownloadComplete={this.showMessages}/> */}\n                                    <SavePSetButton selectedPSets={this.state.selectedPSets} disabled={this.state.disableBtn} onSaveComplete={this.showMessages} />\n                                </div>\n                            </div>\n                            <div className='container downloadHistogram'>\n                                {this.state.isReady && <DownloadChart data={this.state.chartData} title='Top 10 Most Popular PSets' />}\n                            </div>\n                        </React.Fragment>\n                        :\n                        <div className='componentLoaderContainer'>\n                            <Loader type=\"ThreeDots\" color=\"#3D405A\" height={100} width={100} />\n                        </div>\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Stats;","import React from 'react';\n\nconst Overview = () => {\n    return(\n        <div className='documentation'>\n            <h1>Overview</h1>\n            <h3>Introduction</h3>\n            <p>\n                ORCESTRA is a new web application that enables users to search, request and manage pharmacogenomic datasets (PSets).\n                <br />\n                PSets are generated with an automated pipeline by using a verion controll platform called Pachyderm. Upon completion of the pipeline, a newly generated PSet is uploaded to Zenodo, a data-sharing platform, and is assigned a DOI.\n                <br />\n                With Pachyderm's strict version controlling system, coupled with the DOI assignment, ORCESTRA ensures that your experiements with PSets are transparent and easily reproducible.\n            </p>    \n        </div>    \n    );\n}\n\nexport default Overview","import React from 'react';\n\nconst Search = () => {\n    return(\n        <div className='documentation'>\n            <h1>Search</h1>\n        </div>    \n    );\n}\n\nexport default Search","import React from 'react';\n\nconst Request = () => {\n    return(\n        <div className='documentation'>\n            <h1>Request</h1>  \n        </div>    \n    );\n}\n\nexport default Request","import React from 'react';\n\nconst UserProfile = () => {\n    return(\n        <div className='documentation'>\n            <h1>User Profile</h1>\n        </div>    \n    );\n}\n\nexport default UserProfile","import React from 'react';\n\nconst Statistics = () => {\n    return(\n        <div className='documentation'>\n            <h1>Statistics</h1>\n        </div>    \n    );\n}\n\nexport default Statistics","import React, { useState } from 'react';\nimport './Documentation.css';\n\nimport Overview from './DocFunctionality/Overview';\nimport Search from './DocFunctionality/Search';\nimport Request from './DocFunctionality/Request';\nimport UserProfile from './DocFunctionality/UserProfile';\nimport Statistics from './DocFunctionality/Statistics';\n\nconst Documentation = (props) => {\n    \n    const [display, setDisplay] = useState('overview');\n\n    return(\n        <div className='pageContent'>\n            <div className='documentationContent'>\n                <nav className='documentationNav'>\n                    <h2>Functionality</h2>\n                    <ul>\n                        <li className={display === 'overview' ? 'selected' : undefined}>\n                            <button type='button' onClick={() => setDisplay('overview')}>Overview</button>\n                        </li>\n                        <li className={display === 'search' ? 'selected' : undefined}>\n                            <button type='button' onClick={() => setDisplay('search')}>Search</button>\n                        </li>    \n                        <li className={display === 'request' ? 'selected' : undefined}>\n                            <button type='button' onClick={() => setDisplay('request')}>Request</button>\n                        </li>\n                        <li className={display === 'userProfile' ? 'selected' : undefined}>\n                            <button type='button' onClick={() => setDisplay('userProfile')}>User Profile</button>\n                        </li>\n                        <li className={display === 'statistics' ? 'selected' : undefined}>\n                            <button type='button' onClick={() => setDisplay('statistics')}>Statistics</button>\n                        </li>\n                    </ul> \n                    <h2>API</h2>\n                    <ul>\n                        <li className={display === 'api-psets-available' ? 'selected' : undefined}>\n                            <button type='button' onClick={() => setDisplay('api-psets-available')}>Available PSets</button>\n                        </li>\n                        <li className={display === 'api-pset-single' ? 'selected' : undefined}>\n                            <button type='button' onClick={() => setDisplay('api-pset-single')} >PSet Metadata</button>\n                        </li>\n                        <li className={display === 'api-statistics' ? 'selected' : undefined}>\n                            <button type='button' onClick={() => setDisplay('api-statistics')}>Statistics</button>\n                        </li>    \n                    </ul>\n                </nav>\n                {display === 'overview' && <Overview /> }\n                {display === 'search' && <Search /> }\n                {display === 'request' && <Request /> }\n                {display === 'userProfile' && <UserProfile /> }\n                {display === 'statistics' && <Statistics /> }\n            </div>\n        </div>\n    );\n}\n\nexport default Documentation;","import React from 'react';\nimport Navigation from '../../Navigation/Navigation';\nimport Footer from '../../Footer/Footer';\n\nconst Tutorial = (props) => {\n    return(\n        <React.Fragment>\n            <Navigation routing={props} />\n            <div className='pageContent'>\n                <h1>Generating PSet with Your Data</h1>\n                  \n            </div>\n            <Footer />\n        </React.Fragment>\n    )\n}\n\nexport default Tutorial","import React from 'react';\nimport './UserInfo.css'\nimport {Button} from 'primereact/button';\nimport {AuthContext} from '../../../context/auth';\n\nclass UserInfo extends React.Component{\n    \n    constructor(){\n        super();\n        this.state = {\n            user: {}\n        }\n        this.showModal = this.showModal.bind(this);\n        this.hideModal = this.hideModal.bind(this);\n    }\n\n    static contextType = AuthContext;\n\n    componentDidMount(){\n        fetch('/user/?username=' + this.context.username)\n            .then(res => res.json())\n            .then(user => this.setState({user: user}));\n    }\n\n    showModal(){\n\n    }\n\n    hideModal(){\n\n    }\n    \n    render(){\n        return(\n            <div className='userInfoContainer'>\n                <h2>User Information</h2>\n                <div className='userInfo'>Username: {this.state.user.username}</div>\n                <div className='userInfoBtn'>\n                    <Button label='Change User Settings' onClick={this.showModal} />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default UserInfo;","import React from 'react';\nimport {Button} from 'primereact/button';\nimport * as APICalls from '../APICalls';\n\nclass DownloadPSetButton extends React.Component{\n    constructor(){\n        super();\n        this.downloadPSets = this.downloadPSets.bind(this);\n    }\n\n    downloadPSets = event => {\n        event.preventDefault();\n        const psets = this.props.selectedPSets;\n        \n        const link = document.createElement('a');\n        link.setAttribute('download', null);\n        link.style.display = 'none';\n        document.body.appendChild(link);\n        for(let i = 0; i < psets.length; i++){\n            if(psets[i].downloadLink){\n                link.setAttribute('href', psets[i].downloadLink)\n                link.click();\n            } \n        }\n        document.body.removeChild(link);\n\n        APICalls.downloadPSets(this.props.selectedPSets, (status, data) => {\n            //this.props.onDownloadComplete(status, data);\n        });\n    }\n\n    render(){\n        return(\n            <Button className='downloadBtn' label='Download' disabled={this.props.disabled} onClick={this.downloadPSets} />\n        );\n    }\n}\n\nexport default DownloadPSetButton;","import React from 'react';\nimport PSetTable from '../../Shared/PSetTable';\nimport {Button} from 'primereact/button';\nimport DownloadPSetButton from '../../Shared/Buttons/DownloadPSetButton';\nimport {Dialog} from 'primereact/dialog';\nimport * as APIHelper from '../../Shared/PSetAPIHelper';\nimport './UserPSet.css';\n\nclass UserPSet extends React.Component{\n    \n    constructor(){\n        super();\n        this.state = {\n            selectedPSets: [],\n            btnDisabled: true,\n            dialogVisible: false,\n            btnYesDislabed: false\n        }\n        this.handleBtnClick = this.handleBtnClick.bind(this);\n        this.handleSelectionChange = this.handleSelectionChange.bind(this);\n        this.onClickYes = this.onClickYes.bind(this);\n        this.onHide = this.onHide.bind(this);\n        this.showMessages = this.showMessages.bind(this);\n    }\n\n    handleSelectionChange(selected){\n        this.setState({selectedPSets: selected}, () => {\n            if(this.state.selectedPSets && this.state.selectedPSets.length > 0){\n                this.setState({btnDisabled: false});\n            }else{\n                this.setState({btnDisabled: true});\n            }\n        });\n    }\n\n    handleBtnClick = event => {\n        this.setState({dialogVisible: true});\n    }\n\n    showMessages(status, data){\n        APIHelper.messageAfterRequest(status, data, null, this.props.messages);\n    }\n\n    onClickYes(){\n        this.setState({\n            btnDisabled: true,\n            btnYesDislabed: true\n        });\n        this.props.handleBtnClick(this.state.selectedPSets, (err)=>{\n            if(!err){\n                this.setState({\n                    selectedPSets: [],\n                    dialogVisible: false,\n                });\n            }else{\n                this.setState({btnDisabled: false});\n            }   \n        });\n    }\n    \n    onHide(){\n        this.setState({\n            dialogVisible: false,\n            btnYesDislabed: false\n        });\n    }\n    \n    render(){\n\n        const psetData = (\n            <React.Fragment>\n                <div>\n                    <PSetTable allData={this.props.pset} selectedPSets={this.state.selectedPSets} updatePSetSelection={this.handleSelectionChange} scrollHeight='350px' pending={this.props.pending}/>\n                </div>\n                <div className='footer'>\n                { this.props.pending ? '' : \n                    <DownloadPSetButton selectedPSets={this.state.selectedPSets} disabled={this.state.btnDisabled} onDownloadComplete={this.showMessages}/>\n                } \n                <Button label={this.props.btnLabel} onClick={this.handleBtnClick} disabled={this.state.btnDisabled} />\n                </div>\n            </React.Fragment>\n        );\n\n        const noPSetData = (\n            <p>No data available.</p>\n        );\n\n        const dialogFooter = (\n            <div>\n                <Button label=\"Yes\" onClick={this.onClickYes} disabled={this.state.btnYesDislabed}/>\n                <Button label=\"Cancel\" onClick={this.onHide} />\n            </div>\n        );\n        \n        return(\n            <div className='userPSet'>\n                <h2>{this.props.heading}</h2>\n                <div className='userPSetContent'>\n                    {this.props.pset ? psetData : noPSetData}\n                </div>\n                <div>\n                    <Dialog header={this.props.pending? 'Canceling PSet Request(s)' : 'Removing Pset(s)' } footer={dialogFooter} visible={this.state.dialogVisible} style={{width: '300px'}} modal={true} onHide={this.onHide}>\n                        { this.props.pending ? 'Are you sure you would like to cancel the selected PSet request(s)?' : 'Are you sure you would like to remove the selected PSet(s) from the saved list?' }\n                    </Dialog>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default UserPSet;","import React from 'react';\nimport './Profile.css';\nimport UserInfo from './subcomponents/UserInfo';\nimport UserPSet from './subcomponents/UserPSet';\nimport {Messages} from 'primereact/messages';\nimport {AuthContext} from '../../context/auth';\nimport * as APIHelper from '../Shared/PSetAPIHelper';\n\nclass Profile extends React.Component{\n\n    constructor(){\n        super();\n        this.state = {\n            username: '',\n            userEmail: '',\n            psetSaved: [],\n            psetInProcess: []\n        }\n        this.removeFromSavedList = this.removeFromSavedList.bind(this);\n        this.cancelPSetRequest = this.cancelPSetRequest.bind(this);\n        this.findPSetByID = this.findPSetByID.bind(this);\n        this.removePSetByID = this.removePSetByID.bind(this);\n    }\n\n    static contextType = AuthContext;\n\n    componentDidMount(){\n        fetch('/user/pset/?username=' + this.context.username)  \n            .then(res => res.json())\n            .then(resData => {\n                let complete = [];\n                let pending = [];\n                for(let i = 0; i < resData.length; i++){\n                    if(resData[i].status === 'complete'){\n                        complete.push(resData[i]);\n                    }else{\n                        pending.push(resData[i]);\n                    }\n                }\n                this.setState({\n                    psetSaved: complete,\n                    psetInProcess: pending\n                });\n            });\n    }\n\n    removeFromSavedList = (selectedPSet, callback) => {\n        var psetID = []\n        for(let i = 0; i < selectedPSet.length; i++){\n            psetID.push(selectedPSet[i]._id);\n        }\n        fetch('/user/pset/remove', {\n            method: 'POST',\n            body: JSON.stringify({username: this.context.username, psetID: psetID}),\n            headers: {\n                'Content-type': 'application/json'\n            }\n        })\n            .then(res => res.json())\n            .then(resData => {\n                APIHelper.messageAfterRequest(1, resData, null, this.messages);\n                var saved = this.state.psetSaved;\n                saved = this.removePSetByID(saved, psetID);\n                this.setState({psetSaved: saved}, callback(0));\n            })\n            .catch(err => {\n                APIHelper.messageAfterRequest(0, err, null, this.messages);\n                callback(1);\n            });\n    }\n\n    cancelPSetRequest = (selectedPSet, callback) => {\n        var psetID = []\n        for(let i = 0; i < selectedPSet.length; i++){\n            psetID.push(selectedPSet[i]._id);\n        }\n        fetch('/pset/cancel', {\n            method: 'POST',\n            body: JSON.stringify({username: this.context.username, psetID: psetID}),\n            headers: {\n                'Content-type': 'application/json'\n            }\n        })\n            .then(res => res.json())\n            .then(resData => {\n                APIHelper.messageAfterRequest(1, resData, null, this.messages);\n                var inProcess = this.state.psetInProcess;\n                inProcess = this.removePSetByID(inProcess, psetID);\n                this.setState({psetInProcess: inProcess}, callback(0));\n            })\n            .catch(err => {\n                APIHelper.messageAfterRequest(0, err, null, this.messages);\n                callback(1);\n            });\n    }\n\n    findPSetByID(psetArray, id){\n        for(let i = 0; i < psetArray.length; i++){\n            if(psetArray[i]._id === id){\n                return(i)\n            }\n        }\n        return(-1);\n    }\n\n    removePSetByID(psets, selected){\n        for(let i = 0; i < selected.length; i++){\n            let index = this.findPSetByID(psets, selected[i]);\n            if(index > -1){\n                psets.splice(index, 1);\n            }\n        }\n        return(psets);\n    }\n\n    render(){   \n        return(\n            <div className='pageContent'>\n                <h1>Your Profile</h1>\n                <div className='userProfile'>\n                    <UserInfo />\n                    <div className='userPSetLists'>\n                        <Messages ref={(el) => this.messages = el} />\n                        <UserPSet heading='Your Saved PSets' btnLabel='Remove from List' \n                            pset={this.state.psetSaved} \n                            handleBtnClick={this.removeFromSavedList}\n                            messages={this.messages}\n                        />\n                        <UserPSet heading='Your PSet Requests in Process' btnLabel='Cancel Request' \n                            pset={this.state.psetInProcess} \n                            pending={true}\n                            handleBtnClick={this.cancelPSetRequest}\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Profile;","import React, {useState, useContext, useEffect} from 'react';\nimport {Button} from 'primereact/button';\nimport {InputText} from 'primereact/inputtext';\nimport {Messages} from 'primereact/messages';\nimport {AuthContext} from '../../context/auth';\n\nconst AuthForm = (props) => {\n    \n    const auth = useContext(AuthContext);\n    \n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [passwordReg1, setPasswordReg1] = useState('');\n    const [passwordReg2, setPasswordReg2] = useState('');\n    const [userChecked, setUserChecked] = useState(false);\n    const [userExists, setUserExists] = useState(false);\n    const [userRegistered, setUserRegistered] = useState(false);\n    const [btnFindDisabled, setBtnFindDisabled] = useState(true);\n    const [btnLoginDisabled, setBtnLoginDisabled] = useState(true);\n    const [btnRegDisabled, setBtnRegDisabled] = useState(true);\n\n    useEffect(() => {\n        const regex = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/;\n        regex.test(email) ? setBtnFindDisabled(false) : setBtnFindDisabled(true);\n    }, [email]);\n\n    useEffect(() => {\n        password.length >= 6 ? setBtnLoginDisabled(false) : setBtnLoginDisabled(true);\n    }, [password]);\n\n    useEffect(() => {\n        passwordReg1.length >= 6 ?  passwordReg1 === passwordReg2 && setBtnRegDisabled(false) : setBtnRegDisabled(true);\n    }, [passwordReg1, passwordReg2])\n\n    const handleInputChange = (event) => {\n        var name = event.target.name;\n        switch(name){\n            case 'email':\n                setEmail(event.target.value);\n                break;\n            case 'password':\n                setPassword(event.target.value);\n                break;\n            case 'passwordReg1':\n                setPasswordReg1(event.target.value);\n                break;\n            case 'passwordReg2':\n                setPasswordReg2(event.target.value);\n                break;\n            default:\n                break;\n        }\n    }\n\n    const initialize = () => {\n        setEmail('');\n        setPassword('');\n        setPasswordReg1('');\n        setPasswordReg2('');\n        setUserChecked(false);\n        setUserExists(false);\n        setUserRegistered(false);\n        setBtnFindDisabled(true);\n        setBtnLoginDisabled(true);\n        setBtnRegDisabled(true);\n    }\n\n    const onFindClick = async (event) => {\n        event.preventDefault();\n        const api = 'user/check/?username=' + email;\n        const res = await fetch(api);\n        const json = await res.json();\n        if(res.ok){\n            setUserChecked(true);\n            setUserExists(json.exists);\n            setUserRegistered(json.registered);\n        }\n    }\n\n    const onLoginClick = async (event) => {\n        event.preventDefault();\n        const res = await fetch('/user/login', {\n            method: 'POST',\n            body: JSON.stringify({\n                user: { username: email, password: password }   \n            }),\n            headers: { 'Content-type': 'application/json' }\n        })\n        const data = await res.json();\n        if(data.authenticated){\n            console.log('authenticated');\n            initialize();\n            auth.setAuthToken(data);\n        }else{\n            AuthForm.messages.show({severity: 'error', summary: 'Login Failed', detail: 'Please re-enter your email and password.'});\n        }\n    }\n\n    const onRegisterClick = async (event) => {\n        event.preventDefault();\n        const res = await fetch('/user/register', {\n            method: 'POST',\n            body: JSON.stringify({\n                user: { username: email, password: passwordReg1, exists: userExists }\n            }),\n            headers: { 'Content-type': 'application/json' }\n        })\n        const data = await res.json();\n        if(data.status){\n            initialize();\n            auth.setAuthToken({authenticated: data.authenticated, username: data.username});\n        }else{\n            AuthForm.messages.show({severity: 'error', summary: 'Registration Failed', detail: 'Please try again.'});\n        }\n    }\n\n    const loginForm = () => {\n        return(\n            <React.Fragment>\n                <h4>Login with your password:</h4>\n                <div className='pwdMsg'>Password needs to be at least 6 characters in length</div>\n                <InputText className='pwdInput' type='password' name='password' value={password} onChange={handleInputChange}/>\n                <div>\n                    <Button label='Login' onClick={onLoginClick} disabled={btnLoginDisabled}/>\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    const registerForm = () => {\n        return(\n            <React.Fragment>\n                <h4>{userExists ? 'Email is not registered. ': 'Email not found. '}Please register.</h4>\n                <div>\n                    <div className='pwdMsg'>Password needs to be at least 6 characters in length</div>\n                    <InputText className='pwdInput' type='password' name='passwordReg1' value={passwordReg1} onChange={handleInputChange}/>\n                </div>\n                <div>\n                    <label>Confirm your password:</label>\n                    <InputText className='pwdInput' type='password' name='passwordReg2' value={passwordReg2} onChange={handleInputChange}/>\n                </div>\n                <div>\n                    <Button label='Register' onClick={onRegisterClick} disabled={btnRegDisabled}/>\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    \n    return(\n        <React.Fragment>\n            <h2>Login/Register</h2>\n            <Messages ref={(el) => AuthForm.messages = el}></Messages>\n            <h4>Enter your email:</h4>\n            <div className='emailInput'>\n                <InputText type='email' name='email' value={email} onChange={handleInputChange}/>\n                <Button className='btnLoginFind' label='Find' icon=\"pi pi-arrow-right\" onClick={onFindClick} disabled={btnFindDisabled}/>\n            </div>\n            { userChecked ? <div className='formContainer'>{userRegistered ? loginForm() : registerForm()}</div> : '' }\n        </React.Fragment>\n    );\n}\n\nexport default AuthForm;","import React, {useContext} from 'react';\nimport { Redirect } from 'react-router-dom';\nimport AuthForm from './AuthForm';\nimport './Login.css';\nimport {AuthContext} from '../../context/auth';\nimport {withRouter} from 'react-router';\n\nconst Login = (props) => {\n    const auth = useContext(AuthContext);\n    const { location } = props\n    const msg = location.state.logoutMsg;\n\n    return(\n        <React.Fragment>\n            {auth.authenticated ? <Redirect to={location.state.path}/> : \n                <div className='pageContent'>\n                    <div className=\"loginRegContent\">\n                        <div className='logoutMsg'>{msg ? msg : ''}</div>\n                        <AuthForm />\n                    </div>   \n                </div>\n            }\n        </React.Fragment>\n    );\n}\n\nexport default withRouter(Login);","import React from 'react';\n\nclass DatasetTabContent extends React.Component{\n\n    render(){          \n        const publication = (\n            <div>    \n            {this.props.metadata.dataset.publication.length ? \n                this.props.metadata.dataset.publication.map((item) => \n                    <li key={item.link} className='pubList'>\n                        <div className='subContent'>{item.citation}</div>\n                        <br />\n                        <div className='subContent'><a href={item.link}>{item.link}</a></div>\n                    </li>\n                )\n                :\n                <div className=\"subContent\">\n                    Not available.\n                </div>\n                }  \n            </div> \n        );\n        \n        return(\n            <React.Fragment>\n                <h1 className='tabMainHeader'>Dataset: {this.props.metadata.dataset.label}</h1>\n                <div className='tabContent'>\n                    <div className='tabContentSection'>\n                        <h3>Publication: </h3>\n                        <ul>\n                            {publication}\n                        </ul> \n                    </div>\n                    <div className='tabContentSection'>\n                        <h3>Drug Sensitivity</h3>\n                        <h4 className='subContent'>Source: {this.props.metadata.drugSensitivity.source ? <a href={this.props.metadata.drugSensitivity.source}>{this.props.metadata.drugSensitivity.source}</a> : 'Not available'}</h4>\n                        <h4 className='subContent'>Version: {this.props.metadata.drugSensitivity.version}</h4>\n                    </div>\n                    <div className='tabContentSection'>\n                        <h3>Genome Version</h3>\n                        <div className='subContent'>{this.props.metadata.genome.name ? this.props.metadata.genome.name : \"Not Available\"}</div>\n                    </div>\n                </div> \n            </React.Fragment>\n        );\n    }\n}\n\nexport default DatasetTabContent;","import React from 'react';\nimport {PSetToolAccordion, RNARefAccordion} from '../PSetAccordion';\n\nclass RNATabContent extends React.Component{\n    \n    render(){   \n        const genomeRawData = (   \n            <div>\n                { this.props.metadata.rawSeqDataRNA ? <a href={this.props.metadata.rawSeqDataRNA}>{this.props.metadata.rawSeqDataRNA}</a> : 'Not Available' }\n            </div>\n        );\n\n        return(\n            <React.Fragment>\n                <h1 className='tabMainHeader'>Analysis Details - RNA Data</h1>\n                <div className='tabContent'>\n                    <div className='tabContentSection'>\n                        <h3>Raw Data Source: </h3>\n                        <div className='subContent'>\n                            {genomeRawData}\n                        </div>\n                    </div>\n                    <div className='tabContentSection'>\n                        <h3>RNA Transcriptome</h3>\n                        <RNARefAccordion items={this.props.metadata.rnaRef} />\n                    </div>\n                    <div className='tabContentSection'>\n                        <h3>Tools and Commands Used</h3>\n                        <PSetToolAccordion items={this.props.metadata.rnaTool} />\n                    </div>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default RNATabContent;","import React from 'react';\nimport {PSetToolAccordion, DNARefAccordion} from '../PSetAccordion';\n\nclass DNATabContent extends React.Component{\n    \n    render(){  \n        const genomeRawData = (\n            <div>\n                { this.props.metadata.rawSeqDataDNA ? <a href={this.props.metadata.rawSeqDataDNA}>{this.props.metadata.rawSeqDataDNA}</a> : 'Not Available' }\n            </div>\n        );\n\n        return(\n            <React.Fragment>\n                <h1 className='tabMainHeader'>Analysis Details - DNA(Exome) Data</h1>\n                <div className='tabContent'>\n                    <div className='tabContentSection'>\n                        <h3>Raw Data Source: </h3>\n                        <div className='subContent'>\n                            {genomeRawData}\n                        </div>\n                    </div>\n                    <div className='tabContentSection'>\n                        <h3>Exome Reference</h3>\n                        <DNARefAccordion items={this.props.metadata.dnaRef} />\n                    </div>\n                    <div className='tabContentSection'>\n                        <h3>Tools and Commands Used</h3>\n                        <PSetToolAccordion items={this.props.metadata.dnaTool} />\n                    </div>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default DNATabContent;","import React from 'react';\nimport './PSet.css';\nimport {TabView,TabPanel} from 'primereact/tabview';\nimport * as APICalls from '../Shared/APICalls';\nimport {GeneralInfoAccordion} from './PSetAccordion';\nimport DatasetTabContent from './TabContents/DatasetTabContent';\nimport RNATabContent from './TabContents/RNATabContent';\nimport DNATabContent from './TabContents/DNATabContent';\nimport * as APIHelper from '../Shared/PSetAPIHelper';\nimport DownloadPSetButton from '../Shared/Buttons/DownloadPSetButton';\nimport {Messages} from 'primereact/messages';\n\nclass PSet extends React.Component{\n    constructor(){\n        super();\n        this.state = {\n            pset: {},\n            general: {},\n            dataset: {},\n            rna: {},\n            dna: {},\n            isReady: false,\n            message: ''\n        }\n        this.showMessage = this.showMessage.bind(this);\n    }\n\n    componentDidMount(){\n        console.log(this.props.match.params.id1 + '/' + this.props.match.params.id2);\n        let apiStr = '/pset/one/' + this.props.match.params.id1 + '/' + this.props.match.params.id2;\n        console.log(apiStr);\n        APICalls.queryPSet(apiStr, (pset) => {\n            console.log(pset);\n            if(pset){\n                this.setState({\n                    pset: pset,\n                    general: {name: pset.name, createdBy: pset.createdBy, dateCreated: pset.dateCreated},\n                    dataset: {dataset: pset.dataset, genome: pset.genome, drugSensitivity: pset.drugSensitivity},\n                    rna: {rnaTool: pset.rnaTool, rnaRef: pset.rnaRef, rawSeqDataRNA: pset.dataset.rawSeqDataRNA},\n                    dna: {dnaTool: pset.dnaTool, dnaRef: pset.dnaRef, rawSeqDataDNA: pset.dataset.rawSeqDataDNA},\n                    isReady: true\n                });\n            }else{\n                this.setState({message: 'We could not find a PSet with the ID.'})\n            }\n        });\n    }\n\n    showMessage(status, data){\n        APIHelper.messageAfterRequest(status, data, this.initializeState, this.messages);\n    }\n\n    render(){\n        return(\n            <div className='pageContent'>\n                <Messages ref={(el) => this.messages = el} />\n                <div className='psetTitle'>\n                    <h1>Explore PSet - {this.state.pset.name}</h1>\n                    <DownloadPSetButton disabled={false} selectedPSets={[this.state.pset]} onDownloadComplete={this.showMessage}/>\n                </div>\n                <GeneralInfoAccordion data={this.state.general}/>\n                <div className='tabContainer'>\n                    {this.state.isReady ? \n                        <TabView renderActiveOnly={false}>\n                            <TabPanel header=\"Dataset\">\n                                <DatasetTabContent metadata={this.state.dataset} />   \n                            </TabPanel>\n                            {this.state.pset.dataType.map((type) => \n                                <TabPanel key={type.name} header={type.name}>\n                                    {type.name === 'RNA' ? \n                                        <RNATabContent metadata={this.state.rna}/> \n                                        : \n                                        <DNATabContent metadata={this.state.dna}/>\n                                    }\n                                </TabPanel>)\n                            }\n                        </TabView>\n                        : \n                        <h3>{this.state.message}</h3>\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default PSet;","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { AuthContext } from \"../../context/auth\";\nimport Navigation from '../Navigation/Navigation';\nimport Footer from '../Footer/Footer';\nimport PrivateRoute from './PrivateRoute';\nimport Main from '../Main/Main';\nimport PSetSearch from '../PSetSearch/PSetSearch';\nimport Dashboard from '../Dashboard/Dashboard';\nimport Stats from '../Stats/Stats';\nimport Documentation from '../Documentation/Documentation';\nimport Tutorial from '../Documentation/Support/Tutorial';\nimport Profile from '../Profile/Profile';\nimport Login from '../Authentication/Login';\nimport PSet from '../PSet/PSet';\n\nclass Router extends React.Component{\n    constructor(){\n        super();\n        this.state = {\n            authenticated: false,\n            isAdmin: false,\n            user: '',\n            setAuthToken: (value) => {\n                this.setState({\n                    authenticated: value.authenticated,\n                    username: value.username,\n                    isAdmin: value.isAdmin\n                });\n            },\n            resetAuthToken: () => {\n                this.setState({\n                    authenticated: false,\n                    isAdmin: false,\n                    user: ''\n                });\n            }\n        }\n    }\n\n    componentDidMount(){\n        if(!this.state.authenticated){\n            fetch('/user/checkToken')\n            .then(res => {\n                if(res.status === 200){\n                    return(res.json());\n                }else{\n                    return({authenticated: false, isAdmin: false, username: ''});\n                }\n            })\n            .then(data => {this.state.setAuthToken(data)});\n        }\n    }\n\n    render(){\n        \n        const profile = (\n            <Profile />\n        );\n\n        return(\n            <AuthContext.Provider value={this.state}>\n                <Switch>\n                    <Route exact path ='/' component={Main} /> \n                    <Route exact path ='/PSetSearch' component={PSetSearch}/>\n                    <Route exact path ='/Dashboard' component={Dashboard}/>\n                    <Route exact path ='/Stats' component={Stats}/>\n                    <Route exact path ='/Documentation' component={Documentation}/>\n                    <Route exact path ='/Tutorial' component={Tutorial}/>\n                    <Route exact path='/Authentication' component={Login} />\n                    <Route path='/:id1/:id2' component={PSet} />\n                    <PrivateRoute path='/Profile' component={profile} redirect='/Authentication' />\n                </Switch>\n                <Navigation />\n                <Footer />\n            </AuthContext.Provider>\n        );\n    }\n}\n\nexport default Router;","import React from 'react';\nimport './App.css';\nimport './PrimeStyle.css';\nimport Router from '../Routing/Router';\n\nclass App extends React.Component {\n\trender(){\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<Router />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'primereact/resources/themes/nova-light/theme.css';\nimport 'primereact/resources/primereact.min.css';\nimport 'primeicons/primeicons.css';\nimport App from './components/App/App';\nimport { BrowserRouter } from 'react-router-dom';\nimport * as serviceWorker from './components/serviceWorker';\n\nReactDOM.render((\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>\n), document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}