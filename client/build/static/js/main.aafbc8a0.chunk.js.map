{"version":3,"sources":["context/auth.js","components/Routing/PrivateRoute.js","components/Navigation/Navigation.js","components/Main/Main.js","components/App/App.js","components/Shared/PSetAPIHelper.js","components/Shared/APICalls.js","components/Shared/PSetDropdown/PSetDropdown.js","components/Shared/PSetParameterOptions.js","components/PSetSearch/subcomponents/PSetFilter.js","components/Shared/PSetTable.js","components/Shared/Buttons/SavePSetButton.js","components/PSetSearch/PSetSearch.js","components/PSetRequest/PSetRequestParameterSelection.js","components/PSetRequest/subcomponents/PSetRequestModal.js","components/PSetRequest/PSetRequest.js","components/Stats/DownloadChart.js","components/Stats/Stats.js","components/Contact/Contact.js","components/Profile/subcomponents/UserInfo.js","components/Shared/Buttons/DownloadPSetButton.js","components/Profile/subcomponents/UserPSet.js","components/Profile/Profile.js","components/Authentication/Login.js","components/PSet/PSetAccordion.js","components/PSet/TabContents/DatasetTabContent.js","components/PSet/TabContents/RNATabContent.js","components/PSet/TabContents/DNATabContent.js","components/PSet/PSet.js","components/Routing/Router.js","components/serviceWorker.js","index.js"],"names":["AuthContext","createContext","PrivateRoute","fetch","then","res","status","json","authenticated","username","data","context","setAuthToken","userAuth","this","exact","path","props","render","React","cloneElement","component","to","pathname","redirect","state","Component","contextType","Navigation","onLoginClick","bind","onLogoutClick","event","preventDefault","routing","history","push","console","log","resetAuthToken","location","logoutMsg","Fragment","src","alt","className","activeClassName","label","onClick","width","isOpen","OrcestraMain","href","App","getFilterSet","filterset","datatype","toFilterArray","dataType","datasetName","dataset","datasetVersion","genome","rnaTool","dnaTool","rnaRef","dnaRef","drugSensitivity","buildAPIStr","filterSet","apiStr","apiFragments","buildAPIStrFragment","i","length","replace","isNotReadyToSubmit","request","isSelected","name","hasName","email","test","isValidEmail","reqParam","Array","isArray","messageAfterRequest","initialize","msgComponent","show","severity","summary","detail","message","toString","sticky","selectedValues","isDatasetVersion","filterArray","Object","keys","constructor","version","keyName","apiFragment","queryPSet","api","callback","resData","PSetDropdown","dataTemplate","option","style","fontSize","margin","isHidden","selectOne","parameterName","id","optionLabel","value","selectedParameter","options","parameterOptions","onChange","handleUpdateSelection","filter","itemTemplate","placeholder","disabled","selectedItemTemplate","item","PSetParameterOptions","drugSensitivityOptions","rnaRefOptions","dnaRefOptions","hideRNAToolRef","hideDNAToolRef","isReady","handleFilterChange","setToolState","setRefState","setState","formData","setParentState","target","autoUpdate","requestUpdate","parameters","genomeName","map","ref","includes","dropdownClassName","PSetFilter","setRequestView","psetRequestMode","sendFilterPSetRequest","APIHelper","searchAll","APICalls","updateAllData","checked","isRequest","tooltip","PSetTable","auth","useContext","useState","rows","first","start","end","totalRecords","loading","useEffect","downloadOnePSet","link","psetID","psetIDs","method","body","JSON","stringify","headers","catch","err","API","anchor","document","createElement","setAttribute","display","appendChild","click","removeChild","toolsRefTemplate","rowData","column","output","field","key","allData","selection","selectedPSets","onSelectionChange","updatePSetSelection","paginator","scrollable","selectionMode","header","route","doi","sortable","downloadLink","_id","SavePSetButton","saveSelectedPSets","userPSet","psetId","reqData","onSaveComplete","PSetSearch","handleSubmitRequest","trackPromise","initializeState","messages","updateReqInputEvent","notReadyToSubmit","formDataOriginal","disableSaveBtn","setStateOnParamSelection","showMessage","parse","states","selected","visible","datasetVal","genomeVal","el","usePromiseTracker","promiseInProgress","type","color","height","scrollHeight","PSetRequestParameterSelection","displaySelectedParameter","str","parameter","PSetRequestModal","footer","float","selectedValue","disableBtn","onComplete","hide","onHide","tableValue","PSetRequest","queryResult","isModalVisible","disableModalBtn","processAPIRequest","showModal","hideModal","disableModalSaveBtn","availablePSetModalLink","requestView","Plot","createPlotlyComponent","Plotly","DownloadChart","x","y","orientation","marker","layout","autosize","title","yaxis","autorange","titlefont","size","font","useResizeHandler","Stats","chartData","showMessages","download","showDownload","Contact","UserInfo","user","DownloadPSetButton","downloadPSets","psets","UserPSet","handleBtnClick","dialogVisible","btnDisabled","btnYesDislabed","handleSelectionChange","onClickYes","psetData","pset","pending","onDownloadComplete","btnLabel","noPSetData","dialogFooter","heading","modal","Profile","removeFromSavedList","selectedPSet","saved","psetSaved","removePSetByID","cancelPSetRequest","inProcess","psetInProcess","userEmail","findPSetByID","complete","psetArray","index","splice","Login","onFindClick","userChecked","userExists","exists","userRegistered","registered","password","onRegisterClick","passwordReg1","passwordReg2","btnFindDisabled","btnLoginDisabled","btnRegDisabled","handleInputChange","loginForm","registerForm","renderForm","msg","icon","PSetToolAccordion","toolAccordionTabs","items","commands","command","multiple","RNARefAccordion","rnaRefAccordionTabs","source","DNARefAccordion","exomeRefAccordionTabs","cosmic","exonTarget","GeneralInfoAccordion","dateCreated","createdBy","DatasetTabContent","publication","metadata","citation","RNATabContent","genomeRawData","rawSeqDataRNA","DNATabContent","rawSeqDataDNA","PSet","general","rna","dna","match","params","id1","id2","renderActiveOnly","Router","profile","Provider","Boolean","window","hostname","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.aafbc8a0.chunk.js","sourcesContent":["import { createContext } from 'react';\n\nexport const AuthContext = createContext();","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport {AuthContext} from '../../context/auth';\n\nclass PrivateRoute extends React.Component {\n    \n    static contextType = AuthContext;\n\n    componentDidMount(){\n        fetch('/user/checkToken')\n            .then(res => {\n                if(res.status === 200){\n                    return(res.json());\n                }else{\n                    return({authenticated: false, username: ''});\n                }\n            })\n            .then(data => {this.context.setAuthToken(data)});\n    }\n    \n    render(){\n        const userAuth = this.context;\n        return(\n            <Route            \n                exact path={this.props.path} \n                render={(props) => userAuth.authenticated ? React.cloneElement(this.props.component, {...props}) : (<Redirect to={{pathname: this.props.redirect, state: {path: this.props.path}}} />)}\n            />\n        );\n    }\n}\n\nexport default PrivateRoute;","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport {Button} from 'primereact/button';\nimport {AuthContext} from '../../context/auth';\nimport './Navigation.css';\nimport { slide as Menu } from 'react-burger-menu';\n\nclass Navigation extends React.Component {\n\n    static contextType = AuthContext;\n    \n    constructor(){\n        super();\n        this.onLoginClick = this.onLoginClick.bind(this);\n        this.onLogoutClick = this.onLogoutClick.bind(this);\n    }\n\n    onLoginClick(event){\n        event.preventDefault();\n        this.props.routing.history.push({pathname: '/Authentication', state:{path: this.props.routing.path}});\n    }\n\n    onLogoutClick(event){\n        event.preventDefault();\n        console.log(this.props.routing);\n        fetch('/user/logout/:' + this.context.username)\n            .then(res => {\n                this.context.resetAuthToken();\n                this.props.routing.history.push({pathname: '/Authentication', state:{path: this.props.routing.location.pathname, logoutMsg: 'You have logged out'}});\n            });            \n    }\n\n    render(){   \n        return(\n            <React.Fragment>\n                <header>\n                    <NavLink exact to='/'><img src={process.env.PUBLIC_URL + \"/images/trumpet-orcestra.png\"} alt='' /></NavLink>\n                    <div className='navBarContainer'>\n                        <div className='navBar'>\n                            <div><NavLink exact to='/' activeClassName='active-link'>Home</NavLink></div>\n                            <div><NavLink exact to=\"/PSetSearch\" activeClassName='active-link'>Search and Request</NavLink></div>\n                            {/* <div><NavLink exact to=\"/PSetRequest\" activeClassName='active-link'>Request</NavLink></div> */}\n                            <div><NavLink exact to=\"/Stats\" activeClassName='active-link'>Statistics</NavLink></div>\n                            <div><NavLink exact to=\"/Profile\" activeClassName='active-link'>Profile</NavLink></div>\n                            <div><NavLink exact to=\"/Contact\" activeClassName='active-link'>Contact</NavLink></div>\n                            <div>\n                                {\n                                    this.context.authenticated ? \n                                    <Button label='Logout' onClick={this.onLogoutClick}/> : <Button label='Login/Register' onClick={this.onLoginClick}/>\n                                }\n                            </div> \n                        </div>\n                        <div className='burgerNav'>\n                            <Menu width={ 200 } isOpen={ false } > \n                                <div className='menu-item'><NavLink exact to='/' activeClassName='active-link'>Home</NavLink></div>\n                                <div className='menu-item'><NavLink exact to=\"/PSetSearch\" activeClassName='active-link'>Search and Request</NavLink></div>\n                                {/* <div className='menu-item'><NavLink exact to=\"/PSetRequest\" activeClassName='active-link'>Request</NavLink></div> */}\n                                <div className='menu-item'><NavLink exact to=\"/Stats\" activeClassName='active-link'>Statistics</NavLink></div>\n                                <div className='menu-item'><NavLink exact to=\"/Profile\" activeClassName='active-link'>Profile</NavLink></div>\n                                <div><NavLink exact to=\"/Contact\" activeClassName='active-link'>Contact</NavLink></div>\n                                <div className='menu-item'>\n                                    {\n                                        this.context.authenticated ? \n                                        <Button label='Logout' onClick={this.onLogoutClick}/> : <Button label='Login/Register' onClick={this.onLoginClick}/>\n                                    }\n                                </div>\n                            </Menu>\n                        </div>   \n                    </div>\n                    \n                    <div className='loggedIn'>{this.context.authenticated ? 'Logged in as: ' + this.context.username : ''}</div> \n                </header>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default Navigation;","import React from 'react';\nimport './Main.css';\n\nclass OrcestraMain extends React.Component {\n    \n    render(){\n\t\treturn (\n\t\t\t<div className='mainContent'>\n                <div className=\"home\">\n                    <h1>ORCESTRA</h1>   \n                    <h2>Orchestration platform for reproducing pharmacogenomic analyses</h2>\n                    <div className=\"links\">\n                        <a className='button' href=\"/Stats\">View Statistics</a>\n                        <a className='button' href=\"/PSetSearch\">Search and <br />Request PSets</a>\n                        <a className='button' href=\"/Profile\">View Your Profile</a>\n                    </div>\n                </div>\n                \n\t\t\t</div>\n\t\t);\n\t}\n    \n}\n\nexport default OrcestraMain;","import React from 'react';\nimport './App.css';\nimport './PrimeStyle.css';\n\nimport Navigation from '../Navigation/Navigation';\nimport Main from '../Main/Main';\n\nclass App extends React.Component {\n\trender(){\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<Navigation routing={this.props} />\n\t\t\t\t<Main />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// Helper functions used for PSet API requests.\n\nexport function getFilterSet(data){\n    var filterset = {}\n    filterset.datatype = toFilterArray(data.dataType);\n    filterset.datasetName = toFilterArray(data.dataset);\n    filterset.datasetVersion = toFilterArray(data.dataset, true);\n    filterset.genome = toFilterArray(data.genome);\n    filterset.rnaTool = toFilterArray(data.rnaTool);\n    filterset.dnaTool = toFilterArray(data.dnaTool);\n    filterset.rnaRef = toFilterArray(data.rnaRef);\n    filterset.dnaRef = toFilterArray(data.dnaRef);\n    filterset.drugSensitivity = toFilterArray(data.drugSensitivity, true);\n    return(filterset);\n}\n\nexport function buildAPIStr(filterSet){\n    let apiStr = '/pset?';\n    let apiFragments = [];\n    apiFragments.push(buildAPIStrFragment('dtp', filterSet.datatype));\n    apiFragments.push(buildAPIStrFragment('dsv', filterSet.datasetVersion));\n    apiFragments.push(buildAPIStrFragment('dsn', filterSet.datasetName));\n    apiFragments.push(buildAPIStrFragment('gnm', filterSet.genome));\n    apiFragments.push(buildAPIStrFragment('rnat', filterSet.rnaTool));\n    apiFragments.push(buildAPIStrFragment('dnat', filterSet.dnaTool));\n    apiFragments.push(buildAPIStrFragment('rnar', filterSet.rnaRef));\n    apiFragments.push(buildAPIStrFragment('dnar', filterSet.dnaRef));\n    apiFragments.push(buildAPIStrFragment('dst', filterSet.drugSensitivity));\n    for(let i = 0; i < apiFragments.length; i++){\n        if(apiFragments[i].length > 0){\n            apiStr += apiFragments[i] + '&';\n        }\n    }\n    apiStr = apiStr.replace(/&$/, '');\n    return(apiStr);\n}\n\nexport function isNoneSelected(filterset){\n    if(!filterset.datatype.length && \n        !filterset.datasetName.length && \n        !filterset.genome.length && \n        !filterset.rnaTool.length &&\n        !filterset.dnaTool.length &&\n        !filterset.rnaRef.length &&\n        !filterset.dnaRef.length &&\n        !filterset.drugSensitivity.length){\n        return(true);\n    }\n    return(false);\n}\n\nexport function isNotReadyToSubmit(request){\n    if(!isSelected(request.dataType)){\n        return(true);\n    }else if(request.dataType.length === 1){\n        if(request.dataType[0] === 'RNA' && (!isSelected(request.rnaRef) || !isSelected(request.rnaTool))){\n            return(true);\n        }else if(request.dataType[0] === 'DNA' && (!isSelected(request.dnaRef) || !isSelected(request.dnaTool))){\n            return(true);\n        }\n    }else{\n        if(!isSelected(request.rnaRef)){\n            return(true);\n        }\n        if(!isSelected(request.dnaRef)){\n            return(true);\n        }\n        if(!isSelected(request.rnaTool)){\n            return(true);\n        }\n        if(!isSelected(request.dnaTool)){\n            return(true);\n        }\n    }\n\n    if(!isSelected(request.genome)){\n        return(true);\n    } \n    if(!isSelected(request.dataset)){\n        return(true);\n    }\n    // if(!isSelected(request.drugSensitivity)){\n    //     return(true);\n    // }\n    if(!hasName(request.name)){\n        return(true);\n    }\n    if(!isValidEmail(request.email)){\n        return(true);\n    }\n    return(false);\n}\n\nexport function isSelected(reqParam){\n    if(typeof reqParam === 'undefined' || reqParam === null){\n        return(false);\n    }\n    if(Array.isArray(reqParam) && !reqParam.length){\n        return(false);\n    }\n    return(true);\n}\n\nexport function messageAfterRequest(status, data, initialize=null, msgComponent){\n    if(initialize){\n        initialize();\n    }\n    if(status){\n        msgComponent.show({severity: 'success', summary: data.summary, detail: data.message});\n    }else{\n        msgComponent.show({severity: 'error', summary: 'An error occured', detail: data.toString(), sticky: true});\n    } \n}\n\nfunction hasName(name){\n    if(typeof name === 'undefined' || name === null){\n        return(false);\n    }\n    if(name.length === 0){\n        return(false);\n    }\n    return(true);\n}\n\nfunction isValidEmail(email){\n    const regex = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/;\n    if(typeof email === 'undefined' || email === null){\n        return(false);\n    }\n    if(email.length === 0){\n        return(false);\n    }\n    if(!regex.test(email)){\n        return(false);\n    }\n    return(true);\n}\n\nfunction toFilterArray(selectedValues, isDatasetVersion = false){\n    var filterArray = [];\n    if(typeof selectedValues === 'undefined' || selectedValues === null){\n        return(filterArray);\n    }\n    if(Object.keys(selectedValues).length === 0 && selectedValues.constructor === Object){\n        return(filterArray);\n    }\n    if(Array.isArray(selectedValues)){\n        if(isDatasetVersion){\n            for(let i = 0; i < selectedValues.length; i++){   \n                filterArray.push(selectedValues[i].version);\n            }\n        }else{\n            for(let i = 0; i < selectedValues.length; i++){   \n                filterArray.push(selectedValues[i].name);\n            }\n        }\n        return(filterArray);\n    } \n    if(isDatasetVersion){\n        filterArray.push(selectedValues.version);\n    }else{\n        filterArray.push(selectedValues.name);\n    }\n    return(filterArray);\n}\n\nfunction buildAPIStrFragment(keyName, filterArray){\n    var apiFragment = '';\n    if(filterArray.length > 0){\n        for(let i = 0; i < filterArray.length; i++){\n            apiFragment += keyName + '=' + filterArray[i]\n            if(i < filterArray.length - 1){\n                apiFragment += '&';\n            }\n        }\n    }   \n    return(apiFragment);\n}\n","\nexport function queryPSet(api, callback){\n    //console.log(api);\n    fetch(api)  \n        .then(res => res.json())\n        .then(resData => {\n            callback(resData);\n        }   \n    );\n}\n\nexport function saveOrUpdateUserPSets(username, selectedPSets, callback){\n    if(selectedPSets.length){\n        var userPSet = { username: username };\n        var psetId = [];\n        for(let i = 0; i < selectedPSets.length; i++){\n            psetId.push(selectedPSets[i]._id);\n        }\n        userPSet.psetId = psetId;\n\n        fetch('/user/pset/add', {\n            method: 'POST',\n            body: JSON.stringify({reqData: userPSet}),\n            headers: {\n                'Content-type': 'application/json'\n            }\n        })\n            .then(res => res.json())\n            .then(resData => callback(1, resData))\n            .catch(err => callback(0, err));\n\n    }\n}\n\nexport function requestPSet(data, callback){\n    console.log(data);\n    fetch('/pset/request', {\n        method: 'POST',\n        body: JSON.stringify({\n            reqData: data\n        }),\n        headers: {\n            'Content-type': 'application/json'\n        }\n    })\n        .then(res => res.json())\n        .then(resData => callback(1, resData))\n        .catch(err => callback(0, err));\n}\n\nexport function downloadPSets(psets, callback){\n    var psetIDs = [];\n    console.log(psets);\n    for(let i = 0; i < psets.length; i++){\n        psetIDs.push(psets[i]._id);\n    }\n    console.log(psetIDs);\n    fetch('/pset/download', {\n        method: 'POST',\n        body: JSON.stringify({\n            psetIDs: psetIDs\n        }),\n        headers: {\n            'Content-type': 'application/json'\n        }\n    })\n        .then(res => res.json())\n        .then(resData => {\n            callback(1, resData);\n        })\n        .catch(err => callback(0, err));\n}\n\nexport function downloadOnePSet(psetID){\n    console.log('downloadOnePSet: ' + psetID);\n    var psetIDs = [psetID];\n    fetch('/pset/download', {\n        method: 'POST',\n        body: JSON.stringify({\n            psetIDs: psetIDs\n        }),\n        headers: {\n            'Content-type': 'application/json'\n        }\n    })\n        .then(res => res.json())\n        .catch(err => console.log(err));\n}","import React from 'react';\nimport './PSetDropdown.css';\nimport {MultiSelect} from 'primereact/multiselect';\nimport {Dropdown} from 'primereact/dropdown';\n\n// props: id, className, isHidden, selectOne, parameterName, parameterOptions[], selecedParameter[], handleUpdateSelection()\n\nclass PSetDropdown extends React.Component {\n    \n    render(){\n        const dataTemplate =  (option) => {\n            return(\n                <div className=\"\">\n                    <span style={{fontSize:'1em',margin:'1em .5em 0 0'}}>{option.label}</span>\n                </div>\n            );\n        }\n\n        const selectedDataTemplate = (item) => {\n            if (item) {\n                return (\n                    <div className=\"my-multiselected-item-token\">\n                        <span>{item.label}</span>\n                    </div>\n                );\n            }\n            else {\n                return <span>Select...</span>\n            }\n        }\n            \n        if(this.props.isHidden){\n            return(null);\n        }\n        if(this.props.selectOne){\n            return(\n                <div className={this.props.className}>\n                    <label>{this.props.parameterName}</label>\n                    <Dropdown \n                        id={this.props.id} \n                        className='paramInput' \n                        optionLabel='label' \n                        value={this.props.selectedParameter}   \n                        options={this.props.parameterOptions} \n                        onChange={this.props.handleUpdateSelection}\n                        filter={true} \n                        itemTemplate={dataTemplate}\n                        placeholder=\"Select one...\"\n                        disabled={this.props.disabled}\n                    />\n                </div>\n            );\n        }\n        return(\n            <div className={this.props.className}>\n                <label>{this.props.parameterName}</label>\n                <MultiSelect \n                    id={this.props.id}\n                    className='paramInput' \n                    optionLabel='label' \n                    value={this.props.selectedParameter} \n                    options={this.props.parameterOptions} \n                    onChange={this.props.handleUpdateSelection}\n                    filter={true} \n                    itemTemplate={dataTemplate} \n                    selectedItemTemplate={selectedDataTemplate}\n                    disabled={this.props.disabled}\n                />\n            </div>\n        );\n    }\n    \n}\n\nexport default PSetDropdown;","import React from 'react';\nimport PSetDropdown from '../Shared/PSetDropdown/PSetDropdown';\n\nclass PSetParameterOptions extends React.Component{\n\n    constructor(){\n        super();\n        this.state = {\n            //formData: {},\n            drugSensitivityOptions: [],\n            rnaRefOptions: [],\n            dnaRefOptions: [],\n            hideRNAToolRef: false,\n            hideDNAToolRef: false,\n            isReady: false\n        }\n        this.handleFilterChange= this.handleFilterChange.bind(this);\n        this.setToolState = this.setToolState.bind(this);\n        this.setRefState = this.setRefState.bind(this);\n    }\n\n    componentDidMount(){\n        // fetch('/formdata')  \n        //     .then(res => res.json())\n        //     .then(resData => {\n        //         this.setState({\n        //             formData: resData[0],\n        //             rnaRefOptions: resData[0].rnaRef,\n        //             dnaRefOptions: resData[0].dnaRef,\n        //             isReady: true\n        //         });\n        //     }); \n        this.setState({\n            rnaRefOptions: this.props.formData.rnaRef,\n            dnaRefOptions: this.props.formData.dnaRef,\n            isReady: true\n        });\n    }\n\n    async handleFilterChange(event){\n        event.preventDefault();\n        await this.props.setParentState([{name: event.target.id, value: event.value}]);\n        if(event.target.id === 'dataType'){\n            this.setToolState(event);\n            \n        }else if(event.target.id === 'genome'){\n            this.setRefState(event)\n        }else if(event.target.id === 'dataset'){\n            console.log(event.value);\n            this.setState({\n                drugSensitivityOptions: [event.value.drugSensitivity]\n            });\n            await this.props.setParentState([{name: 'drugSensitivity', value: event.value.drugSensitivity}]);\n        }\n        if(this.props.autoUpdate){\n            this.props.requestUpdate(); \n        } \n    }\n\n    async setToolState(event){\n        if(event.value.length === 1){\n            if(this.props.parameters.dataType[0].name === 'RNA'){             \n                this.setState({\n                    hideDNAToolRef: true\n                });\n                await this.props.setParentState([\n                    {name: \"dnaTool\", value: []},\n                    {name: \"dnaRef\", value: []}\n                ]);\n            }else{\n                this.setState({\n                    hideRNAToolRef: true\n                });\n                await this.props.setParentState([\n                    {name: \"rnaTool\", value: []},\n                    {name: \"rnaRef\", value: []}\n                ]);\n            }\n        }else{\n            this.setState({\n                hideDNAToolRef: false,\n                hideRNAToolRef: false\n            });\n        }\n    }\n\n    async setRefState(event){\n        if(event.value.length === 0){\n            this.setState({\n                dnaRefOptions: this.props.formData.dnaRef,\n                rnaRefOptions: this.props.formData.rnaRef\n            });\n        }else{\n            let dnaRef = this.props.parameters.dnaRef;\n            let rnaRef = this.props.parameters.rnaRef;\n            \n            if(Array.isArray(this.props.parameters.genome)){\n                let genomeName = this.props.parameters.genome.map((genome) => {return(genome.name)});\n                dnaRef = dnaRef.filter((ref) => {return(genomeName.includes(ref.genome) && ref)});\n                rnaRef = rnaRef.filter((ref) => {return(genomeName.includes(ref.genome) && ref)});\n                this.setState({\n                    dnaRefOptions: this.props.formData.dnaRef.filter((ref) => {return(genomeName.includes(ref.genome) && ref)}),\n                    rnaRefOptions: this.props.formData.rnaRef.filter((ref) => {return(genomeName.includes(ref.genome) && ref)})\n                });\n            }else{\n                dnaRef = dnaRef.filter((ref) => {return(this.props.parameters.genome.name === ref.genome && ref)});\n                rnaRef = rnaRef.filter((ref) => {return(this.props.parameters.genome.name === ref.genome && ref)});\n                this.setState({\n                    dnaRefOptions: this.props.formData.dnaRef.filter((ref) => {return(this.props.parameters.genome.name === ref.genome && ref)}),\n                    rnaRefOptions: this.props.formData.rnaRef.filter((ref) => {return(this.props.parameters.genome.name === ref.genome && ref)})\n                });\n            }\n            \n            await this.props.setParentState([\n                {name: 'dnaRef', value: dnaRef},\n                {name: 'rnaRef', value: rnaRef}\n            ]);\n        }  \n    }\n\n    // async setRefState(event){\n    //     if(event.value.length === 0){\n    //         this.setState({\n    //             dnaRefOptions: this.state.formData.dnaRef,\n    //             rnaRefOptions: this.state.formData.rnaRef\n    //         });\n    //     }else{\n    //         let dnaRef = this.props.parameters.dnaRef;\n    //         let rnaRef = this.props.parameters.rnaRef;\n            \n    //         if(Array.isArray(this.props.parameters.genome)){\n    //             let genomeName = this.props.parameters.genome.map((genome) => {return(genome.name)});\n    //             dnaRef = dnaRef.filter((ref) => {return(genomeName.includes(ref.genome) && ref)});\n    //             rnaRef = rnaRef.filter((ref) => {return(genomeName.includes(ref.genome) && ref)});\n    //             this.setState({\n    //                 dnaRefOptions: this.state.formData.dnaRef.filter((ref) => {return(genomeName.includes(ref.genome) && ref)}),\n    //                 rnaRefOptions: this.state.formData.rnaRef.filter((ref) => {return(genomeName.includes(ref.genome) && ref)})\n    //             });\n    //         }else{\n    //             dnaRef = dnaRef.filter((ref) => {return(this.props.parameters.genome.name === ref.genome && ref)});\n    //             rnaRef = rnaRef.filter((ref) => {return(this.props.parameters.genome.name === ref.genome && ref)});\n    //             this.setState({\n    //                 dnaRefOptions: this.state.formData.dnaRef.filter((ref) => {return(this.props.parameters.genome.name === ref.genome && ref)}),\n    //                 rnaRefOptions: this.state.formData.rnaRef.filter((ref) => {return(this.props.parameters.genome.name === ref.genome && ref)})\n    //             });\n    //         }\n            \n    //         await this.props.setParentState([\n    //             {name: 'dnaRef', value: dnaRef},\n    //             {name: 'rnaRef', value: rnaRef}\n    //         ]);\n    //     }  \n    // }\n    \n    render(){\n        return(\n            this.state.isReady ? \n                <React.Fragment>\n                        <PSetDropdown id='dataType' className={this.props.dropdownClassName} isHidden={false} parameterName='Data Type:' \n                            parameterOptions={this.props.formData.dataType} selectedParameter={this.props.parameters.dataType} handleUpdateSelection={this.handleFilterChange} />\n\n                        <PSetDropdown id='dataset' className={this.props.dropdownClassName} isHidden={false} parameterName='Dataset:' selectOne={this.props.selectOne} \n                            parameterOptions={this.props.formData.dataset} selectedParameter={this.props.parameters.dataset} handleUpdateSelection={this.handleFilterChange} />\n                        \n                        {/* <PSetDropdown id='drugSensitivity' className={this.props.dropdownClassName} isHidden={false} parameterName='Drug Sensitivity:' selectOne={true} disabled={true} \n                            parameterOptions={this.state.drugSensitivityOptions} selectedParameter={this.props.parameters.drugSensitivity} handleUpdateSelection={this.handleFilterChange} /> */}\n                        \n                        <PSetDropdown id='genome' className={this.props.dropdownClassName} isHidden={false} parameterName='Genome:' selectOne={this.props.selectOne} \n                            parameterOptions={this.props.formData.genome} selectedParameter={this.props.parameters.genome} handleUpdateSelection={this.handleFilterChange} />\n                        \n                        <PSetDropdown id='rnaTool' className={this.props.dropdownClassName} isHidden={this.state.hideRNAToolRef} parameterName='RNA Tool:' \n                            parameterOptions={this.props.formData.rnaTool} selectedParameter={this.props.parameters.rnaTool} handleUpdateSelection={this.handleFilterChange} />\n\n                        <PSetDropdown id='rnaRef' className={this.props.dropdownClassName} isHidden={this.state.hideRNAToolRef} parameterName='RNA Ref:' \n                            parameterOptions={this.state.rnaRefOptions} selectedParameter={this.props.parameters.rnaRef} handleUpdateSelection={this.handleFilterChange} />\n                        \n                        <PSetDropdown id='dnaTool' className={this.props.dropdownClassName} isHidden={this.state.hideDNAToolRef} parameterName='DNA Tool:' \n                            parameterOptions={this.props.formData.dnaTool} selectedParameter={this.props.parameters.dnaTool} handleUpdateSelection={this.handleFilterChange} />\n                        \n                        <PSetDropdown id='dnaRef' className={this.props.dropdownClassName} isHidden={this.state.hideDNAToolRef} parameterName='DNA Ref:' \n                            parameterOptions={this.state.dnaRefOptions} selectedParameter={this.props.parameters.dnaRef} handleUpdateSelection={this.handleFilterChange} />\n                </React.Fragment>\n                    // <React.Fragment>\n                    //     <PSetDropdown id='dataType' className={this.props.dropdownClassName} isHidden={false} parameterName='Data Type:' \n                    //         parameterOptions={this.state.formData.dataType} selectedParameter={this.props.parameters.dataType} handleUpdateSelection={this.handleFilterChange} />\n\n                    //     <PSetDropdown id='dataset' className={this.props.dropdownClassName} isHidden={false} parameterName='Dataset:' selectOne={this.props.selectOne} \n                    //         parameterOptions={this.state.formData.dataset} selectedParameter={this.props.parameters.dataset} handleUpdateSelection={this.handleFilterChange} />\n                        \n                    //     {/* <PSetDropdown id='drugSensitivity' className={this.props.dropdownClassName} isHidden={false} parameterName='Drug Sensitivity:' selectOne={true} disabled={true} \n                    //         parameterOptions={this.state.drugSensitivityOptions} selectedParameter={this.props.parameters.drugSensitivity} handleUpdateSelection={this.handleFilterChange} /> */}\n                        \n                    //     <PSetDropdown id='genome' className={this.props.dropdownClassName} isHidden={false} parameterName='Genome:' selectOne={this.props.selectOne} \n                    //         parameterOptions={this.state.formData.genome} selectedParameter={this.props.parameters.genome} handleUpdateSelection={this.handleFilterChange} />\n                        \n                    //     <PSetDropdown id='rnaTool' className={this.props.dropdownClassName} isHidden={this.state.hideRNAToolRef} parameterName='RNA Tool:' \n                    //         parameterOptions={this.state.formData.rnaTool} selectedParameter={this.props.parameters.rnaTool} handleUpdateSelection={this.handleFilterChange} />\n\n                    //     <PSetDropdown id='rnaRef' className={this.props.dropdownClassName} isHidden={this.state.hideRNAToolRef} parameterName='RNA Ref:' \n                    //         parameterOptions={this.state.rnaRefOptions} selectedParameter={this.props.parameters.rnaRef} handleUpdateSelection={this.handleFilterChange} />\n                        \n                    //     <PSetDropdown id='dnaTool' className={this.props.dropdownClassName} isHidden={this.state.hideDNAToolRef} parameterName='DNA Tool:' \n                    //         parameterOptions={this.state.formData.dnaTool} selectedParameter={this.props.parameters.dnaTool} handleUpdateSelection={this.handleFilterChange} />\n                        \n                    //     <PSetDropdown id='dnaRef' className={this.props.dropdownClassName} isHidden={this.state.hideDNAToolRef} parameterName='DNA Ref:' \n                    //         parameterOptions={this.state.dnaRefOptions} selectedParameter={this.props.parameters.dnaRef} handleUpdateSelection={this.handleFilterChange} />\n                    // </React.Fragment>\n                :\n                <div></div>\n        );\n    }\n\n}\nexport default PSetParameterOptions;","import React from 'react';\nimport {InputSwitch} from 'primereact/inputswitch';\n//import {Button} from 'primereact/button';\nimport * as APIHelper from '../../Shared/PSetAPIHelper';\nimport * as APICalls from '../../Shared/APICalls';\nimport PSetParameterOptions from '../../Shared/PSetParameterOptions';\nimport './PSetFilter.css';\n\nclass PSetFilter extends React.Component {\n    constructor(){\n        super();\n        this.state = {\n            psetRequestMode: false,\n            // parameters: {\n            //     dataType: [],\n            //     dataset: [],\n            //     drugSensitivity: [],\n            //     genome: [],\n            //     rnaTool: [],\n            //     rnaRef: [],\n            //     dnaTool: [],\n            //     dnaRef: [],\n            //     drugSensitivity: null\n            // }\n        }\n\n        // this.handleClick = this.handleClick.bind(this);\n        this.sendFilterPSetRequest = this.sendFilterPSetRequest.bind(this);\n        this.setRequestView = this.setRequestView.bind(this);\n    }\n\n    // handleClick = event => {\n    //     event.preventDefault();\n    //     this.sendFilterPSetRequest();\n    // }\n\n    sendFilterPSetRequest(){\n        let filterset = APIHelper.getFilterSet(this.props.parameters);\n        let apiStr = APIHelper.buildAPIStr(filterset);\n        let searchAll = apiStr === '/pset' ||  apiStr === '/pset?' ? true : false;\n        APICalls.queryPSet(apiStr, (data) => {\n            this.props.updateAllData(data, searchAll);\n        });    \n    }\n\n    setRequestView = event => {\n        this.props.setRequestView(event.value);\n    }\n\n    render(){\n        return(\n            <React.Fragment>\n                <div className='pSetFilterContainer'>\n                    <div className='pSetFilter'>\n                        <h2>PSet Parameters</h2>\n                        <div className='filterSet'>\n                            <label className='bold'>Request PSet: </label> \n                            <InputSwitch checked={this.props.isRequest} tooltip=\"Turn this on to request a PSet.\" onChange={this.setRequestView} />\n                        </div>\n                        <PSetParameterOptions \n                            autoUpdate={true}\n                            setParentState={this.props.setParentState}\n                            requestUpdate={this.sendFilterPSetRequest}\n                            parameters={this.props.parameters}\n                            formData={this.props.formData}\n                            dropdownClassName='filterSet'\n                            selectOne={this.props.isRequest}\n                        />\n                        {/* <Button type='submit' label='Search' onClick={this.handleClick} disabled={this.state.autoUpdateChecked}/> */}\n                    </div>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default PSetFilter;","import React, {useState, useEffect, useContext} from 'react';\nimport {DataTable} from 'primereact/datatable';\nimport {Column} from 'primereact/column';\nimport { Link } from 'react-router-dom';\nimport * as API from '../Shared/APICalls';\nimport {AuthContext} from '../../context/auth';\n\nconst PSetTable = (props) => {\n\n    const auth = useContext(AuthContext);\n    \n    const [state, setState] = useState({\n        rows: 10,\n        first: 0,\n        start: 0,\n        end: 10,\n        totalRecords: 0,\n        loading: true\n    })\n\n    useEffect(()=>{\n        setState({...state, loading: false})\n    }, []);\n\n    const downloadOnePSet = (id, link) => (event) => {\n        event.preventDefault();\n        console.log('downloadOnePSet');\n        API.downloadOnePSet(id);\n        const anchor = document.createElement('a');\n        anchor.setAttribute('download', null);\n        anchor.style.display = 'none';\n        anchor.setAttribute('href', link);\n        document.body.appendChild(anchor);\n        anchor.click();\n        document.body.removeChild(anchor);\n    }\n\n    const toolsRefTemplate = (rowData, column) => {\n        let output ='';\n        if(rowData[column.field]){\n            output = rowData[column.field].map(item => <div key={item.name}>{item.name}</div>);\n        }\n        return(\n            <div>{output}</div>\n        );\n    }\n\n    const nameColumnTemplate = (rowData, column) => {\n        let route = '/' + rowData.doi;\n        return(\n            <Link to={route} >{rowData.name}</Link>\n        );\n    }\n\n    const downloadTemplate = (rowData, column) => {\n        let link = 'Not Available';\n        if(rowData.downloadLink){\n            link = <a id={rowData._id} href='' onClick={downloadOnePSet(rowData._id, rowData.downloadLink)}>Download</a>\n        }\n        return(\n            link\n        )\n    }\n\n    const updatePSetSelectionEvent = event => {\n        props.updatePSetSelection(event.value);\n    }\n\n    return(\n        <DataTable \n            value={props.allData} \n            selection={props.selectedPSets} onSelectionChange={updatePSetSelectionEvent} \n            paginator={true} rows={state.rows} \n            scrollable={true}\n        >\n            {auth.authenticated && <Column selectionMode=\"multiple\" style={{width: '2.5em'}} />}\n            <Column className='textField' field='name' header='Name' style={{width:'10em'}} body={nameColumnTemplate} sortable={true} />\n            <Column className='textField' field='dataset.name' header='Dataset' style={{width:'6.5em'}} sortable={true} />\n            <Column className='textField' field='drugSensitivity.version' header='Drug Sensitivity' style={{width:'10.5em'}} sortable={true} />\n            <Column field='rnaTool' body={toolsRefTemplate} style={{width:'8em'}} header='RNA Tool' sortable={true}  />\n            <Column field='dnaTool' body={toolsRefTemplate} style={{width:'8em'}} header='DNA Tool' sortable={true} />\n            <Column field='rnaRef' body={toolsRefTemplate} style={{width:'15em'}} header='RNA Ref' sortable={true} />\n            <Column field='dnaRef' body={toolsRefTemplate} style={{width:'15em'}} header='DNA Ref' sortable={true} />\n            <Column field='downloadLink' body={downloadTemplate} style={{width:'6.5em'}} header='Download' />\n        </DataTable>\n    );\n\n}\n\nexport default PSetTable;","import React from 'react';\nimport {Button} from 'primereact/button';\nimport {AuthContext} from '../../../context/auth';\nimport * as APICalls from '../APICalls';\n\nclass SavePSetButton extends React.Component{\n    constructor(){\n        super();\n        this.saveSelectedPSets = this.saveSelectedPSets.bind(this);\n    }\n\n    static contextType = AuthContext;\n\n    saveSelectedPSets = event => {\n        event.preventDefault();\n        if(this.context.authenticated){\n            APICalls.saveOrUpdateUserPSets(this.context.username, this.props.selectedPSets, (status, data) => {this.props.onSaveComplete(status, data)});\n        }\n    }\n\n    render(){\n        return(\n            this.context.authenticated ? <Button label='Save' onClick={this.saveSelectedPSets} disabled={this.props.disabled}/> : '*Login or register to save existing PSets to your profile.'\n        );\n    }\n}\n\nexport default SavePSetButton;\n","import React from 'react';\nimport './PSetSearch.css';\nimport Navigation from '../Navigation/Navigation';\nimport PSetFilter from './subcomponents/PSetFilter';\nimport PSetTable from '../Shared/PSetTable';\nimport SavePSetButton from '../Shared/Buttons/SavePSetButton';\n//import DownloadPSetButton from '../Shared/Buttons/DownloadPSetButton';\nimport {usePromiseTracker} from \"react-promise-tracker\";\nimport {trackPromise} from 'react-promise-tracker';\nimport Loader from 'react-loader-spinner';\nimport {Button} from 'primereact/button';\nimport {InputText} from 'primereact/inputtext';\nimport {Messages} from 'primereact/messages';\nimport {AuthContext} from '../../context/auth';\nimport * as APIHelper from '../Shared/PSetAPIHelper';\nimport * as APICalls from '../Shared/APICalls';\n\nclass PSetSearch extends React.Component{\n    constructor(){\n        super();\n        this.state = {\n            allData: [],\n            formDataOriginal: {},\n            formData: {},\n            searchAll: true,\n            selectedPSets: [],\n            disableSaveBtn: true,\n            isRequest: false,\n\n            parameters: {\n                dataType: [],\n                dataset: [],\n                drugSensitivity: [],\n                genome: [],\n                rnaTool: [],\n                rnaRef: [],\n                dnaTool: [],\n                dnaRef: [],\n                name: '',\n                email: ''\n            },\n\n            notReadyToSubmit: true\n        }\n\n        this.updateAllData = this.updateAllData.bind(this);\n        this.setStateOnParamSelection = this.setStateOnParamSelection.bind(this);\n        // this.evaluateList = this.evaluateList.bind(this);\n        this.updatePSetSelection = this.updatePSetSelection.bind(this);\n        this.initializeState = this.initializeState.bind(this);\n        this.showMessage = this.showMessage.bind(this);\n        \n        this.setRequestView = this.setRequestView.bind(this);\n        this.handleSubmitRequest = this.handleSubmitRequest.bind(this);\n        this.updateReqInputEvent = this.updateReqInputEvent.bind(this);\n        //this.setStateOnParamSelection = this.setStateOnParamSelection.bind(this);\n    }\n\n    static contextType = AuthContext;\n\n    componentDidMount(){\n        APICalls.queryPSet('/pset', (resData) => {\n            this.updateAllData(resData);\n        });\n        fetch('/formdata')  \n            .then(res => res.json())\n            .then(resData => {\n                this.setState({\n                    formData: resData[0],\n                    formDataOriginal: JSON.parse(JSON.stringify(resData[0]))\n                });\n            });\n    }\n\n    showMessage(status, data){\n        APIHelper.messageAfterRequest(status, data, this.initializeState, this.messages);\n    }\n\n    // evaluateList(list){\n    //     if(list.length > 0){\n    //         return(\n    //             <ul>\n    //                 {list.map((pset) => <li key={pset._id}>{pset.name}</li>)}\n    //             </ul>\n    //         );\n    //     } else {\n    //         return(<ul><li>None</li></ul>);\n    //     }\n    // }\n\n    setStateOnParamSelection(states){\n        let parameters = this.state.parameters;\n        for(let i = 0; i < states.length; i++){\n            parameters[states[i].name] = states[i].value;\n        }\n        console.log(parameters);\n        this.setState({\n            parameters: parameters,\n            notReadyToSubmit: APIHelper.isNotReadyToSubmit(parameters)\n        });\n    }\n\n    updateAllData(data, searchAll = true){\n        this.setState({\n            allData: data,\n            searchAll: searchAll\n        });\n    }\n\n    updatePSetSelection(selected){\n        this.setState({selectedPSets: selected}, () => {\n            if(APIHelper.isSelected(this.state.selectedPSets)){\n                this.setState({disableSaveBtn: false});\n            }else{\n                this.setState({disableSaveBtn: true});\n            }\n        });\n    }\n\n    setRequestView(visible){\n        const parameters = this.state.parameters;\n        let formData = this.state.formData;\n        if(visible){\n            if(parameters.dataset.length){\n                formData.dataset = parameters.dataset;\n                parameters.dataset = parameters.dataset[0];\n            }\n            if(parameters.genome.length){\n                formData.genome = parameters.genome;\n                parameters.genome = parameters.genome[0];\n            }\n        }else{\n            console.log(parameters)\n            if(formData.dataset.length < this.state.formDataOriginal.dataset.length){\n                parameters.dataset = formData.dataset;\n            }else if(!Array.isArray(parameters.dataset)){\n                let datasetVal = JSON.parse(JSON.stringify(parameters.dataset));\n                parameters.dataset = [];\n                parameters.dataset.push(datasetVal);\n            }\n            if(formData.genome.length < this.state.formDataOriginal.genome.length){\n                parameters.genome = formData.genome\n            }else if(!Array.isArray(parameters.genome)){\n                let genomeVal = JSON.parse(JSON.stringify(parameters.genome));\n                parameters.genome = [];\n                parameters.genome.push(genomeVal);\n            }\n            formData = this.state.formDataOriginal;\n        }\n        this.setState({\n            parameters: parameters,\n            formData: JSON.parse(JSON.stringify(formData)),\n            notReadyToSubmit: APIHelper.isNotReadyToSubmit(parameters),\n            isRequest: visible\n        });\n    }\n\n    initializeState(){\n        this.setState({\n            selectedPSets: [],\n            disableSaveBtn: true\n        });\n    }\n\n    handleSubmitRequest = event => {\n        event.preventDefault();\n        let reqData = this.state.parameters;\n        reqData.drugSensitivity = reqData.dataset.drugSensitivity;\n        trackPromise(\n            fetch('/pset/request', {\n                method: 'POST',\n                body: JSON.stringify({\n                    reqData: reqData\n                }),\n                headers: {\n                    'Content-type': 'application/json'\n                }\n            })\n                .then(res => res.json())\n                .then(resData => APIHelper.messageAfterRequest(1, resData, this.initializeState, this.messages))\n                .catch(err => APIHelper.messageAfterRequest(0, err, this.initializeState, this.messages))\n        )\n    }\n\n    updateReqInputEvent = event => {\n        event.preventDefault();\n        let parameters= this.state.parameters;\n        parameters[event.target.id] = event.target.value;\n        this.setState({\n            parameters: parameters,\n            notReadyToSubmit: APIHelper.isNotReadyToSubmit(parameters)\n        });\n    }\n\n    // setStateOnParamSelection(states){\n    //     let parameters = this.state.reqData;\n    //     for(let i = 0; i < states.length; i++){\n    //         parameters[states[i].name] = states[i].value;\n    //     }\n    //     this.setState({\n    //         reqData: parameters,\n    //         notReadyToSubmit: APIHelper.isNotReadyToSubmit(parameters)\n    //     });\n    // }\n    \n    render(){  \n        const SubmitRequestButton = props => {\n            const {promiseInProgress} = usePromiseTracker();\n            return(\n                promiseInProgress ? \n                    <div className='loaderContainer'>\n                        <Loader type=\"ThreeDots\" color=\"#3D405A\" height={100} width={100} />\n                    </div>\n                    :\n                    <Button label='Submit Request' type='submit' disabled={false} onClick={this.handleSubmitRequest}/>\n            );\n        }\n        \n        return(\n            <React.Fragment>\n                <Navigation routing={this.props} />\n                <div className='pageContent'>\n                    <h1>Search or Request Pharmacogenomic Datasets</h1>\n                    <div className='pSetListContainer'>\n                        <PSetFilter \n                            updateAllData={this.updateAllData} \n                            setRequestView={this.setRequestView} \n                            setParentState={this.setStateOnParamSelection}\n                            isRequest={this.state.isRequest}\n                            formData={this.state.formData} \n                            parameters={this.state.parameters}\n                        />\n                        <div className='pSetTable'>\n                            <Messages ref={(el) => this.messages = el} />\n                            <div className='pSetSelectionSummary'>\n                                <div className='summaryPanel'>\n                                    <h2>Summary</h2>\n                                    <div className='pSetSummaryContainer'>\n                                        <div className='pSetSummaryItem'>\n                                            {\n                                                this.state.searchAll ? \n                                                <span><span className='pSetSummaryNum'>{this.state.allData.length}</span> <span>dataset(s) available.</span></span>\n                                                :\n                                                <span><span className='pSetSummaryNum'>{this.state.allData.length}</span> <span>{this.state.allData.length === 1 ? ' match' : ' matches'}</span> found.</span>\n                                            }\n                                        </div>\n                                        {/* <div className='pSetSummaryItem'>\n                                            <span className='pSetSummaryNum'>{this.state.selectedPSets.length}</span> selected.\n                                        </div> */}\n                                    </div>\n                                    <SavePSetButton selectedPSets={this.state.selectedPSets} disabled={this.state.disableSaveBtn} onSaveComplete={this.showMessage} />\n                                </div>\n                                {\n                                    this.state.isRequest &&\n                                    <div className='requestFormPanel'>\n                                        <h2>Request PSet</h2>\n                                        <div className='reqFormInput'>\n                                            <label>PSet Name:</label>\n                                            <InputText id='name' className='paramInput' value={this.state.parameters.name || ''} onChange={this.updateReqInputEvent} />\n                                        </div>\n                                        <div className='reqFormInput'>\n                                            <label>Email to receive DOI:</label>\n                                            <InputText id='email' className='paramInput' value={this.state.parameters.email || ''} onChange={this.updateReqInputEvent} />\n                                        </div>\n                                        <div className='reqFormInput'>\n                                            {/* <Button label='Submit Request' type='submit' disabled={this.state.notReadyToSubmit} onClick={this.handleSubmitRequest}/> */}\n                                            <SubmitRequestButton />\n                                        </div>\n                                    </div>\n                                }\n                                \n                                {/* <DownloadPSetButton selectedPSets={this.state.selectedPSets} disabled={this.state.disableSaveBtn} onDownloadComplete={this.showMessage} /> */}\n                            </div>\n                            <PSetTable allData={this.state.allData} selectedPSets={this.state.selectedPSets} updatePSetSelection={this.updatePSetSelection} scrollHeight='600px'/>    \n                        </div>\n                    </div>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default PSetSearch;","import React from 'react';\nimport './PSetRequest.css';\n\n// props: isHidden, parameterName, parameter[]\n\nclass PSetRequestParameterSelection extends React.Component{\n\n    constructor(){\n        super();\n        this.displaySelectedParameter = this.displaySelectedParameter.bind(this);\n    }\n\n    displaySelectedParameter(parameters){\n        var str = '';\n        if(Array.isArray(parameters)){\n            for(let i = 0; i < parameters.length; i++){\n                str += parameters[i].label;\n                if(i !== parameters.length -1 ){\n                    str += ', ';\n                }\n            }\n        }else{\n            str = parameters.label;\n        }\n        if(str){\n            return(str);\n        }\n        return(\n            <span className='noneSelectedMsg'>None selected</span>\n        );\n    }\n\n    render(){\n        if(this.props.isHidden){\n            return(null);\n        }\n        return(\n            <div className='parameterSelectionSet'>\n                <div className='parameterName'>\n                    {this.props.parameterName}:\n                </div>\n                <div className='parameterSelection'>\n                    {this.displaySelectedParameter(this.props.parameter)}\n                </div>\n            </div>\n        );\n    }\n\n}\n\nexport default PSetRequestParameterSelection;","import React from 'react';\nimport {Dialog} from 'primereact/dialog';\nimport {Button} from 'primereact/button';\nimport SavePSetButton from '../../Shared/Buttons/SavePSetButton';\n//import DownloadPSetButton from '../../Shared/Buttons/DownloadPSetButton';\nimport PSetTable from '../../Shared/PSetTable';\nimport '../PSetRequest.css';\n\nclass PSetRequestModal extends React.Component {   \n    render(){                       \n        const footer = (\n            <React.Fragment>\n                <div>\n                    <span style={{float: 'left'}}><SavePSetButton selectedPSets={this.props.selectedValue} disabled={this.props.disableBtn} onSaveComplete={this.props.onComplete} /></span>\n                    {/* <DownloadPSetButton selectedPSets={this.props.selectedValue} disabled={this.props.disableBtn} onDownloadComplete={this.props.onComplete} />  */}\n                    <Button className='modalCancelBtn' label='Cancel' onClick={this.props.hide} />\n                </div>\n            </React.Fragment>\n        );\n        \n        return(\n            <React.Fragment>\n                <Dialog header='Available PSets' visible={this.props.visible} onHide={this.props.hide} footer={footer} >\n                    <PSetTable allData={this.props.tableValue} selectedPSets={this.props.selectedValue} updatePSetSelection={this.props.onSelectionChange} scrollHeight='600px'/>\n                </Dialog>\n                <Button label='View available PSets' onClick={this.props.show} />\n            </React.Fragment>\n        );\n    }\n}\n\nexport default PSetRequestModal;","import React from 'react';\nimport './PSetRequest.css';\nimport Navigation from '../Navigation/Navigation';\nimport {Button} from 'primereact/button';\nimport {InputText} from 'primereact/inputtext';\nimport * as APIHelper from '../Shared/PSetAPIHelper';\nimport * as APICalls from '../Shared/APICalls';\nimport PSetRequestParameterSelection from './PSetRequestParameterSelection';\nimport PSetParameterOptions from '../Shared/PSetParameterOptions';\nimport PSetRequestModal from './subcomponents/PSetRequestModal';\nimport {Messages} from 'primereact/messages';\nimport {AuthContext} from '../../context/auth';\n\nclass PSetRequest extends React.Component{\n    \n    static contextType = AuthContext;\n    \n    constructor(){\n        super();\n        this.state = {\n            queryResult: [],\n            selectedPSets: [],\n\n            reqData: {\n                dataType: [],\n                dataset: {},\n                genome: {},\n                drugSensitivity: {},\n                rnaTool: [],\n                dnaTool: [],\n                rnaRef: [],\n                dnaRef: [],\n                name: '',\n                email: ''\n            },\n\n            notReadyToSubmit: false,\n            isModalVisible: false,\n            disableModalBtn: true\n        }\n        this.handleSubmitRequest = this.handleSubmitRequest.bind(this);\n        this.showMessage = this.showMessage.bind(this);\n        \n        this.setStateOnParamSelection = this.setStateOnParamSelection.bind(this);\n        this.updateReqInputEvent = this.updateReqInputEvent.bind(this);\n        \n        this.processAPIRequest = this.processAPIRequest.bind(this);\n        this.initializeState = this.initializeState.bind(this);\n        \n        this.showModal = this.showModal.bind(this);\n        this.hideModal = this.hideModal.bind(this);\n        this.updatePSetSelection = this.updatePSetSelection.bind(this);\n    }\n\n    componentDidMount(){\n        if(this.context.authenticated){\n            this.setState({email: this.context.username});\n        }\n    }\n\n    handleSubmitRequest = event => {\n        event.preventDefault();\n        APICalls.requestPSet(this.state.reqData, (status, data) => {\n            APIHelper.messageAfterRequest(status, data, this.initializeState, this.messages);\n        });\n    }\n\n    showMessage(status, data){\n        APIHelper.messageAfterRequest(status, data, this.hideModal, this.messages);\n    }\n\n    setStateOnParamSelection(states){\n        let parameters = this.state.reqData;\n        for(let i = 0; i < states.length; i++){\n            parameters[states[i].name] = states[i].value;\n        }\n        this.setState({\n            reqData: parameters,\n            notReadyToSubmit: APIHelper.isNotReadyToSubmit(parameters)\n        });\n    }\n\n    updateReqInputEvent = event => {\n        event.preventDefault();\n        let reqData = this.state.reqData;\n        reqData[event.target.id] = event.target.value;\n        this.setState({\n            reqData: reqData,\n            notReadyToSubmit: APIHelper.isNotReadyToSubmit(reqData)\n        });\n    }\n\n    processAPIRequest(){\n        var filterset = APIHelper.getFilterSet(this.state.reqData);\n        if(!APIHelper.isNoneSelected(filterset)){\n            var apiStr = APIHelper.buildAPIStr(filterset);\n            console.log(apiStr);\n            APICalls.queryPSet(apiStr, (resData) => {\n                this.setState({queryResult: resData});\n            });\n        }else{\n            this.setState({queryResult: []});\n        }\n    }\n\n    initializeState(){\n        this.setState({\n            queryResult: [],\n            selectedPSets: [],\n            \n            reqData: {\n                dataType: [],\n                dataset: {},\n                genome: {},\n                drugSensitivity: {},\n                rnaTool: [],\n                dnaTool: [],\n                rnaRef: [],\n                dnaRef: [],\n                name: '',\n                email: ''\n            },\n            \n            notReadyToSubmit: true,\n            isModalVisible: false,\n            disableModalSaveBtn: true\n        });\n    }\n\n    showModal(){\n        this.setState({isModalVisible: true});\n    }\n    \n    hideModal(){\n        this.setState({\n            isModalVisible: false, \n            selectedPSets: [],\n            disableModalBtn: true\n        });\n    }\n\n    updatePSetSelection(value){\n        this.setState({selectedPSets: value}, () => {\n            if(APIHelper.isSelected(this.state.selectedPSets)){\n                this.setState({disableModalBtn: false});\n            }else{\n                this.setState({disableModalBtn: true});\n            }\n        });\n    }\n\n    render(){\n        const availablePSetModalLink = ( \n            <PSetRequestModal visible={this.state.isModalVisible} show={this.showModal} hide={this.hideModal} \n                tableValue={this.state.queryResult} selectedValue={this.state.selectedPSets}\n                disableBtn={this.state.disableModalBtn} onSelectionChange={this.updatePSetSelection} onComplete={this.showMessage}\n            />\n        );\n\n        return(   \n            <React.Fragment>\n                <Navigation routing={this.props}/>\n                <div className='pageContent'>\n                    <h1>Request Pipeline Analysis</h1>\n                    <Messages ref={(el) => this.messages = el} />\n                    <div className='psetRequest'>\n                        <div className='psetRequestForm'>\n                            <h3>Pipeline Analysis Request Form</h3>\n                            <form>\n                                <PSetParameterOptions \n                                    autoUpdate={true}\n                                    setParentState={this.setStateOnParamSelection}\n                                    requestUpdate={this.processAPIRequest}\n                                    parameters={this.state.reqData}\n                                    dropdownClassName='reqInputSet'\n                                    selectOne={true}\n                                    requestView={true}\n                                />\n                                \n                                <div className='reqInputSet'>\n                                    <label>PSet Name:</label>\n                                    <InputText id='name' className='paramInput' value={this.state.reqData.name || ''} onChange={this.updateReqInputEvent} />\n                                </div>\n\n                                <div className='reqInputSet'>\n                                    <label>Email to receive DOI:</label>\n                                    <InputText id='email' className='paramInput' value={this.state.reqData.email || ''} onChange={this.updateReqInputEvent} />\n                                </div>\n\n                                <Button label='Submit Request' type='submit' onClick={this.handleSubmitRequest} disabled={this.state.notReadyToSubmit}/>\n                            </form>\n                        </div>\n                        <div className='requestSelectionSummary'>\n                            <div className='psetAvailability'>\n                                <h3>Available PSets with Your Parameter Selection</h3>\n                                <div className='psetAvail'>\n                                    <span className='pSetNum'>{this.state.queryResult.length}</span> \n                                    {this.state.queryResult.length === 1 ? 'match' : 'matches' } found.\n                                    <span className='pSetAvailLink'>{ this.state.queryResult.length ? availablePSetModalLink : '' }</span>\n                                </div>\n                            </div>\n                            <div className='requestSummary'>\n                                <h3>Your Parameter Selection</h3>\n                                <div className='parameterSelectionContainer'>\n                                    <PSetRequestParameterSelection parameterName='Datatype' parameter={this.state.reqData.dataType} isHidden={false} />\n                                    <PSetRequestParameterSelection parameterName='Dataset' parameter={this.state.reqData.dataset} isHidden={false} />\n                                    <PSetRequestParameterSelection parameterName='Drug Sensitivity' parameter={this.state.reqData.drugSensitivity} isHidden={false} />\n                                    <PSetRequestParameterSelection parameterName='Genome' parameter={this.state.reqData.genome} /> \n                                    <PSetRequestParameterSelection parameterName='RNA Tool.' parameter={this.state.reqData.rnaTool} isHidden={this.state.hideRNAToolRef} /> \n                                    <PSetRequestParameterSelection parameterName='RNA Ref.' parameter={this.state.reqData.rnaRef} isHidden={this.state.hideRNAToolRef} />  \n                                    <PSetRequestParameterSelection parameterName='DNA Tool.' parameter={this.state.reqData.dnaTool} isHidden={this.state.hideRNAToolRef} /> \n                                    <PSetRequestParameterSelection parameterName='DNA Ref.' parameter={this.state.reqData.dnaRef} isHidden={this.state.hideDNAToolRef} />    \n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default PSetRequest;","import React from 'react';\n\nimport Plotly from \"plotly.js-basic-dist\";\nimport createPlotlyComponent from \"react-plotly.js/factory\";\nconst Plot = createPlotlyComponent(Plotly);\n\nclass DownloadChart extends React.Component{\n    render() {\n        let value = this.props.data.value;\n        let name = this.props.data.name;\n        \n        return (\n          <Plot\n            data={[\n                {\n                    type: 'bar', \n                    x: value, \n                    y: name, \n                    orientation: 'h', \n                    marker: {color: '#3D405A'}\n                },\n            ]}\n            layout={ {\n                autosize: true,\n                title: this.props.title, \n                yaxis: {autorange: 'reversed'}, \n                titlefont: {size: 18, color: '#3D405A'}, \n                font:{color: '#3D405A'}\n            } }\n            style = {{width: \"100%\"}}\n            useResizeHandler = {true}\n          />\n        );\n    }\n}\n\nexport default DownloadChart;","import React from 'react';\nimport './Stats.css';\nimport Navigation from '../Navigation/Navigation';\nimport {Messages} from 'primereact/messages';\nimport PSetTable from '../Shared/PSetTable';\nimport SavePSetButton from '../Shared/Buttons/SavePSetButton';\n//import DownloadPSetButton from '../Shared/Buttons/DownloadPSetButton';\nimport * as APICalls from '../Shared/APICalls';\nimport * as APIHelper from '../Shared/PSetAPIHelper';\nimport {AuthContext} from '../../context/auth';\nimport DownloadChart from './DownloadChart';\n\nclass Stats extends React.Component{\n    constructor(){\n        super();\n        this.state = {\n            allData: [],\n            chartData: {},\n            selectedPSets: [],\n            disableBtn: true,\n            isReady: false\n        }\n        this.updatePSetSelection = this.updatePSetSelection.bind(this);\n        this.showMessages = this.showMessages.bind(this);\n        this.initializeState = this.initializeState.bind(this);\n    }\n\n    static contextType = AuthContext;\n\n    componentDidMount(){\n        APICalls.queryPSet('/pset/sort', (resData) => {\n            const data = [];\n            const name = [];\n            const value = [];\n            for(let i = 0; i < resData.length; i++){\n                data.push({name: resData[i].name, value: resData[i].download});\n                name.push(resData[i].name);\n                value.push(resData[i].download);\n                if(i >= 9){\n                    break;\n                }\n            }\n            this.setState({\n                allData: resData,\n                chartData: {data: data, name: name, value: value},\n                isReady: true\n            });\n        });\n    }\n\n    updatePSetSelection(selected){\n        this.setState({selectedPSets: selected}, () => {\n            if(APIHelper.isSelected(this.state.selectedPSets)){\n                this.setState({disableBtn: false});\n            }else{\n                this.setState({disableBtn: true});\n            }\n        });\n    }\n\n    showMessages(status, data){\n        APIHelper.messageAfterRequest(status, data, this.initializeState, this.messages);\n        APICalls.queryPSet('/pset/sort', (resData) => {\n            this.setState({\n                allData: resData\n            });\n        });\n    }\n\n    initializeState(){\n        this.setState({\n            selectedPSets: [],\n            disableBtn: true\n        });\n    }\n    \n    render(){\n        return(\n            <React.Fragment>\n                <Navigation routing={this.props} />\n                <div className='pageContent'>\n                    <h1>PSet Usage and Downloads</h1>\n                    <div className='statContainer'>\n                        <div className='container rankingTable'>\n                            <h3>Download Ranking</h3>\n                            <Messages ref={(el) => this.messages = el} />\n                            <PSetTable allData={this.state.allData} selectedPSets={this.state.selectedPSets} updatePSetSelection={this.updatePSetSelection} showDownload={true} scrollHeight='340px'/>\n                            <div className='rankingTableFooter'>\n                                {/* <DownloadPSetButton selectedPSets={this.state.selectedPSets} disabled={this.state.disableBtn} onDownloadComplete={this.showMessages}/> */}\n                                <SavePSetButton selectedPSets={this.state.selectedPSets} disabled={this.state.disableBtn} onSaveComplete={this.showMessages} />\n                            </div>\n                        </div>\n                        <div className='container downloadHistogram'>\n                            {this.state.isReady && <DownloadChart data={this.state.chartData} title='Number of Downloads' />}\n                        </div>\n                    </div>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default Stats;","import React from 'react';\nimport './Contact.css';\nimport Navigation from '../Navigation/Navigation';\n\nclass Contact extends React.Component{\n\n    render(){\n        return(\n            <React.Fragment>\n                <Navigation routing={this.props} />\n                <div className='pageContent'>\n                    <h1>Contact Us</h1>\n                </div>\n            </React.Fragment>\n        );\n    }\n\n}\n\nexport default Contact;","import React from 'react';\nimport './UserInfo.css'\nimport {Button} from 'primereact/button';\nimport {AuthContext} from '../../../context/auth';\n\nclass UserInfo extends React.Component{\n    \n    constructor(){\n        super();\n        this.state = {\n            user: {}\n        }\n        this.showModal = this.showModal.bind(this);\n        this.hideModal = this.hideModal.bind(this);\n    }\n\n    static contextType = AuthContext;\n\n    componentDidMount(){\n        fetch('/user/?username=' + this.context.username)\n            .then(res => res.json())\n            .then(user => this.setState({user: user}));\n    }\n\n    showModal(){\n\n    }\n\n    hideModal(){\n\n    }\n    \n    render(){\n        return(\n            <div className='userInfoContainer'>\n                <h2>User Information</h2>\n                <div className='userInfo'>Username: {this.state.user.username}</div>\n                <div className='userInfoBtn'>\n                    <Button label='Change User Settings' onClick={this.showModal} />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default UserInfo;","import React from 'react';\nimport {Button} from 'primereact/button';\nimport * as APICalls from '../APICalls';\n\nclass DownloadPSetButton extends React.Component{\n    constructor(){\n        super();\n        this.downloadPSets = this.downloadPSets.bind(this);\n    }\n\n    downloadPSets = event => {\n        event.preventDefault();\n        const psets = this.props.selectedPSets;\n        \n        const link = document.createElement('a');\n        link.setAttribute('download', null);\n        link.style.display = 'none';\n        document.body.appendChild(link);\n        for(let i = 0; i < psets.length; i++){\n            if(psets[i].downloadLink){\n                link.setAttribute('href', psets[i].downloadLink)\n                link.click();\n            } \n        }\n        document.body.removeChild(link);\n\n        APICalls.downloadPSets(this.props.selectedPSets, (status, data) => {\n            //this.props.onDownloadComplete(status, data);\n        });\n    }\n\n    render(){\n        return(\n            <Button className='downloadBtn' label='Download' disabled={this.props.disabled} onClick={this.downloadPSets} />\n        );\n    }\n}\n\nexport default DownloadPSetButton;","import React from 'react';\nimport PSetTable from '../../Shared/PSetTable';\nimport {Button} from 'primereact/button';\nimport DownloadPSetButton from '../../Shared/Buttons/DownloadPSetButton';\nimport {Dialog} from 'primereact/dialog';\nimport * as APIHelper from '../../Shared/PSetAPIHelper';\nimport './UserPSet.css';\n\nclass UserPSet extends React.Component{\n    \n    constructor(){\n        super();\n        this.state = {\n            selectedPSets: [],\n            btnDisabled: true,\n            dialogVisible: false,\n            btnYesDislabed: false\n        }\n        this.handleBtnClick = this.handleBtnClick.bind(this);\n        this.handleSelectionChange = this.handleSelectionChange.bind(this);\n        this.onClickYes = this.onClickYes.bind(this);\n        this.onHide = this.onHide.bind(this);\n        this.showMessages = this.showMessages.bind(this);\n    }\n\n    handleSelectionChange(selected){\n        this.setState({selectedPSets: selected}, () => {\n            if(this.state.selectedPSets && this.state.selectedPSets.length > 0){\n                this.setState({btnDisabled: false});\n            }else{\n                this.setState({btnDisabled: true});\n            }\n        });\n    }\n\n    handleBtnClick = event => {\n        this.setState({dialogVisible: true});\n    }\n\n    showMessages(status, data){\n        APIHelper.messageAfterRequest(status, data, null, this.props.messages);\n    }\n\n    onClickYes(){\n        this.setState({\n            btnDisabled: true,\n            btnYesDislabed: true\n        });\n        this.props.handleBtnClick(this.state.selectedPSets, (err)=>{\n            if(!err){\n                this.setState({\n                    selectedPSets: [],\n                    dialogVisible: false,\n                });\n            }else{\n                this.setState({btnDisabled: false});\n            }   \n        });\n    }\n    \n    onHide(){\n        this.setState({\n            dialogVisible: false,\n            btnYesDislabed: false\n        });\n    }\n    \n    render(){\n\n        const psetData = (\n            <React.Fragment>\n                <div>\n                    <PSetTable allData={this.props.pset} selectedPSets={this.state.selectedPSets} updatePSetSelection={this.handleSelectionChange} scrollHeight='350px' pending={this.props.pending}/>\n                </div>\n                <div className='footer'>\n                { this.props.pending ? '' : \n                    <DownloadPSetButton selectedPSets={this.state.selectedPSets} disabled={this.state.btnDisabled} onDownloadComplete={this.showMessages}/>\n                } \n                <Button label={this.props.btnLabel} onClick={this.handleBtnClick} disabled={this.state.btnDisabled} />\n                </div>\n            </React.Fragment>\n        );\n\n        const noPSetData = (\n            <p>No data available.</p>\n        );\n\n        const dialogFooter = (\n            <div>\n                <Button label=\"Yes\" onClick={this.onClickYes} disabled={this.state.btnYesDislabed}/>\n                <Button label=\"Cancel\" onClick={this.onHide} />\n            </div>\n        );\n        \n        return(\n            <div className='userPSet'>\n                <h2>{this.props.heading}</h2>\n                <div className='userPSetContent'>\n                    {this.props.pset ? psetData : noPSetData}\n                </div>\n                <div>\n                    <Dialog header={this.props.pending? 'Canceling PSet Request(s)' : 'Removing Pset(s)' } footer={dialogFooter} visible={this.state.dialogVisible} style={{width: '300px'}} modal={true} onHide={this.onHide}>\n                        { this.props.pending ? 'Are you sure you would like to cancel the selected PSet request(s)?' : 'Are you sure you would like to remove the selected PSet(s) from the saved list?' }\n                    </Dialog>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default UserPSet;","import React from 'react';\nimport './Profile.css';\nimport Navigation from '../Navigation/Navigation'\nimport UserInfo from './subcomponents/UserInfo';\nimport UserPSet from './subcomponents/UserPSet';\nimport {Messages} from 'primereact/messages';\nimport {AuthContext} from '../../context/auth';\nimport * as APIHelper from '../Shared/PSetAPIHelper';\n\nclass Profile extends React.Component{\n\n    constructor(){\n        super();\n        this.state = {\n            username: '',\n            userEmail: '',\n            psetSaved: [],\n            psetInProcess: []\n        }\n        this.removeFromSavedList = this.removeFromSavedList.bind(this);\n        this.cancelPSetRequest = this.cancelPSetRequest.bind(this);\n        this.findPSetByID = this.findPSetByID.bind(this);\n        this.removePSetByID = this.removePSetByID.bind(this);\n    }\n\n    static contextType = AuthContext;\n\n    componentDidMount(){\n        fetch('/user/pset/?username=' + this.context.username)  \n            .then(res => res.json())\n            .then(resData => {\n                let complete = [];\n                let pending = [];\n                for(let i = 0; i < resData.length; i++){\n                    if(resData[i].status === 'complete'){\n                        complete.push(resData[i]);\n                    }else{\n                        pending.push(resData[i]);\n                    }\n                }\n                this.setState({\n                    psetSaved: complete,\n                    psetInProcess: pending\n                });\n            });\n    }\n\n    removeFromSavedList = (selectedPSet, callback) => {\n        var psetID = []\n        for(let i = 0; i < selectedPSet.length; i++){\n            psetID.push(selectedPSet[i]._id);\n        }\n        fetch('/user/pset/remove', {\n            method: 'POST',\n            body: JSON.stringify({username: this.context.username, psetID: psetID}),\n            headers: {\n                'Content-type': 'application/json'\n            }\n        })\n            .then(res => res.json())\n            .then(resData => {\n                APIHelper.messageAfterRequest(1, resData, null, this.messages);\n                var saved = this.state.psetSaved;\n                saved = this.removePSetByID(saved, psetID);\n                this.setState({psetSaved: saved}, callback(0));\n            })\n            .catch(err => {\n                APIHelper.messageAfterRequest(0, err, null, this.messages);\n                callback(1);\n            });\n    }\n\n    cancelPSetRequest = (selectedPSet, callback) => {\n        var psetID = []\n        for(let i = 0; i < selectedPSet.length; i++){\n            psetID.push(selectedPSet[i]._id);\n        }\n        fetch('/pset/cancel', {\n            method: 'POST',\n            body: JSON.stringify({username: this.context.username, psetID: psetID}),\n            headers: {\n                'Content-type': 'application/json'\n            }\n        })\n            .then(res => res.json())\n            .then(resData => {\n                APIHelper.messageAfterRequest(1, resData, null, this.messages);\n                var inProcess = this.state.psetInProcess;\n                inProcess = this.removePSetByID(inProcess, psetID);\n                this.setState({psetInProcess: inProcess}, callback(0));\n            })\n            .catch(err => {\n                APIHelper.messageAfterRequest(0, err, null, this.messages);\n                callback(1);\n            });\n    }\n\n    findPSetByID(psetArray, id){\n        for(let i = 0; i < psetArray.length; i++){\n            if(psetArray[i]._id === id){\n                return(i)\n            }\n        }\n        return(-1);\n    }\n\n    removePSetByID(psets, selected){\n        for(let i = 0; i < selected.length; i++){\n            let index = this.findPSetByID(psets, selected[i]);\n            if(index > -1){\n                psets.splice(index, 1);\n            }\n        }\n        return(psets);\n    }\n\n    render(){   \n        return(\n            <React.Fragment>\n                <Navigation routing={this.props}/>\n                <div className='pageContent'>\n                    <h1>Your Profile</h1>\n                    <div className='userProfile'>\n                        <UserInfo />\n                        <div className='userPSetLists'>\n                            <Messages ref={(el) => this.messages = el} />\n                            <UserPSet heading='Your Saved PSets' btnLabel='Remove from List' \n                                pset={this.state.psetSaved} \n                                handleBtnClick={this.removeFromSavedList}\n                                messages={this.messages}\n                            />\n                            <UserPSet heading='Your PSet Requests in Process' btnLabel='Cancel Request' \n                                pset={this.state.psetInProcess} \n                                pending={true}\n                                handleBtnClick={this.cancelPSetRequest}\n                            />\n                        </div>\n                    </div>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default Profile;","import React from 'react';\nimport Navigation from '../Navigation/Navigation';\nimport { Redirect } from 'react-router-dom';\nimport {Button} from 'primereact/button';\nimport {InputText} from 'primereact/inputtext';\nimport {Messages} from 'primereact/messages';\nimport {AuthContext} from '../../context/auth';\nimport './Login.css';\n\n\nclass Login extends React.Component{\n    \n    constructor(){\n        super();\n        this.state = {\n            email: '',\n            password: '',\n            passwordReg1: '',\n            passwordReg2: '',\n            userChecked: false,\n            userExists: false,\n            userRegistered: false,\n            btnFindDisabled: true,\n            btnLoginDisabled: true,\n            btnRegDisabled: true\n        }\n        this.initializeState = this.initializeState.bind(this);\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.onFindClick = this.onFindClick.bind(this);\n        this.onLoginClick = this.onLoginClick.bind(this);\n        this.onRegisterClick = this.onRegisterClick.bind(this);\n        this.loginForm = this.loginForm.bind(this);\n        this.registerForm = this.registerForm.bind(this);\n        this.renderForm = this.renderForm.bind(this);\n    }\n\n    static contextType = AuthContext;\n\n    initializeState(){\n        this.setState({\n            email: '',\n            password: '',\n            passwordReg1: '',\n            passwordReg2: '',\n            userChecked: false,\n            userExists: false,\n            userRegistered: false,\n            btnFindDisabled: true,\n            btnLoginDisabled: true,\n            btnRegDisabled: true\n        });\n    }\n\n    handleInputChange(event){\n        var name = event.target.name;\n        this.setState({[name]: event.target.value}, () => {\n            switch(name){\n                case 'email':\n                    const regex = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/;\n                    if(regex.test(this.state.email)){\n                        this.setState({btnFindDisabled: false});\n                    }else{\n                        this.setState({btnFindDisabled: true});\n                    }\n                    break;\n                case 'password':\n                    if(this.state.password.length >= 6){\n                        this.setState({btnLoginDisabled: false});\n                    }else{\n                        this.setState({btnLoginDisabled: true});\n                    }\n                    break;\n                case 'passwordReg1':\n                    if(this.state.passwordReg1.length >= 6){\n                        if(this.state.passwordReg1 === this.state.passwordReg2){\n                            this.setState({btnRegDisabled: false});\n                        }\n                    }else{\n                        this.setState({btnRegDisabled: true});\n                    }\n                    break;\n                case 'passwordReg2':\n                    if(this.state.passwordReg2.length >= 6){\n                        if(this.state.passwordReg1 === this.state.passwordReg2){\n                            this.setState({btnRegDisabled: false});\n                        }\n                    }else{\n                        this.setState({btnRegDisabled: true});\n                    }\n                    break;\n                default:\n                    break;\n            }\n        });\n    }\n\n    onFindClick = event => {\n        event.preventDefault();\n        var api = 'user/check/?username=' + this.state.email;\n        fetch(api)\n            .then(res => res.json())\n            .then(resData => {\n                this.setState({\n                    userChecked: true,\n                    userExists: resData.exists,\n                    userRegistered: resData.registered\n                });\n            });\n    }\n\n    onLoginClick = event => {\n        event.preventDefault();\n        fetch('/user/login', {\n            method: 'POST',\n            body: JSON.stringify({\n                user: {\n                   username: this.state.email,\n                   password: this.state.password \n                }   \n            }),\n            headers: {\n                'Content-type': 'application/json'\n            }\n        })\n        .then(res => res.json())\n        .then(data => {\n            if(data.authenticated){\n                console.log('authenticated');\n                this.initializeState();\n                this.context.setAuthToken(data);\n            }else{\n                this.messages.show({severity: 'error', summary: 'Login Failed', detail: 'Please re-enter your email and password.'});\n            }\n        });\n    }\n\n    onRegisterClick = event => {\n        event.preventDefault();\n        fetch('/user/register', {\n            method: 'POST',\n            body: JSON.stringify({\n                user: {\n                    username: this.state.email,\n                    password: this.state.passwordReg1,\n                    exists: this.state.userExists\n                }\n            }),\n            headers: {\n                'Content-type': 'application/json'\n            }\n        })\n        .then(res => res.json())\n        .then(data => {\n            if(data.status){\n                this.initializeState();\n                this.context.setAuthToken({authenticated: data.authenticated, username: data.username});\n            }else{\n                this.messages.show({severity: 'error', summary: 'Registration Failed', detail: 'Please try again.'});\n            }\n        });\n    }\n\n    loginForm(){\n        return(\n            <React.Fragment>\n                <h4>Login with your password:</h4>\n                <div className='pwdMsg'>Password needs to be at least 6 characters in length</div>\n                <InputText className='pwdInput' type='password' name='password' value={this.state.password} onChange={this.handleInputChange}/>\n                <div>\n                    <Button label='Login' onClick={this.onLoginClick} disabled={this.state.btnLoginDisabled}/>\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    registerForm(){\n        return(\n            <React.Fragment>\n                <h4>{this.state.userExists ? 'Email is not registered. ': 'Email not found. '}Please register.</h4>\n                <div>\n                    <div className='pwdMsg'>Password needs to be at least 6 characters in length</div>\n                    <InputText className='pwdInput' type='password' name='passwordReg1' value={this.state.passwordReg1} onChange={this.handleInputChange}/>\n                </div>\n                <div>\n                    <label>Confirm your password:</label>\n                    <InputText className='pwdInput' type='password' name='passwordReg2' value={this.state.passwordReg2} onChange={this.handleInputChange}/>\n                </div>\n                <div>\n                    <Button label='Register' onClick={this.onRegisterClick} disabled={this.state.btnRegDisabled}/>\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    renderForm(){\n        if(this.state.userChecked){\n            return(\n                <div className='formContainer'>\n                    {this.state.userRegistered ? this.loginForm() : this.registerForm()}\n                </div>\n            );\n        }\n        return('');\n    }\n    \n    render(){     \n        const msg = this.props.location.state.logoutMsg;\n        return(\n            <React.Fragment>\n                <Navigation routing={this.props} />\n                {this.context.authenticated ? <Redirect to={this.props.location.state.path}/> : \n                    <div className='mainContent'>\n                        <div className=\"loginRegContent\">\n                            <div className='logoutMsg'>{msg ? msg : ''}</div>\n                            <h2>Login/Register</h2>\n                            <Messages ref={(el) => this.messages = el}></Messages>\n                            <h4>Enter your email:</h4>\n                            <div className='emailInput'>\n                                <InputText type='email' name='email' value={this.state.email} onChange={this.handleInputChange}/>\n                                <Button className='btnLoginFind' label='Find' icon=\"pi pi-arrow-right\" onClick={this.onFindClick} disabled={this.state.btnFindDisabled}/>\n                            </div>\n                            {this.renderForm()}\n                        </div>   \n                    </div>\n                }\n            </React.Fragment>\n        );\n    }\n}\n\nexport default Login;","import React from 'react';\nimport {Accordion,AccordionTab} from 'primereact/accordion';\n\nclass PSetToolAccordion extends React.Component {\n\n    render(){\n        const toolAccordionTabs = this.props.items.map((item) => \n            <AccordionTab key={item.name} header={item.name}>\n                {item.commands.length ? \n                    <ul>\n                        {item.commands.map((command) => \n                            <li key={command}>\n                                {command}\n                            </li>    \n                        )}\n                    </ul>\n                    :\n                    \"Not Available\"\n                }\n                   \n            </AccordionTab>\n        );\n        \n        return(\n            this.props.items.length ? \n                <Accordion multiple={true}>\n                    {toolAccordionTabs}\n                </Accordion>\n                :\n                <div className='subContent'>Not Available</div>\n        );\n    }\n\n}\n\nclass RNARefAccordion extends React.Component {\n    \n    render(){\n        const rnaRefAccordionTabs = this.props.items.map((item) => \n            <AccordionTab key={item.name} header={item.name}>\n                <ul>\n                    <li className='listItem-1'>\n                        <div>{item.name.length ? item.name : 'Currently not available'}</div>\n                        <div>{item.source.length ? <a href={item.source}>{item.source}</a> : 'Currently not available'}</div>\n                    </li>                    \n                </ul> \n            </AccordionTab>\n        );\n    \n        return(\n            this.props.items.length ? \n                <Accordion multiple={true}>\n                    {rnaRefAccordionTabs}\n                </Accordion>\n                :\n                <div className='subContent'>Not Available</div>\n        );\n    }\n    \n}\n\nclass DNARefAccordion extends React.Component {\n\n    render(){\n        const exomeRefAccordionTabs = this.props.items.map((item) => \n            <AccordionTab key={item.name} header={item.name}>\n                <ul>\n                    <li className='listItem-1'>\n                        <div>{item.name.length ? item.name: 'Currently not available'}</div>\n                        <div>{item.source.length ? <a href={item.source}>{item.source}</a> : 'Currently not available'}</div>\n                    </li>\n                    <li className='listItem-1'>\n                        <div>{item.cosmic.name}</div>\n                        <div><a href={item.cosmic.source}>{item.cosmic.source}</a> </div>\n                    </li>\n                    <li className='listItem-1'>\n                        <div>{item.exonTarget.name}</div>\n                        <div><a href={item.exonTarget.source}>{item.exonTarget.source}</a></div>\n                    </li>                       \n                </ul> \n            </AccordionTab>\n        );\n    \n        return(\n            this.props.items.length ? \n                <Accordion multiple={true}>\n                    {exomeRefAccordionTabs}\n                </Accordion>\n                :\n                <div className='subContent'>Not Available</div>\n        );\n    }\n\n}\n\nclass GeneralInfoAccordion extends React.Component {\n    render(){   \n        return(\n            <Accordion className='generalInfoAccordion'>\n                <AccordionTab header=\"General Information\">\n                    <h4 className='subContent'>PSet Name: {this.props.data.name}</h4>\n                    <h4 className='subContent'>Date Created: {this.props.data.dateCreated}</h4>\n                    {this.props.data.createdBy && <h4 className='subContent'>Created By {this.props.data.createdBy}</h4>}\n                </AccordionTab>    \n            </Accordion>    \n        );\n    }\n}\n\nexport {\n    PSetToolAccordion,\n    RNARefAccordion,\n    DNARefAccordion,\n    GeneralInfoAccordion\n}\n","import React from 'react';\n\nclass DatasetTabContent extends React.Component{\n\n    render(){          \n        const publication = (\n            <div>    \n            {this.props.metadata.dataset.publication.length ? \n                this.props.metadata.dataset.publication.map((item) => \n                    <li key={item.link} className='pubList'>\n                        <div className='subContent'>{item.citation}</div>\n                        <br />\n                        <div className='subContent'><a href={item.link}>{item.link}</a></div>\n                    </li>\n                )\n                :\n                <div className=\"subContent\">\n                    Not available.\n                </div>\n                }  \n            </div> \n        );\n        \n        return(\n            <React.Fragment>\n                <h1 className='tabMainHeader'>Dataset: {this.props.metadata.dataset.label}</h1>\n                <div className='tabContent'>\n                    <div className='tabContentSection'>\n                        <h3>Publication: </h3>\n                        <ul>\n                            {publication}\n                        </ul> \n                    </div>\n                    <div className='tabContentSection'>\n                        <h3>Drug Sensitivity</h3>\n                        <h4 className='subContent'>Source: {this.props.metadata.drugSensitivity.source ? <a href={this.props.metadata.drugSensitivity.source}>{this.props.metadata.drugSensitivity.source}</a> : 'Not available'}</h4>\n                        <h4 className='subContent'>Version: {this.props.metadata.drugSensitivity.version}</h4>\n                    </div>\n                    <div className='tabContentSection'>\n                        <h3>Genome Version</h3>\n                        <div className='subContent'>{this.props.metadata.genome.name ? this.props.metadata.genome.name : \"Not Available\"}</div>\n                    </div>\n                </div> \n            </React.Fragment>\n        );\n    }\n}\n\nexport default DatasetTabContent;","import React from 'react';\nimport {PSetToolAccordion, RNARefAccordion} from '../PSetAccordion';\n\nclass RNATabContent extends React.Component{\n    \n    render(){   \n        const genomeRawData = (   \n            <div>\n                { this.props.metadata.rawSeqDataRNA ? <a href={this.props.metadata.rawSeqDataRNA}>{this.props.metadata.rawSeqDataRNA}</a> : 'Not Available' }\n            </div>\n        );\n\n        return(\n            <React.Fragment>\n                <h1 className='tabMainHeader'>Analysis Details - RNA Data</h1>\n                <div className='tabContent'>\n                    <div className='tabContentSection'>\n                        <h3>Raw Data Source: </h3>\n                        <div className='subContent'>\n                            {genomeRawData}\n                        </div>\n                    </div>\n                    <div className='tabContentSection'>\n                        <h3>RNA Transcriptome</h3>\n                        <RNARefAccordion items={this.props.metadata.rnaRef} />\n                    </div>\n                    <div className='tabContentSection'>\n                        <h3>Tools and Commands Used</h3>\n                        <PSetToolAccordion items={this.props.metadata.rnaTool} />\n                    </div>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default RNATabContent;","import React from 'react';\nimport {PSetToolAccordion, DNARefAccordion} from '../PSetAccordion';\n\nclass DNATabContent extends React.Component{\n    \n    render(){  \n        const genomeRawData = (\n            <div>\n                { this.props.metadata.rawSeqDataDNA ? <a href={this.props.metadata.rawSeqDataDNA}>{this.props.metadata.rawSeqDataDNA}</a> : 'Not Available' }\n            </div>\n        );\n\n        return(\n            <React.Fragment>\n                <h1 className='tabMainHeader'>Analysis Details - DNA(Exome) Data</h1>\n                <div className='tabContent'>\n                    <div className='tabContentSection'>\n                        <h3>Raw Data Source: </h3>\n                        <div className='subContent'>\n                            {genomeRawData}\n                        </div>\n                    </div>\n                    <div className='tabContentSection'>\n                        <h3>Exome Reference</h3>\n                        <DNARefAccordion items={this.props.metadata.dnaRef} />\n                    </div>\n                    <div className='tabContentSection'>\n                        <h3>Tools and Commands Used</h3>\n                        <PSetToolAccordion items={this.props.metadata.dnaTool} />\n                    </div>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default DNATabContent;","import React from 'react';\nimport './PSet.css';\nimport Navigation from '../Navigation/Navigation';\nimport {TabView,TabPanel} from 'primereact/tabview';\nimport * as APICalls from '../Shared/APICalls';\nimport {GeneralInfoAccordion} from './PSetAccordion';\nimport DatasetTabContent from './TabContents/DatasetTabContent';\nimport RNATabContent from './TabContents/RNATabContent';\nimport DNATabContent from './TabContents/DNATabContent';\nimport * as APIHelper from '../Shared/PSetAPIHelper';\nimport DownloadPSetButton from '../Shared/Buttons/DownloadPSetButton';\nimport {Messages} from 'primereact/messages';\n\nclass PSet extends React.Component{\n    constructor(){\n        super();\n        this.state = {\n            pset: {},\n            general: {},\n            dataset: {},\n            rna: {},\n            dna: {},\n            isReady: false,\n            message: ''\n        }\n        this.showMessage = this.showMessage.bind(this);\n    }\n\n    componentDidMount(){\n        console.log(this.props.match.params.id1 + '/' + this.props.match.params.id2);\n        let apiStr = '/pset/one/' + this.props.match.params.id1 + '/' + this.props.match.params.id2;\n        console.log(apiStr);\n        APICalls.queryPSet(apiStr, (pset) => {\n            console.log(pset);\n            if(pset){\n                this.setState({\n                    pset: pset,\n                    general: {name: pset.name, createdBy: pset.createdBy, dateCreated: pset.dateCreated},\n                    dataset: {dataset: pset.dataset, genome: pset.genome, drugSensitivity: pset.drugSensitivity},\n                    rna: {rnaTool: pset.rnaTool, rnaRef: pset.rnaRef, rawSeqDataRNA: pset.dataset.rawSeqDataRNA},\n                    dna: {dnaTool: pset.dnaTool, dnaRef: pset.dnaRef, rawSeqDataDNA: pset.dataset.rawSeqDataDNA},\n                    isReady: true\n                });\n            }else{\n                this.setState({message: 'We could not find a PSet with the ID.'})\n            }\n        });\n    }\n\n    showMessage(status, data){\n        APIHelper.messageAfterRequest(status, data, this.initializeState, this.messages);\n    }\n\n    render(){\n        return(\n            <React.Fragment>\n                <Navigation routing={this.props} />\n                <div className='pageContent'>\n                    <Messages ref={(el) => this.messages = el} />\n                    <div className='psetTitle'>\n                        <h1>Explore PSet - {this.state.pset.name}</h1>\n                        <DownloadPSetButton disabled={false} selectedPSets={[this.state.pset]} onDownloadComplete={this.showMessage}/>\n                    </div>\n                    <GeneralInfoAccordion data={this.state.general}/>\n                    <div className='tabContainer'>\n                        {this.state.isReady ? \n                            <TabView renderActiveOnly={false}>\n                                <TabPanel header=\"Dataset\">\n                                    <DatasetTabContent metadata={this.state.dataset} />   \n                                </TabPanel>\n                                {this.state.pset.dataType.map((type) => \n                                    <TabPanel key={type.name} header={type.name}>\n                                        {type.name === 'RNA' ? \n                                            <RNATabContent metadata={this.state.rna}/> \n                                            : \n                                            <DNATabContent metadata={this.state.dna}/>\n                                        }\n                                    </TabPanel>)\n                                }\n                            </TabView>\n                            : \n                            <h3>{this.state.message}</h3>\n                        }\n                    </div>\n                </div> \n            </React.Fragment>\n        );\n    }\n}\n\nexport default PSet;","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport { AuthContext } from \"../../context/auth\";\nimport PrivateRoute from './PrivateRoute';\nimport App from '../App/App';\nimport PSetSearch from '../PSetSearch/PSetSearch';\nimport PSetRequest from '../PSetRequest/PSetRequest';\nimport Stats from '../Stats/Stats';\nimport Contact from '../Contact/Contact';\nimport Profile from '../Profile/Profile';\nimport Login from '../Authentication/Login';\nimport PSet from '../PSet/PSet';\n\nclass Router extends React.Component{\n    constructor(){\n        super();\n        this.state = {\n            authenticated: false,\n            user: '',\n            setAuthToken: (value) => {\n                this.setState({\n                    authenticated: value.authenticated,\n                    username: value.username\n                });\n            },\n            resetAuthToken: () => {\n                this.setState({\n                    authenticated: false,\n                    user: ''\n                });\n            }\n        }\n    }\n\n    componentDidMount(){\n        if(!this.state.authenticated){\n            fetch('/user/checkToken')\n            .then(res => {\n                if(res.status === 200){\n                    return(res.json());\n                }else{\n                    return({authenticated: false, username: ''});\n                }\n            })\n            .then(data => {this.state.setAuthToken(data)});\n        }\n    }\n\n    render(){\n        \n        const profile = (\n            <Profile />\n        );\n\n        return(\n            <AuthContext.Provider value={this.state}>\n                <BrowserRouter>\n                    <Switch>\n                        <Route exact path ='/' render={(props)=><App path='/' {...props} />} /> \n                        <Route exact path ='/PSetSearch' render={(props)=><PSetSearch path='/PSetSearch' {...props} />}/>\n                        {/* <Route exact path ='/PSetRequest' render={(props)=><PSetRequest path='/PSetRequest' {...props} />}/> */}\n                        <Route exact path ='/Stats' render={(props)=><Stats path='/Stats' {...props} />}/>\n                        <Route exact path ='/Contact' render={(props)=><Contact path='/Contact' {...props} />}/>\n                        <Route exact path='/Authentication' render={(props) => <Login {...props} />} />\n                        <Route path='/:id1/:id2' render={(props)=><PSet path='/:id1/:id2' {...props} />} />\n                        <PrivateRoute path='/Profile' component={profile} redirect='/Authentication' />\n                    </Switch>\n                </BrowserRouter>\n            </AuthContext.Provider>\n        );\n    }\n}\n\nexport default Router;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'primereact/resources/themes/nova-light/theme.css';\nimport 'primereact/resources/primereact.min.css';\nimport 'primeicons/primeicons.css';\nimport Router from './components/Routing/Router';\nimport * as serviceWorker from './components/serviceWorker';\n\nReactDOM.render(<Router />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}