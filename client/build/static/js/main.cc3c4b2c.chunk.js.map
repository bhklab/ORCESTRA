{"version":3,"sources":["context/auth.js","context/path.js","components/Navigation/StyledNavigation.js","components/Navigation/Navigation.js","components/Footer/Footer.js","components/Routing/PrivateRoute.js","components/Routing/AdminRoute.js","components/Main/MainStyle.js","components/Main/Main.js","components/PSet/PSetStyle.js","components/PSet/PSetAccordion.js","components/Main/MainDialog/PharmacogenomicsDialog.js","components/Main/DatasetMainContent/Pharmacogenomics.js","components/Main/DatasetMain.js","components/Shared/PSetDropdown.js","components/Shared/PSetCheckbox.js","components/PSetSearch/subcomponents/PSetFilter.js","components/PSetSearch/subcomponents/PSetRequestForm.js","components/Shared/PSetTable.js","components/Shared/Buttons/SavePSetButton.js","components/Shared/APICalls.js","components/Shared/Helper.js","components/PSetSearch/PSetSearch.js","components/Dashboard/Dashboard.js","components/Stats/UpsetPlot.js","components/Stats/DatasetChart.js","components/Stats/Stats.js","components/Documentation/DocFunctionality/Overview.js","components/Documentation/DocFunctionality/Search.js","components/Documentation/DocFunctionality/Request.js","components/Documentation/DocFunctionality/UserProfile.js","components/Documentation/DocFunctionality/DataContribution.js","components/Documentation/DocAPI/AvailablePSets.js","components/Documentation/DocAPI/PSetMetadata.js","components/Documentation/DocAPI/StatisticsAPI.js","components/Documentation/Documentation.js","components/Profile/subcomponents/UserInfo.js","components/Profile/subcomponents/UserPSet.js","components/Profile/Profile.js","components/Admin/Admin.js","components/Authentication/AuthForm.js","components/Authentication/Login.js","components/Authentication/Reset.js","components/PSet/TabContents/DatasetTabContent.js","components/PSet/TabContents/AccompanyDataTabContent.js","components/PSet/TabContents/RNATabContent.js","components/PSet/TabContents/DNATabContent.js","components/PSet/TabContents/PipelineTabContent.js","components/Shared/ReactDataTable/TableFilters.js","components/Shared/ReactDataTable/Pagination.js","components/Shared/ReactDataTable/ReactDataTable.js","components/PSet/TabContents/ReleaseNoteTableGroup.js","components/PSet/TabContents/ReleaseNoteTabContent.js","components/Shared/Buttons/DownloadPSetButton.js","components/PSet/PSet.js","components/CanonicalPSets/CanonicalPSets.js","components/Shared/NotFound404.js","components/Routing/Router.js","components/App/App.js","components/serviceWorker.js","index.js"],"names":["AuthContext","createContext","PathContext","StyledHeader","styled","header","props","isMain","withRouter","auth","useContext","path","useState","isOnline","setIsOnline","location","history","useEffect","a","fetch","status","json","checkStatus","onLoginClick","event","preventDefault","push","pathname","state","onLogoutClick","username","then","res","resetAuthToken","logoutMsg","datatype","length","exact","to","src","alt","className","Fragment","activeClassName","authenticated","label","onClick","width","isOpen","Footer","href","PrivateRoute","Component","component","rest","render","redirect","AdminRoute","console","log","isAdmin","from","Wrapper","div","HeaderGroup","DatasetHeaderGroup","Button","Row","Column","Item","Number","span","StyledBox","imgWidth","Main","setDatatype","DatatypeBox","title","disabled","text","TabContainer","TabHeader","h1","TabContent","TabContentSection","StyledAccordion","Accordion","PSetToolAccordion","toolAccordionTabs","this","items","map","item","key","name","commands","command","multiple","React","RNARefAccordion","rnaRefAccordionTabs","source","DNARefAccordion","exomeRefAccordionTabs","cosmic","exonTarget","GeneralInfoAccordion","doi","data","target","dateCreated","split","createdBy","DatasetDialog","datasetAccordionTabs","dataset","versions","version","drugSensitivity","publication","p","link","citation","visible","onHide","style","minWidth","RNADialog","renderActiveOnly","rna","tool","ref","DNADialog","dna","Pharmacogenomics","statsData","setStatsData","rnaTool","dnaTool","rnaRef","dnaRef","formData","setFormData","pending","inProcess","dashboard","setDashboard","datasetVisible","setDatasetVisible","rnaVisible","setRNAVisible","dnaVisible","setDNAVisible","api","form","versionCombo","i","pset","fetchData","showDialog","type","hideDialog","alignSelf","value","field","body","rowData","column","route","DatasetMain","match","FilterSet","PSetDropdown","dataTemplate","option","fontSize","margin","isHidden","selectOne","parameterName","id","optionLabel","selectedParameter","options","parameterOptions","onChange","handleUpdateSelection","filter","itemTemplate","placeholder","selectedItemTemplate","CheckBoxContainer","PSetCheckbox","inputId","checked","PSetFilter","context","SearchReqContext","formRef","useRef","paramRef","ready","setReady","current","drugSensOptions","disableDrugSensOptions","disableToolRefOptions","hideDataTypeOptions","filteredSensitivity","canonicalOnly","genome","dataType","defaultData","initialize","setOptionsOnDatasetSelection","dt","default","setDataTypeOptions","accRNA","accompanyRNA","acc","accDNA","accompanyDNA","concat","forEach","hide","find","setParameterOptions","restoreParameters","visibleOptions","setDrugSensParamOptions","Array","isArray","v","some","drug","isRequest","tooltip","e","request","ds","unavailable","tools","JSON","parse","stringify","shift","setIsRequest","setParameters","search","requestToggleOn","g","onDatasetSelectionSearch","marginLeft","fontWeight","Math","random","RequestForm","LoaderContainer","PSetRequestForm","submitRequest","parameters","versionInfo","reqData","Object","keys","constructor","trackPromise","method","headers","resData","onRequestComplete","ok","email","usePromiseTracker","promiseInProgress","color","height","readyToSubmit","PSetTable","rows","first","start","end","totalRecords","loading","setState","toolsRefTemplate","psets","selection","selectedPSets","onSelectionChange","updatePSetSelection","paginator","resizableColumns","columnResizeMode","scrollable","scrollHeight","selectionMode","textAlign","sortable","download","downloadLink","_id","psetID","anchor","document","createElement","setAttribute","display","appendChild","click","removeChild","SavePSetButton","saveSelectedPSets","callback","userPSet","psetId","catch","err","APICalls","onSaveComplete","bind","contextType","isSelected","reqParam","messageAfterRequest","msgComponent","show","severity","summary","detail","message","sticky","toString","url","response","PSetSearch","setPSets","searchAll","setSearchAll","setSelectedPSets","disableSaveBtn","setDisableSaveBtn","setReadyToSubmit","initializeView","Helper","copy","all","test","showMessage","messages","initializeState","Provider","el","selected","Dashboard","setData","setLoading","getData","result","onSubmit","dateTimeTemplate","dateTimeStr","Date","toLocaleString","undefined","dateStyle","timeStyle","d","button","Plot","createPlotlyComponent","Plotly","UpsetPlot","bars","layout","autosize","xaxis","showgrid","zeroline","showticklabels","range","yaxis","tickfont","size","t","b","l","r","showlegend","useResizeHandler","config","displayModeBar","points","DatasetChart","upsetData","setUpsetData","barData","setBarData","datasets","metricName","isReady","setIsReady","isPlotReady","setIsPlotReady","updateData","colors","j","setIndices","index","sets","x","fill","y","mode","marker","line","hoverinfo","names","symbol","barDatasets","sort","orientation","metric","params","findIndex","htmlFor","Stats","chartData","Overview","Search","Request","UserProfile","StyledTable","table","DocSection","DataContribution","exampleFilesTable","files","file","downloadFile","blob","AvailablePSets","PSetMetadata","StatisticsAPI","Documentation","section","setDisplay","UserInfo","setShow","password1","setPassword1","password2","setPassword2","btnResetDisabled","setBtnResetDisabled","resetPwd","user","password","setAuthToken","UserPSet","handleBtnClick","dialogVisible","btnDisabled","btnYesDislabed","handleSelectionChange","onClickYes","showMessages","psetData","allData","btnLabel","noPSetData","dialogFooter","heading","footer","modal","Profile","removeFromSavedList","selectedPSet","saved","psetSaved","removePSetByID","cancelPSetRequest","psetInProcess","userEmail","findPSetByID","complete","psetArray","splice","MenuContainer","Admin","setSelected","canonical","updateCanonicalPSets","AuthForm","setEmail","setPassword","passwordReg1","setPasswordReg1","passwordReg2","setPasswordReg2","userChecked","setUserChecked","userExists","setUserExists","userRegistered","setUserRegistered","btnFindDisabled","setBtnFindDisabled","btnLoginDisabled","setBtnLoginDisabled","btnRegDisabled","setBtnRegDisabled","handleInputChange","onFindClick","exists","registered","onRegisterClick","onResetClick","icon","msg","Reset","setBtnDisabled","token","DatasetTabContent","metadata","AccompanyDataTabContent","s","getType","RNATabContent","rawSeqDataRNA","DNATabContent","rawSeqDataDNA","PipelineContent","PipelineTabContent","commitID","transform","image","input","cross","git","left","right","headerTextAlign","cellPadding","cellTextAlign","StyledReleaseNotes","StyledMetricDataGroup","AdditionalInformation","ReleaseNoteTabContent","getMetricDataText","count","metricDataGroup","renderRow","renderDataRow","molDataTableRow","getMolDataName","available","noUpdates","releaseNotes","cellLines","drugs","experiments","molData","additional","rel","DownloadPSetButton","downloadPSet","StyledTitle","PSet","setPSet","error","setError","id1","id2","generalInfo","tabData","td","StyledContainer","NonCanonDiv","NonCannonTable","PSetContainer","CanonicalPSets","canonPSets","setCanonPSets","array","output","nameColumnTemplate","canonicals","nonCanonicals","nonCanonTable","NotFound404","Router","authToken","Login","App","ReactGA","pageview","window","Boolean","hostname","ReactDOM","getElementById","navigator","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.cc3c4b2c.chunk.js","sourcesContent":["import { createContext } from 'react';\n\nexport const AuthContext = createContext();","import { createContext } from 'react';\n\nexport const PathContext = createContext();","import styled from 'styled-components';\n\nexport const StyledHeader = styled.header`\n    top: 0%;\n    width:100%;\n    background-color:rgb(255,255,255, 0.7);\n    height:70px;\n    position: fixed;\n    z-index: 999;\n    img {\n        max-width: 100%;\n        max-height: 100%;\n        float: left;\n        margin-left: 100px;\n    }\n    a {\n        color:rgb(61, 64, 90);\n        font-size:14px;\n        padding-bottom:3px;\n        font-weight:bold;\n        transition: .2s ease-out;\n        :hover {\n            text-decoration:none;\n            color: #555975;\n            border-bottom:3px solid rgb(241, 144, 33);\n            transition: .2s ease-out;\n        }\n    }\n    .active-link{\n        text-decoration:none;\n        color: #555975;\n        border-bottom:3px solid rgb(241, 144, 33);\n    }\n    \n    .navBarContainer {\n        height: 100%;\n        float: right;\n        display: flex;\n    }\n    \n    .navbar {\n        margin-right: 100px;\n        width: ${props => (props.isMain ? '250px' : '890px')};\n        height: 100%;\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n    }\n    \n    .home-button {\n        color:rgb(61, 64, 90);\n        font-weight:bold;\n    }\n    \n    .home-button:hover {\n        cursor:pointer;\n    }\n    \n    .loggedIn{\n        position: absolute;\n        right: 0;\n        top: 2px;\n        z-index: 999;\n        margin-right: 100px;\n        font-size: 12px;\n        color: red;\n    }\n    \n    .loginGrowl .p-growl.p-growl-topright {\n        top: 90px;\n        right: 100px;\n    }\n    \n    .pachydermStatus {\n      display: flex;\n      align-items: center;\n      font-weight: bold;\n    }\n    \n    .pachydermStatus > .icon {\n      font-size: 25px;\n    }\n    \n    .pachydermStatus > .text {\n      font-size: 12px;\n    }\n    \n    .isOnline {\n      color: #0ea353;\n    }\n    \n    .isOffline {\n      color: #bb2003;\n    }\n\n    /*react-burger-nav style*/\n\n    /* Position and sizing of burger button */\n    .bm-burger-button {\n        position: fixed;\n        width: 36px;\n        height: 30px;\n        right: 36px;\n        top: 25px;\n    }\n    \n    /* Color/shape of burger icon bars */\n    .bm-burger-bars {\n        background: #3D405A;\n    }\n    \n    /* Color/shape of burger icon bars on hover*/\n    .bm-burger-bars-hover {\n        background: #555975;\n    }\n    \n    /* Position and sizing of clickable cross button */\n    .bm-cross-button {\n        height: 24px;\n        width: 24px;\n    }\n    \n    /* Color/shape of close button cross */\n    .bm-cross {\n        background: #3D405A;\n    }\n    \n    /*\n    Sidebar wrapper styles\n    Note: Beware of modifying this element as it can break the animations - you should not need to touch it in most cases\n    */\n    .bm-menu-wrap {\n        position: fixed;\n        height: 100%;\n    }\n    \n    /* General sidebar styles */\n    .bm-menu {\n        background: rgba(255, 255, 255, 0.7);\n        padding: 2.5em 1.5em 0;\n        font-size: 1.15em;\n    }\n    \n    /* Morph shape necessary with bubble or elastic */\n    .bm-morph-shape {\n        fill: #373a47;\n    }\n    \n    /* Wrapper for item list */\n    .bm-item-list {\n        /* color: #b8b7ad; */\n        padding: 0.8em;\n    }\n    \n    /* Individual item */\n    .bm-item {\n        display: inline-block;\n        margin-bottom: 20px;\n        text-align: left;\n    }\n    \n    /* Styling of overlay */\n    .bm-overlay {\n        background: rgba(61, 64, 90, 0.5);\n    }\n\n    @media only screen and (max-width: 1200px) {\n        .navbar {\n            display: none;\n        }\n\n        img {\n            margin-top: 10px;\n            margin-left: 30px;\n            max-width: 60px;\n            max-height: 60px;\n        }\n    }\n\n    @media only screen and (min-width: 1200px) {\n        .bm-burger-button {\n            display: none;\n        }\n\n        .bm-menu {\n            display: none;\n        }\n\n        .bm-cross {\n            display: none;\n        }\n    }\n`","import React, {useState, useEffect, useContext} from 'react';\nimport { NavLink } from 'react-router-dom';\nimport {Button} from 'primereact/button';\nimport {AuthContext} from '../../context/auth';\nimport {PathContext} from '../../context/path';\nimport { StyledHeader } from './StyledNavigation';\nimport { slide as Menu } from 'react-burger-menu';\nimport {withRouter} from 'react-router'\n\nconst Navigation = (props) => {\n\n    const auth = useContext(AuthContext);\n    const path = useContext(PathContext);\n\n    const [isOnline, setIsOnline] = useState(false);\n    const { location, history } = props\n\n    useEffect(() => {\n        const checkStatus = async () => {\n            const status = await fetch('/api/pachyderm/status');\n            const json = await status.json();\n            setIsOnline(json.isOnline);\n        }\n        checkStatus();\n    }, []);\n\n    const onLoginClick = (event) => {\n        event.preventDefault();\n        history.push({pathname: '/app/authentication', state:{path: location.pathname}});\n    }\n\n    const onLogoutClick = (event) => {\n        event.preventDefault();\n        fetch('/api/user/logout/:' + auth.username)\n            .then(res => {\n                auth.resetAuthToken();\n                history.push({pathname: '/app/authentication', state:{path: location.pathname, logoutMsg: 'You have logged out'}});\n            });            \n    }\n\n    return(\n        <StyledHeader isMain={path.datatype.length === 0} >\n            <NavLink exact to='/'><img src={process.env.PUBLIC_URL + \"/images/trumpet-orcestra.png\"} alt='' /></NavLink>\n            <div className='navBarContainer'>\n                <div className='navbar'>\n                    {\n                        path.datatype.length > 0 &&\n                        <React.Fragment>\n                            <div><NavLink exact to={`/${path.datatype}`} activeClassName='active-link'>Home</NavLink></div>\n                            <div><NavLink exact to={`/${path.datatype}/search`} activeClassName='active-link'>Search and Request</NavLink></div>\n                            <div><NavLink exact to={`/${path.datatype}/status`} activeClassName='active-link'>Request Status</NavLink></div>\n                            <div><NavLink exact to={`/${path.datatype}/stats`} activeClassName='active-link'>Statistics</NavLink></div>\n                            <div><NavLink exact to={`/${path.datatype}/documentation/overview`} activeClassName='active-link'>Documentation</NavLink></div>\n                        </React.Fragment>\n                    }\n                    { auth.authenticated && <div className='menu-item'><NavLink exact to=\"/app/profile\" activeClassName='active-link'>Profile</NavLink></div> }\n                    <div>\n                        {\n                            auth.authenticated ? <Button label='Logout' onClick={onLogoutClick}/> : <Button label='Login/Register' onClick={onLoginClick}/>\n                        }\n                    </div> \n                    <div>\n                        {\n                            isOnline ? \n                            <div className='pachydermStatus isOnline'>\n                                <div className='icon'><i className='pi pi-check'></i></div><div className='text'>Pachyderm is <br />online</div>\n                            </div> \n                            : \n                            <span className='pachydermStatus isOffline'>\n                                <div className='icon'><i className='pi pi-ban'></i></div><div className='text'>Pachyderm is <br />offline</div>\n                            </span>\n                        }\n                    </div>\n                </div>\n                <div className='burgerNav'>\n                    <Menu width={ 200 } isOpen={true} > \n                        {\n                            path.datatype.length > 0 &&\n                            <React.Fragment>\n                                <div className='menu-item'><NavLink exact to={`/${path.datatype}`} activeClassName='active-link'>Home</NavLink></div>\n                                <div className='menu-item'><NavLink exact to={`/${path.datatype}/search`} activeClassName='active-link'>Search and Request</NavLink></div>\n                                <div><NavLink exact to={`/${path.datatype}/status`} activeClassName='active-link'>Request Status</NavLink></div>\n                                <div><NavLink exact to={`/${path.datatype}/documentation/overview`} activeClassName='active-link'>Documentation</NavLink></div>\n                            </React.Fragment>\n                        }\n                        { auth.authenticated && <div className='menu-item'><NavLink exact to=\"/app/profile\" activeClassName='active-link'>Profile</NavLink></div> }\n                        <div className='menu-item'>\n                            {\n                                auth.authenticated ? \n                                <Button label='Logout' onClick={onLogoutClick}/> : <Button label='Login/Register' onClick={onLoginClick}/>\n                            }\n                        </div>\n                        <div>\n                            {isOnline ? \n                                <div className='pachydermStatus isOnline'>\n                                    <div className='icon'><i className='pi pi-check'></i></div><div className='text'>Pachyderm is <br />online</div>\n                                </div> \n                                : \n                                <span className='pachydermStatus isOffline'>\n                                    <div className='icon'><i className='pi pi-ban'></i></div><div className='text'>Pachyderm is <br />offline</div>\n                                </span>\n                            }\n                        </div>\n                    </Menu>\n                </div>   \n            </div>\n            <div className='loggedIn'>{auth.authenticated ? 'Logged in as: ' + auth.username : ''}</div> \n        </StyledHeader>\n    );\n}\n\nexport default withRouter(Navigation);","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport './Footer.css';\n\nconst Footer = () => {\n    return(\n        <div className='appFooter'>\n            <div className='footerContainer'>\n                <div className=\"footerMenu footerLinks\">\n                    <h3>Menu</h3>\n                    <NavLink exact to=\"/search\" >Search and Request</NavLink>\n                    <NavLink exact to=\"/dashboard\" >Request Status</NavLink>\n                    <NavLink exact to=\"/stats\" >Statistics</NavLink>\n                </div>\n                <div className=\"footerSupport footerLinks\">\n                    <h3>Support</h3>\n                    <NavLink exact to=\"/Documentation/overview\" >Documentation</NavLink>\n                    <NavLink exact to=\"/Documentation/datacontribution\" >Contributing your data</NavLink>\n                    <a href=\"https://github.com/bhklab\">GitHub</a>\n                    <a href=\"https://bhklab.ca/\">BHKLab</a>\n                </div>\n                <div className=\"footerContact\">\n                    <h3>BHKLab</h3>\n                    <div className='contactInfo'>\n                        The MaRS center\n                        <br />\n                        101 College St, Toronto ON\n                        {' '}\n                        <br />\n                        TMDT RM 11-310\n                    </div>\n                </div>\n            </div>\n        </ div>\n    );\n} \n\nexport default Footer;","import React, {useContext} from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport {AuthContext} from '../../context/auth';\n\nconst PrivateRoute = ({component: Component, ...rest}) => {\n    const auth = useContext(AuthContext)\n    return(\n        <Route {...rest} render={(props) => (\n            auth.authenticated === true\n            ? <Component {...props} />\n            :\n            <Redirect to={{pathname: rest.redirect, state:{path: props.location.pathname}}} />\n        )} />\n    ) \n}\n\nexport default PrivateRoute;","import React, {useContext} from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport {AuthContext} from '../../context/auth';\n\nconst AdminRoute = ({component: Component, ...rest}) => {\n    const auth = useContext(AuthContext)\n    console.log(rest)\n    console.log(auth)\n    return(\n        <Route {...rest} render={(props) => (\n            auth.isAdmin === true\n            ? <Component {...props} />\n            :\n            <Redirect to={{pathname: rest.redirect, state:{from: props.location}}} />\n        )} />\n    ) \n}\n\nexport default AdminRoute;","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n    width: 100%;\n    margin-left: auto;\n    margin-right: auto;\n    max-width: 1700px;\n    padding-top: 50px;\n    color:#3D405A;\n    min-height: 100vh;\n    padding-bottom: 170px;\n`\n\nexport const HeaderGroup = styled.div`\n    display: flex;\n    flex-direction: column;\n    h1 {\n        margin: auto;\n        text-align: left;\n        font-size: 100px;\n        color: #3D405A;\n    }\n    h2 {\n        margin: auto;\n        text-align: left;\n        font-weight: bold;\n        color: #3D405A;\n    }\n\n    @media only screen and (max-width: 700px) {\n        h1 {\n            font-size: 60px\n        }\n        h2 {\n            font-size: 24px;\n            text-align: center;\n        }\n    }\n`\n\nexport const DatasetHeaderGroup = styled.div`\n    display: flex;\n    flex-direction: column;\n    h1 {\n        margin: auto;\n        text-align: left;\n        font-size: 50px;\n        color: #3D405A;\n    }\n    h2 {\n        margin: auto;\n        text-align:left;\n        font-weight: bold;\n        color: #3D405A;\n    }\n`\n\nexport const Button = styled.a`\n    background-color: #3D405A;\n    border-radius: 5px;\n    border: none;\n    padding: 10px 10px;\n    color: white;\n    text-align: center;\n    text-decoration: none;\n    font-size: 14px;\n    font-weight: bold;\n    cursor: pointer;\n    margin-top: 30px;\n\n    :hover {\n        background-color: #555975;\n        color: rgb(241, 144, 33);\n    }\n`\n\nexport const Row = styled.div`\n    margin-top: 60px;\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: center;\n`\n\nexport const Column = styled.div`\n    flex: 28%;\n    max-width: 28%;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n\n    @media only screen and (max-width: 1000px) {\n        flex: 50%;\n        max-width: 100%;\n    }\n`\n\nexport const Item = styled.div`\n    background-color:rgb(255, 255, 255,0.5);\n    margin: 0px 10px 10px 10px;\n    padding: 10px 30px 30px 30px;\n    border-radius: 10px;\n    width: 95%;\n    min-height:200px;\n    min-width: 300px;\n\n    .content {\n        width: 100%;\n        margin-left: auto;\n        margin-right: auto;\n        p {\n            line-height: 1.5;\n        }\n    }\n\n    .line {\n        margin-bottom: 10px;\n        font-size: 16px;\n        height: 20%;\n        width: 95%;\n        margin-left: auto;\n        margin-right: auto;\n        display: flex;\n        align-items: center;\n    }\n\n    .link {\n        margin-top: 50px;\n    }\n`\n\nexport const Number = styled.span`\n    font-size: 70px;\n    font-weight: bold;\n    font-family: Arial, Helvetica, sans-serif;\n    width: 35%;\n    text-align: center;\n    button {\n        font-size: 75px;\n        font-weight: bold;\n        font-family: Arial, Helvetica, sans-serif;\n        color: #3D405A;\n        border: none;\n        background: none;\n        outline: none;\n        cursor: pointer;\n    }\n    button:hover {\n        color: #555975;\n    }\n`\n\n","import React, {useContext, useEffect} from 'react';\nimport {PathContext} from '../../context/path';\nimport * as MainStyle from './MainStyle';\nimport styled from 'styled-components';\n\nconst StyledBox = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    background-color:rgb(255, 255, 255,0.5);\n    margin: 0px 10px 10px 10px;\n    padding: 10px 30px 30px 30px;\n    border-radius: 10px;\n    width: 30%;\n    height: 250px;\n    min-width: 200px;\n    max-width: 370px;\n\n    .header {\n        height: 25%;\n        width: 90%;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        text-align: center;\n        font-size: 20px;\n        font-weight: bold;\n    }\n\n    button {\n        height: 75%;\n        border: none;\n        outline: none;\n        cursor: pointer;\n        background: none;\n\n        :hover .hover-cover {\n            opacity: 0.7;\n        }\n\n        :hover .hover-text {\n            display: block;\n        }\n    }\n\n    .btn-content {\n        position relative;\n        display: flex;\n        justify-content center;\n        align-items: center;\n    }\n\n    img {\n        width: ${props => (props.imgWidth)};\n        min-width: 130px;\n        margin: 10px;\n    }\n\n    .hover-cover {\n        position absolute;\n        width: 100%;\n        height: 100%;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        background-color: #ffffff;\n        border-radius: 5px;\n        opacity: 0;\n    }\n\n    .hover-text {\n        display: none;\n        position absolute;\n        font-size: 45px;\n        font-weight: bold;\n        color: #3D405A;\n    }\n\n    @media only screen and (max-width: 1000px) {\n        width: 60%;\n        min-width: 360px;\n    }\n`;\n\n\nconst Main = (props) => {\n\n    const path = useContext(PathContext);\n    const { history } = props;\n\n    useEffect(() => {\n        path.setDatatype('');\n    }, []);\n\n    const DatatypeBox = (props) => (\n            <StyledBox imgWidth={props.imgWidth}>\n                <div className='header'>{props.title}</div>\n                <button \n                    onClick={() => {\n                        path.setDatatype(props.datatype);\n                        history.push({pathname: `/${props.datatype}`});\n                    }}\n                    disabled={props.disabled}\n                >\n                    <div className='btn-content'>\n                        <img src={`/images/icons/${props.datatype}.png`} />\n                        <div className='hover-cover'></div>\n                        <div className='hover-text'>{props.text}</div>\n                    </div>\n                </button>\n            </StyledBox>\n    );\n\n    return (\n        <MainStyle.Wrapper>\n            <MainStyle.HeaderGroup>\n                <h1>ORCESTRA</h1>   \n                <h2>An orchestration platform for reproducing multimodal data</h2>\n            </MainStyle.HeaderGroup>\n            <MainStyle.Row>\n                <DatatypeBox title='Pharmacogenomics Data' datatype='pharmacogenomics' text='GO' imgWidth='45%' />\n                <DatatypeBox title='Toxicogenomics Data' datatype='toxicogenomics' text='Coming soon' disabled={true} imgWidth='70%'/>\n                <DatatypeBox title='Xenographic Pharmacogenomics Data' datatype='xenographt' text='Coming soon' disabled={true} imgWidth='80%'/>\n            </MainStyle.Row>  \n            <MainStyle.Row>\n                <DatatypeBox title='Metagenomics Data' datatype='metagenomics' text='Coming soon' disabled={true} imgWidth='45%'/>\n                <DatatypeBox title='Radiogenomics Data' datatype='radiogenomics' text='Coming soon' disabled={true} imgWidth='45%'/>\n            </MainStyle.Row>\n        </MainStyle.Wrapper>\n    );\n    \n}\n\nexport default Main;","import styled from 'styled-components';\nimport {Accordion} from 'primereact/accordion';\n\nexport const TabContainer = styled.div`\n    width: 100%;\n`\n\nexport const TabHeader = styled.h1`\n    margin-left: 20px;\n`\nexport const TabContent = styled.div`\n    margin-left: 40px;\n    margin-right: 20px;\n`\n\nexport const TabContentSection = styled.div`\n    margin-top: 30px;\n    margin-bottom: 50px;\n    h3 {\n        font-size: 16px;\n    }\n    .subContent {\n        margin-left: 20px;\n        font-size: 14px;\n        max-width: 90%;\n    }\n`\n\nexport const StyledAccordion = styled(Accordion)`\n    width: 100%;\n    margin-top: 10px;\n    margin-bottom: 30px;\n    h4 {\n        margin-left: 20px;\n        font-size: 14px;\n        max-width: 90%;\n    }\n`","import React from 'react';\nimport {Accordion,AccordionTab} from 'primereact/accordion';\nimport {StyledAccordion} from './PSetStyle';\n\nclass PSetToolAccordion extends React.Component {\n\n    render(){\n        const toolAccordionTabs = this.props.items.map((item) => \n            <AccordionTab key={item.name} header={item.name}>\n                {item.commands.length ? \n                    <ul>\n                        {item.commands.map((command) => \n                            <li key={command}>\n                                {command}\n                            </li>    \n                        )}\n                    </ul>\n                    :\n                    \"Not Available\"\n                }\n                   \n            </AccordionTab>\n        );\n        \n        return(\n            this.props.items.length ? \n                <Accordion multiple={true}>\n                    {toolAccordionTabs}\n                </Accordion>\n                :\n                <div className='subContent'>Not Available</div>\n        );\n    }\n\n}\n\nclass RNARefAccordion extends React.Component {\n    \n    render(){\n        const rnaRefAccordionTabs = this.props.items.map((item) => \n            <AccordionTab key={item.name} header={item.name}>\n                <ul>\n                    <li className='listItem-1'>\n                        <div>{item.name.length ? item.name : 'Currently not available'}</div>\n                        <div>{item.source.length ? <a href={item.source}>{item.source}</a> : 'Currently not available'}</div>\n                    </li>                    \n                </ul> \n            </AccordionTab>\n        );\n    \n        return(\n            this.props.items.length ? \n                <Accordion multiple={true}>\n                    {rnaRefAccordionTabs}\n                </Accordion>\n                :\n                <div className='subContent'>Not Available</div>\n        );\n    }\n    \n}\n\nclass DNARefAccordion extends React.Component {\n\n    render(){\n        const exomeRefAccordionTabs = this.props.items.map((item) => \n            <AccordionTab key={item.name} header={item.name}>\n                <ul>\n                    <li className='listItem-1'>\n                        <div>{item.name.length ? item.name: 'Currently not available'}</div>\n                        <div>{item.source.length ? <a href={item.source}>{item.source}</a> : 'Currently not available'}</div>\n                    </li>\n                    <li className='listItem-1'>\n                        <div>{item.cosmic.name}</div>\n                        <div><a href={item.cosmic.source}>{item.cosmic.source}</a> </div>\n                    </li>\n                    <li className='listItem-1'>\n                        <div>{item.exonTarget.name}</div>\n                        <div><a href={item.exonTarget.source}>{item.exonTarget.source}</a></div>\n                    </li>                       \n                </ul> \n            </AccordionTab>\n        );\n    \n        return(\n            this.props.items.length ? \n                <Accordion multiple={true}>\n                    {exomeRefAccordionTabs}\n                </Accordion>\n                :\n                <div className='subContent'>Not Available</div>\n        );\n    }\n\n}\n\nclass GeneralInfoAccordion extends React.Component {\n    render(){   \n        const doi = 'http://doi.org/' + this.props.data.doi\n        return(\n            <StyledAccordion className='generalInfoAccordion'>\n                <AccordionTab header=\"General Information\">\n                    <h4>PSet Name: {this.props.data.name}</h4>\n                    <h4>DOI:  <a href={doi} target=\"_blank\">{this.props.data.doi}</a></h4>\n                    <h4>Date Created: {this.props.data.dateCreated.split('T')[0]}</h4>\n                    {this.props.data.createdBy && <h4>Created By {this.props.data.createdBy}</h4>}\n                </AccordionTab>    \n            </StyledAccordion>    \n        );\n    }\n}\n\nexport {\n    PSetToolAccordion,\n    RNARefAccordion,\n    DNARefAccordion,\n    GeneralInfoAccordion\n}\n","import React from 'react';\nimport {Dialog} from 'primereact/dialog';\nimport {TabView,TabPanel} from 'primereact/tabview';\nimport {Accordion,AccordionTab} from 'primereact/accordion';\nimport styled from 'styled-components';\nimport {PSetToolAccordion, RNARefAccordion, DNARefAccordion} from '../../PSet/PSetAccordion';\n\nconst TabContent = styled.div`\n    max-width: 700px;\n    max-height: 350px;\n    word-wrap: break-word;\n    overflow-y: scroll;\n`\n\nconst DatasetDialog = (props) => {\n    \n    const datasetAccordionTabs = props.dataset.map((item) => \n        <TabPanel key={item.label} header={item.label}>\n            <TabContent>\n                <Accordion multiple={true}>\n                    {item.versions.map((version) => \n                        <AccordionTab key={version.version} header={version.version}>\n                            <div className='tabContentSection'>\n                                <h3>Drug Sensitivity</h3>\n                                <h4 className='subContent'>Version: {version.drugSensitivity.version}</h4>\n                                <h4 className='subContent'>Source: {version.drugSensitivity.source ? <a href={version.drugSensitivity.source}>{version.drugSensitivity.source}</a> : 'Not available'}</h4>\n                            </div>\n                            <div className='tabContentSection'>\n                                <h3>Publication: </h3>\n                                <ul>\n                                    <div>    \n                                        {version.publication.length ? \n                                            version.publication.map((p) => \n                                                <li key={p.link} className='pubList'>\n                                                    <div className='subContent'>{p.citation}</div>\n                                                    <br />\n                                                    <div className='subContent'><a href={p.link}>{p.link}</a></div>\n                                                </li>\n                                            )\n                                            :\n                                            <div className=\"subContent\">\n                                                Not available.\n                                            </div>\n                                        }  \n                                    </div>\n                                </ul> \n                            </div>\n                        </AccordionTab>\n                    )}     \n                </Accordion>\n            </TabContent> \n        </TabPanel>\n    );\n    \n    return(\n        <Dialog header=\"Dataset Overview\" visible={props.visible} onHide={props.onHide} style={{minWidth: '50vw'}} >\n            <TabView>\n                {datasetAccordionTabs}\n            </TabView>\n        </Dialog>\n    )\n}\n\nconst RNADialog = (props) => {\n    return(\n        <Dialog header=\"RNA Pipeline Overview\" visible={props.visible} onHide={props.onHide} style={{minWidth: '50vw'}} >\n            <TabView renderActiveOnly={false}>\n                <TabPanel key='rnaTools' header=\"RNA Tools\">\n                    <h3>Available RNA Pipeline Tools</h3>\n                    <PSetToolAccordion items={props.rna.tool} />\n                </TabPanel>\n                <TabPanel key='rnaRef' header=\"RNA References\">\n                    <h3>Available RNA Transcriptome References</h3>\n                    <RNARefAccordion items={props.rna.ref} />\n                </TabPanel>\n            </TabView>\n        </Dialog>\n    )\n}\n\nconst DNADialog = (props) => {\n    return(\n        <Dialog header=\"DNA Sequence Alignment Overview\" visible={props.visible} onHide={props.onHide} style={{minWidth: '50vw'}} >\n            <TabView renderActiveOnly={false}>\n                <TabPanel key='dnaTools' header=\"DNA Tools\">\n                    <h3>Available DNA Pipeline Tools</h3>\n                    <PSetToolAccordion items={props.dna.tool} />\n                </TabPanel>\n                <TabPanel key='dnaRef' header=\"DNA References\">\n                    <h3>Available DNA Exome References</h3>\n                    <DNARefAccordion items={props.dna.ref} />\n                </TabPanel>\n            </TabView>\n        </Dialog>\n    )\n}\n\nexport {\n    DatasetDialog,\n    RNADialog,\n    DNADialog\n}","import React, {useState, useEffect} from 'react';\nimport {DataTable} from 'primereact/datatable';\nimport {Column} from 'primereact/column';\nimport { Link } from 'react-router-dom';\nimport {DatasetDialog, RNADialog, DNADialog} from '../MainDialog/PharmacogenomicsDialog';\nimport * as MainStyle from '../MainStyle';\n\nconst Pharmacogenomics = () => {\n    \n    const [statsData, setStatsData] = useState([]);\n    const [formData, setFormData] = useState({\n        dataset: [],\n        rnaTool: [],\n        dnaTool: [],\n        rnaRef: [],\n        dnaRef: []\n    });\n    const [dashboard, setDashboard] = useState({\n        pending: 0,\n        inProcess: 0\n    });\n    const [datasetVisible, setDatasetVisible] = useState(false);\n    const [rnaVisible, setRNAVisible] = useState(false);\n    const [dnaVisible, setDNAVisible] = useState(false);\n\n    useEffect(() => {\n        const fetchData = async (api) => {\n            const res = await fetch(api);\n            const json = await res.json();\n            const dataset = json.form.dataset \n            let versionCombo = 0\n            for(let i = 0; i < dataset.length; i++){\n                versionCombo += dataset[i].versions.length\n            }\n            setStatsData(json.pset);\n            setFormData({...json.form, versionCombo: versionCombo});\n            setDashboard(json.dashboard);\n        }\n        fetchData('/api/landing/data');\n    }, [])\n\n    const nameColumnTemplate = (rowData, column) => {\n        let route = '/' + rowData.doi;\n        return(\n            <Link to={route} >{rowData.name}</Link>\n        );\n    }\n\n    const showDialog = (type) => {\n        switch(type){\n            case 'dataset':\n                setDatasetVisible(true);\n                break;\n            case 'rna':\n                setRNAVisible(true);\n                break;\n            case 'dna':\n                setDNAVisible(true);\n                break;\n            default:\n                break;\n        }\n    }\n\n    const hideDialog = (type) => {\n        switch(type){\n            case 'dataset':\n                setDatasetVisible(false);\n                break;\n            case 'rna':\n                setRNAVisible(false);\n                break;\n            case 'dna':\n                setDNAVisible(false);\n                break;\n            default:\n                break;\n        }\n    }\n\n    return (\n        <MainStyle.Wrapper>\n            <MainStyle.DatasetHeaderGroup>\n                <h1>ORCESTRA for Pharmacogenomics</h1>   \n                <h2>Explore and request multimodal Pharmacogenomic Datasets (PSets)</h2>\n            </MainStyle.DatasetHeaderGroup>\n            <MainStyle.Row>\n                <MainStyle.Column>\n                    <MainStyle.Item>\n                        <h3>Search and Request PSets</h3>\n                        <div className='content'>\n                            <div>Design your own PSet using:</div>\n                            <div className='line'>\n                                <MainStyle.Number>\n                                    <button onClick={() => {showDialog('dataset')}}>{formData.versionCombo}</button>\n                                </MainStyle.Number> \n                                <span>Dataset/Drug sensitivity combinations</span>\n                            </div>\n                            <div className='line'>\n                                <MainStyle.Number>\n                                    <button onClick={() => {showDialog('rna')}}>{formData.rnaTool.length}</button>\n                                </MainStyle.Number> \n                                <span>RNA pipelines.</span>\n                            </div>\n                            <div className='link'>\n                                <MainStyle.Button href=\"/search\">Search and Request</MainStyle.Button>\n                            </div>\n                        </div>\n                    </MainStyle.Item>\n                </MainStyle.Column>\n                <MainStyle.Column>\n                    <MainStyle.Item style={{ alignSelf: 'flex-start'}}>\n                        <h3>Canonical PSets</h3>\n                        <div className='content'>\n                            <div>The latest version of PSets created by BHK Lab.</div>\n                            <div className='link'>\n                                <MainStyle.Button href=\"/canonical\">View Canonical PSets</MainStyle.Button>\n                            </div>\n                        </div>\n                    </MainStyle.Item>\n                    <MainStyle.Item style={{ alignSelf: 'flex-start'}}>\n                        <h3>View PSet Request Status</h3>\n                        <div className='content'>\n                            <div>ORCESTRA is processing following requests:</div>\n                            <div className='line'>\n                                <MainStyle.Number>{dashboard.pending}</MainStyle.Number> \n                                <span>Requests in queue.</span>\n                            </div>\n                            <div className='line'>\n                                <MainStyle.Number>{dashboard.inProcess}</MainStyle.Number> \n                                <span >Requests in process.</span>\n                            </div>\n                            <div className='link'>\n                                <MainStyle.Button href=\"/status\">View Request Status</MainStyle.Button>\n                            </div>\n                        </div>\n                    </MainStyle.Item>\n                </MainStyle.Column> \n                <MainStyle.Column>\n                    <MainStyle.Item>\n                        <h3>Top 5 Popular PSets</h3>\n                        <div className='content'>\n                            <DataTable value={statsData} >\n                                <Column className='textField' field='download' header='Download' />\n                                <Column className='textField' field='name' header='Name' body={nameColumnTemplate}/>\n                            </DataTable>\n                            <div className='link'>\n                                <MainStyle.Button href=\"/stats\">View Statistics</MainStyle.Button>\n                            </div>\n                        </div>\n                    </MainStyle.Item> \n                    <MainStyle.Item>\n                        <h3>Generate PSets with Your Data</h3>\n                        <div className='content'>\n                            <p>\n                                <b>You can generate PSets using your own datasets.</b> <br /> \n                                For more information, please read about <a href='/documentation/datacontribution'>contributing your data</a>.\n                            </p>    \n                        </div>\n                    </MainStyle.Item> \n                </MainStyle.Column>    \n            </MainStyle.Row> \n            <DatasetDialog visible={datasetVisible} onHide={() => {hideDialog('dataset')}} dataset={formData.dataset} />\n            <RNADialog visible={rnaVisible} onHide={() => {hideDialog('rna')}} rna={{tool: formData.rnaTool, ref: formData.rnaRef}} />\n            <DNADialog visible={dnaVisible} onHide={() => {hideDialog('dna')}} dna={{tool: formData.dnaTool, ref: formData.dnaRef}} />  \n        </MainStyle.Wrapper>\n    );\n}\n\nexport default Pharmacogenomics;","import React from 'react';\nimport Pharmacogenomics from './DatasetMainContent/Pharmacogenomics';\n\nconst DatasetMain = (props) => {\n    return(\n        <>\n            {!props.match.datatype && <Pharmacogenomics />}\n            {props.match.datatype === 'pharmacogenomics' && <Pharmacogenomics />}\n        </>\n    );\n}\n\nexport default DatasetMain;\n","import React from 'react';\nimport {MultiSelect} from 'primereact/multiselect';\nimport {Dropdown} from 'primereact/dropdown';\nimport styled from 'styled-components';\n\nconst FilterSet = styled.div`\n    display: flex;\n    align-items: center;\n    margin-top: 20px;\n    margin-bottom: 30px;\n    .paramInput {\n        flex-grow: 1;\n    }\n`\n\n// props: id, className, isHidden, selectOne, parameterName, parameterOptions[], selecedParameter[], handleUpdateSelection()\n\nclass PSetDropdown extends React.Component {\n    \n    render(){\n        const dataTemplate =  (option) => {\n            return(\n                <div>\n                    <span style={{fontSize:'1em',margin:'1em .5em 0 0'}}>{option.label}</span>\n                </div>\n            );\n        }\n\n        const selectedDataTemplate = (item) => {\n            if (item) {\n                return (\n                    <div className=\"my-multiselected-item-token\">\n                        <span>{item.label}</span>\n                    </div>\n                );\n            }\n            else {\n                return <span>Select...</span>\n            }\n        }\n            \n        if(this.props.isHidden){\n            return(null);\n        }\n        if(this.props.selectOne){\n            return(\n                <FilterSet>\n                    <label>{this.props.parameterName}</label>\n                    <Dropdown \n                        id={this.props.id} \n                        className='paramInput' \n                        optionLabel='label' \n                        value={this.props.selectedParameter}   \n                        options={this.props.parameterOptions} \n                        onChange={this.props.handleUpdateSelection}\n                        filter={true} \n                        itemTemplate={dataTemplate}\n                        placeholder=\"Select one...\"\n                        disabled={this.props.disabled}\n                    />\n                </FilterSet>\n            );\n        }\n        return(\n            <FilterSet>\n                <label>{this.props.parameterName}</label>\n                <MultiSelect \n                    id={this.props.id}\n                    className='paramInput' \n                    optionLabel='label' \n                    value={this.props.selectedParameter} \n                    options={this.props.parameterOptions} \n                    onChange={this.props.handleUpdateSelection}\n                    filter={true} \n                    itemTemplate={dataTemplate} \n                    selectedItemTemplate={selectedDataTemplate}\n                    disabled={this.props.disabled}\n                />\n            </FilterSet>\n        );\n    }\n    \n}\n\nexport default PSetDropdown;","import React from 'react';\nimport {Checkbox} from 'primereact/checkbox';\nimport styled from 'styled-components';\n\nconst CheckBoxContainer = styled.div`\n    display: flex;\n    align-items: center;\n    margin-bottom: 30px;\n    .label{\n        margin-right: 10px;\n    }\n`\n\nconst PSetCheckbox = (props) => {\n    return(\n        <CheckBoxContainer>\n            <div className='label'>{props.label}</div>\n            <Checkbox inputId=\"filteredSens\" \n                onChange={props.onChange} \n                checked={props.checked}>\n            </Checkbox>\n        </CheckBoxContainer>\n    );\n}\n\nexport default PSetCheckbox;\n","import React, {useState, useEffect, useContext, useRef} from 'react';\nimport {InputSwitch} from 'primereact/inputswitch';\nimport PSetDropdown from '../../Shared/PSetDropdown';\nimport PSetCheckbox from '../../Shared/PSetCheckbox';\nimport {SearchReqContext} from '../PSetSearch';\nimport './PSetFilter.css';\n\nconst PSetFilter = () => {\n    \n    const context = useContext(SearchReqContext);\n    const formRef = useRef();\n    const paramRef = useRef();\n\n    const [ready, setReady] = useState(false);\n    \n    useEffect(() => {\n        const initialize = async () => {\n            const res = await fetch('/api/formData');\n            const json = await res.json();\n            console.log(json)\n            formRef.current = json;\n            formRef.current.drugSensOptions = [];\n            formRef.current.disableDrugSensOptions = true;\n            formRef.current.disableToolRefOptions = false;\n            formRef.current.hideDataTypeOptions = false;\n            paramRef.current = { dataset: [], drugSensitivity: [], filteredSensitivity: false, canonicalOnly: false, genome: [], dataType: [], rnaTool: [], rnaRef: [], defaultData: [] }\n            setReady(true)\n        }\n        initialize();\n    }, []);\n\n\n    //function to show rnaRef options that belong to a selected genome(s), and hide others.\n    const onGenomeSelection = (genome) => {\n        console.log(genome)\n        // if genomes are not selected, show all rnaRef options\n        if(genome.length === 0){\n            formRef.current.rnaRef.forEach(ref => {ref.hide = false})\n        // if one or more genome is selected, show rnaRef options that belong to the selected genome(s)\n        }else{\n            if(Array.isArray(genome)){\n                formRef.current.rnaRef.forEach(ref => {\n                    ref.hide = (genome.find(g => {return ref.genome === g.name})) ? false : true;\n                })\n            }else{\n                formRef.current.rnaRef.forEach(ref => {\n                    ref.hide = (ref.genome === genome.name) ? false : true;\n                })\n            }\n        }\n    }\n\n    const onDatasetSelectionRequest = (dataset) => {\n        console.log('onDatasetSelectionRequest')\n        formRef.current.drugSensOptions = [];\n        //disable the drug sensitivity options if no dataset is selected.\n        if(typeof dataset === 'undefined'){\n            formRef.current.disableDrugSensOptions = true;\n        }else{\n            // set drug sensitivity and optional data type options\n            setDrugSensParamOptions(dataset);\n            formRef.current.disableDrugSensOptions = false;\n        }\n        setOptionsOnDatasetSelection(dataset);\n    }\n\n    //show drug sensitivity options available for selected dataset(s)\n    const onDatasetSelectionSearch = (dataset) => {\n        // empty current options\n        formRef.current.drugSensOptions = [];\n        // enable the drug sensitivity options only if at least one dataset is selected.\n        if(dataset.length){\n            formRef.current.disableDrugSensOptions = false;\n        }else{\n            formRef.current.disableDrugSensOptions = true;\n        }\n        // set drug sensitivity options\n        dataset.forEach(ds => {\n            setDrugSensParamOptions(ds);\n        })\n    }\n\n    const setOptionsOnDatasetSelection = (dataset) => {\n        // handle form options depending on a selected dataset\n        switch(dataset.name){\n            case 'CCLE':\n                paramRef.current.defaultData = formRef.current.dataType.filter(dt => {return dt.default});\n                paramRef.current.dataType = [];\n                setDataTypeOptions(dataset);\n                formRef.current.disableToolRefOptions = false;\n                formRef.current.hideDataTypeOptions = false;\n                break;\n            case 'CTRPv2':\n                paramRef.current.defaultData = [];\n                paramRef.current.dataType = [];\n                paramRef.current.genome = [];\n                paramRef.current.rnaTool = [];\n                paramRef.current.rnaRef = [];\n                formRef.current.disableToolRefOptions = true;\n                formRef.current.hideDataTypeOptions = true;\n                break;\n            case 'FIMM':\n                paramRef.current.defaultData = [];\n                paramRef.current.dataType = [];  \n                paramRef.current.genome = [];  \n                paramRef.current.rnaTool = [];\n                paramRef.current.rnaRef = [];\n                formRef.current.disableToolRefOptions = true;\n                formRef.current.hideDataTypeOptions = true;\n                break;\n            case 'gCSI':\n                paramRef.current.defaultData = formRef.current.dataType.filter(dt => {return dt.default});\n                paramRef.current.dataType = []; \n                setDataTypeOptions(dataset);   \n                formRef.current.disableToolRefOptions = false;\n                formRef.current.hideDataTypeOptions = false;\n                break;\n            case 'GDSC':\n                paramRef.current.defaultData = formRef.current.dataType.filter(dt => {return dt.default});\n                paramRef.current.dataType = []; \n                setDataTypeOptions(dataset);   \n                formRef.current.disableToolRefOptions = false;\n                formRef.current.hideDataTypeOptions = false;\n                break;\n            default:\n                paramRef.current.defaultData = formRef.current.dataType.filter(dt => {return dt.default});\n                paramRef.current.dataType = [];     \n                formRef.current.disableToolRefOptions = false;\n                formRef.current.hideDataTypeOptions = true;\n                break;\n        }\n    }\n\n    const setDataTypeOptions = (dataset) => {\n        const accRNA = formRef.current.accompanyRNA.filter(acc => {return acc.dataset === dataset.name});\n        const accDNA = formRef.current.accompanyDNA.filter(acc => {return acc.dataset === dataset.name});\n        const options = accRNA.concat(accDNA);\n        formRef.current.dataType.forEach(dt => {\n            dt.hide = (options.find(option => {return option.name === dt.name})) ? false : true;\n        })   \n    }\n\n    const requestToggleOn = (request) => {\n        // hide dataset option(s) that are not available to use for a PSet request.\n        formRef.current.dataset.forEach(ds => {ds.hide = ds.unavailable ? true : false})\n        formRef.current.dataType.forEach(dt => {dt.hide = (dt.name === 'rnaseq') ? true : false})\n        formRef.current.disableToolRefOptions = true;\n        formRef.current.hideDataTypeOptions = true;\n\n        paramRef.current.canonicalOnly = false;\n        paramRef.current.dataType = []\n        if(paramRef.current.dataset.length){\n            setParameterOptions('dataset');\n            paramRef.current.dataset = paramRef.current.dataset[0];\n            paramRef.current.drugSensitivity = [];\n            setOptionsOnDatasetSelection(paramRef.current.dataset)\n            // set drug sensitivity options\n            formRef.current.drugSensOptions = [];\n            setDrugSensParamOptions(paramRef.current.dataset);\n        }\n        if(paramRef.current.genome.length){\n            setParameterOptions('genome');\n            paramRef.current.genome = paramRef.current.genome[0];\n        }\n        if(paramRef.current.rnaTool.length){\n            setParameterOptions('rnaTool');\n            // limit selection of RNA tools to two\n            let tools = JSON.parse(JSON.stringify(paramRef.current.rnaTool));\n            while(tools.length > 2){\n                tools.shift()\n            }\n            paramRef.current.rnaTool = tools;\n        }\n        if(paramRef.current.rnaRef.length){\n            setParameterOptions('rnaRef');\n            paramRef.current.rnaRef = paramRef.current.rnaRef[0];\n        }\n        context.setIsRequest(request);\n        context.setParameters({...paramRef.current, search: true});\n    }\n\n    const requestToggleOff = (request) => {   \n        formRef.current.dataset.forEach(ds => {ds.hide = false});\n        restoreParameters('dataset');\n        paramRef.current.drugSensitivity = [];\n        paramRef.current.dataType = [];\n        restoreParameters('genome');\n        restoreParameters('rnaRef');\n        formRef.current.hideDataTypeOptions = false;\n        formRef.current.dataType.forEach(dt => {dt.hide = false});\n        formRef.current.dataset.forEach(ds => {ds.hide = false});\n        formRef.current.genome.forEach(g => {g.hide = false});\n        formRef.current.rnaRef.forEach(ref => {ref.hide = false});\n        context.setIsRequest(request);\n        context.setParameters({...paramRef.current, search: true});\n    }\n\n    const setParameterOptions = (name) => {\n        formRef.current[name].forEach(ref => {\n            ref.hide = paramRef.current[name].find(p => {return ref.name === p.name}) ? false : true\n        })\n    }\n\n    const restoreParameters = (name) => {\n        const visibleOptions = formRef.current[name].filter(option => {return !option.hide});\n        if(visibleOptions.length < formRef.current[name].length){\n            paramRef.current[name] = visibleOptions;\n            if(name === 'dataset'){\n                // restore drug sensitivity options\n                formRef.current.drugSensOptions = [];\n                visibleOptions.forEach(option => {\n                    setDrugSensParamOptions(option)\n                })\n            }\n        }else if(!Array.isArray(paramRef.current[name])){\n            paramRef.current[name] = [paramRef.current[name]];\n            if(name === 'dataset'){\n                // restore drug sensitivity options\n                formRef.current.drugSensOptions = [];\n                setDrugSensParamOptions(paramRef.current[name][0])\n            }\n        }\n    }\n\n    const setDrugSensParamOptions = (dataset) => {\n        dataset.versions.forEach(v => {\n            if(!formRef.current.drugSensOptions.some(drug => drug.label === v.label)){\n                formRef.current.drugSensOptions.push(v);\n            }\n        })\n    }\n    \n    return(\n        <React.Fragment>\n        {\n            ready&&\n            <div className='pSetFilterContainer'>\n                <div className='pSetFilter'>\n                    <h2>PSet Parameters</h2>\n                    <div className='filterSet'>\n                        <label className='bold'>Request PSet: </label> \n                        <InputSwitch checked={context.isRequest} tooltip=\"Turn this on to request a PSet.\" \n                            onChange={(e) => {\n                                if(e.value){ \n                                    requestToggleOn(e.value); \n                                }else{ \n                                    requestToggleOff(e.value); \n                                }\n                            }} \n                        />\n                    </div>\n                    {\n                        !context.isRequest &&\n                        <PSetCheckbox \n                        label='Canonical PSets only: '\n                        onChange={(e) => {\n                            paramRef.current.canonicalOnly = e.checked;\n                            context.setParameters({...paramRef.current, canonicalOnly: e.checked, search: true});\n                        }} \n                        checked={paramRef.current.canonicalOnly} />\n                    }\n                    <PSetDropdown id='dataset' isHidden={false} parameterName='Dataset:' selectOne={context.isRequest}  \n                        parameterOptions={formRef.current.dataset.filter(ds => {return(!ds.hide)})} selectedParameter={paramRef.current.dataset} \n                        handleUpdateSelection={(e) => {\n                            if(context.isRequest){\n                                onDatasetSelectionRequest(e.value)\n                            }else{\n                                onDatasetSelectionSearch(e.value)\n                            }\n                            paramRef.current.dataset = e.value;\n                            context.setParameters({...paramRef.current, search: true});\n                        }} />\n                    \n                    {\n                        (context.isRequest && !formRef.current.disableToolRefOptions) && \n                        <div>\n                            Molecular Data: \n                            {\n                                paramRef.current.defaultData.length === 1 ?\n                                <span style={{marginLeft: '10px', fontWeight: 'bold'}}>{paramRef.current.defaultData[0].label}</span>\n                                :\n                                <ul>\n                                {\n                                    paramRef.current.defaultData.map(data => {\n                                        return(<li key={Math.random()}>{data.label}</li>);\n                                    })\n                                }\n                                </ul>\n                            } \n                        </div>\n                    }\n                    <PSetDropdown id='dataType' isHidden={formRef.current.hideDataTypeOptions} parameterName={ context.isRequest ? 'Optional Molecular Data:' : 'Molecular Data Type:'}\n                        parameterOptions={formRef.current.dataType.filter(dt => {return(!dt.hide)})} selectedParameter={paramRef.current.dataType} \n                        handleUpdateSelection={(e) => {\n                            paramRef.current.dataType = e.value;\n                            context.setParameters({...paramRef.current, dataType: e.value, search: true});\n                        }} />\n\n                    <PSetDropdown id='drugSensitivity' isHidden={false} parameterName='Drug Sensitivity:' selectOne={context.isRequest} \n                        disabled={formRef.current.disableDrugSensOptions}\n                        parameterOptions={formRef.current.drugSensOptions} selectedParameter={paramRef.current.drugSensitivity} \n                        handleUpdateSelection={(e) => {\n                            paramRef.current.drugSensitivity = e.value;\n                            context.setParameters({...paramRef.current, drugSensitivity: e.value, search: true});\n                        }} />\n                    \n                    {\n                        context.isRequest ?\n                        !formRef.current.disableDrugSensOptions &&\n                        <PSetCheckbox \n                            label='Standardize drug dose range and filter noisy sensitivity curves?'\n                            onChange={(e) => {\n                                paramRef.current.filteredSensitivity = e.checked;\n                                context.setParameters({...paramRef.current, filteredSensitivity: e.checked});\n                            }} \n                            checked={paramRef.current.filteredSensitivity} />\n                        :\n                        <PSetCheckbox \n                            label='Filtered sensitivity data only: '\n                            onChange={(e) => {\n                                paramRef.current.filteredSensitivity = e.checked;\n                                context.setParameters({...paramRef.current, filteredSensitivity: e.checked, search: !context.isRequest});\n                            }} \n                            checked={paramRef.current.filteredSensitivity} />\n                    }\n                    \n                    <PSetDropdown id='genome' disabled={formRef.current.disableToolRefOptions} isHidden={false} parameterName='Genome:' selectOne={context.isRequest} \n                        parameterOptions={formRef.current.genome.filter(g => {return(!g.hide)})} selectedParameter={paramRef.current.genome} \n                        handleUpdateSelection={(e) => {\n                            onGenomeSelection(e.value)\n                            paramRef.current.genome = e.value;\n                            context.setParameters({...paramRef.current, genome: e.value, search: true});\n                        }} />\n\n                    <PSetDropdown id='rnaTool' disabled={formRef.current.disableToolRefOptions} parameterName='RNA Tool:' \n                        parameterOptions={formRef.current.rnaTool} selectedParameter={paramRef.current.rnaTool} \n                        handleUpdateSelection={(e) => {\n                            if(context.isRequest && e.value.length > 2){\n                                while(e.value.length > 2){ e.value.shift() }\n                            }\n                            paramRef.current.rnaTool = e.value;\n                            context.setParameters({...paramRef.current, rnaTool: e.value, search: true});\n                        }} />\n\n                    <PSetDropdown id='rnaRef' disabled={formRef.current.disableToolRefOptions} parameterName='RNA Ref:' selectOne={context.isRequest} \n                        parameterOptions={formRef.current.rnaRef.filter(ref => {return(!ref.hide)})} selectedParameter={paramRef.current.rnaRef} \n                        handleUpdateSelection={(e) => {\n                            paramRef.current.rnaRef = e.value;\n                            context.setParameters({...paramRef.current, rnaRef: e.value, search: true});\n                        }} />\n                </div>\n            </div>\n        }   \n        </React.Fragment>\n    );\n}\n\nexport default PSetFilter;","import React, {useContext} from 'react';\nimport {InputText} from 'primereact/inputtext';\nimport {Button} from 'primereact/button';\nimport Loader from 'react-loader-spinner';\nimport {usePromiseTracker} from \"react-promise-tracker\";\nimport {trackPromise} from 'react-promise-tracker';\nimport styled from 'styled-components';\nimport {SearchReqContext} from '../PSetSearch';\n\nconst RequestForm = styled.div`\n    width: 400px;\n    .reqFormInput {\n        display: flex;\n        align-items: center;\n        margin-top: 35px;\n    }\n    .paramInput {\n        flex-grow: 1;\n    }\n`\n\nconst LoaderContainer = styled.div`\n    height: 30px;\n    width: 100%;\n    display: flex;\n    justify-content: left;\n    align-items: center;\n`\n\nconst PSetRequestForm = (props) => {\n\n    const context = useContext(SearchReqContext);\n\n    const submitRequest = async event => {\n        event.preventDefault();\n        let dataset = {\n            name: context.parameters.dataset.name, \n            label: context.parameters.dataset.label, \n            versionInfo: context.parameters.drugSensitivity.version, \n            filteredSensitivity: context.parameters.filteredSensitivity\n        }\n        let reqData = {...context.parameters};\n        let dataType = context.parameters.defaultData.concat(context.parameters.dataType);\n        let rnaRef = {...context.parameters.rnaRef};\n\n        reqData.dataset = dataset;\n        reqData.dataType = dataType;\n        reqData.rnaRef = (Object.keys(rnaRef).length === 0 && rnaRef.constructor === Object ? [] : [rnaRef]);\n        \n        // delete any unnecessary fields for the database.\n        delete reqData.canonicalOnly;\n        delete reqData.drugSensitivity;\n        delete reqData.filteredSensitivity;\n        delete reqData.defaultData;\n        delete reqData.search;\n        reqData.dataType.forEach(dt => {delete dt.hide});\n        reqData.rnaRef.forEach(ref => {delete ref.hide});\n\n        console.log(reqData);\n        \n        const res = await trackPromise(fetch('/api/pset/request', {\n                method: 'POST',\n                body: JSON.stringify({reqData: reqData}),\n                headers: {'Content-type': 'application/json'}\n            }));\n        const resData = await res.json();\n        props.onRequestComplete(res.ok, resData);\n    }\n\n    const SubmitRequestButton = () => {\n        const {promiseInProgress} = usePromiseTracker();\n        return(\n            promiseInProgress ? \n                <LoaderContainer>\n                    <Loader type=\"ThreeDots\" color=\"#3D405A\" height={100} width={100} />\n                </LoaderContainer>\n                :\n                <Button label='Submit Request' type='submit' disabled={!props.readyToSubmit} onClick={submitRequest}/>\n        );\n    }\n\n    return(\n        <RequestForm>\n            <h2>Request PSet</h2>\n            <div className='reqFormInput'>\n                <label>PSet Name:</label>\n                <InputText id='name' className='paramInput' value={context.parameters.name || ''} \n                    onChange={(e) => {context.setParameters({...context.parameters, name: e.target.value, search: false})}} />\n            </div>\n            <div className='reqFormInput'>\n                <label>Email to receive DOI:</label>\n                <InputText id='email' className='paramInput' value={context.parameters.email || ''} \n                    onChange={(e) => {context.setParameters({...context.parameters, email: e.target.value, search: false})}} />\n            </div>\n            <div className='reqFormInput'>\n                <SubmitRequestButton />\n            </div>\n        </RequestForm>\n    );\n}\n\nexport default PSetRequestForm;","import React, {useState, useEffect} from 'react';\nimport {DataTable} from 'primereact/datatable';\nimport {Column} from 'primereact/column';\nimport { Link } from 'react-router-dom';\n\nconst PSetTable = (props) => {\n    \n    const [state, setState] = useState({\n        rows: 10,\n        first: 0,\n        start: 0,\n        end: 10,\n        totalRecords: 0,\n        loading: true\n    })\n\n    useEffect(()=>{\n        setState({...state, loading: false})\n    }, []);\n\n    const downloadPSet = (id, link) => async (event) => {\n        event.preventDefault();\n        console.log('downloadOnePSet');\n        await fetch('/api/pset/download', {\n            method: 'POST',\n            body: JSON.stringify({psetID: id}),\n            headers: {'Content-type': 'application/json'}\n        })\n        const anchor = document.createElement('a');\n        anchor.setAttribute('download', null);\n        anchor.style.display = 'none';\n        anchor.setAttribute('href', link);\n        document.body.appendChild(anchor);\n        anchor.click();\n        document.body.removeChild(anchor);\n    }\n\n    const toolsRefTemplate = (rowData, column) => (\n        <div>{rowData[column.field] ? rowData[column.field].map(item => <div key={item.name}>{item.label}</div>) : ''}</div>\n    );\n\n    const dataTypeTemplate = (rowData, column) => (\n        <div>{rowData[column.field] ? rowData[column.field].map(item => <div key={item.name}>{item.name} ({item.type})</div>) : ''}</div>\n    );\n\n    const nameColumnTemplate = (rowData, column) => (\n        <Link to={`/${rowData.doi}`} target=\"_blank\">{rowData.name}</Link>\n    );\n\n    const downloadTemplate = (rowData, column) => {\n        return(rowData.downloadLink ? <a id={rowData._id} href='#' onClick={downloadPSet(rowData._id, rowData.downloadLink)}>Download</a> : 'Not Available');\n    };\n\n    const filteredTemplate = (rowData, column) => (\n        <div>{rowData.dataset.filteredSensitivity ? 'Yes' : 'No'}</div>\n    );\n\n    const canonicalTemplate = (rowData, column) => (\n        <div>{rowData[column.field] ? 'Yes' : ''}</div>\n    );\n\n    const updatePSetSelectionEvent = event => {\n        props.updatePSetSelection(event.value);\n    };\n\n    return(\n        <DataTable \n            value={props.psets} \n            selection={props.selectedPSets} onSelectionChange={updatePSetSelectionEvent} \n            paginator={true} rows={state.rows} \n            resizableColumns={true} columnResizeMode=\"fit\"\n            scrollable={true} scrollHeight={props.scrollHeight }\n        >\n            {props.authenticated && <Column selectionMode=\"multiple\" style={{width: '30px', textAlign: 'center'}} />}\n            <Column className='textField' field='name' header='Name' style={{width:'150px'}} body={nameColumnTemplate} sortable={true} />\n            <Column className='textField' field='dataset.name' header='Dataset' style={{width:'100px'}} sortable={true} />\n            <Column className='textField' field='dataset.versionInfo' header='Drug Sensitivity' style={{width:'120px'}} sortable={true} />\n            <Column field='dataset.filteredSensitivity' body={filteredTemplate} style={{width:'90px', textAlign: 'center'}} header='Filtered Drug Sensitivity' />\n            <Column field='rnaTool' body={toolsRefTemplate} style={{width:'120px'}} header='RNA Tool' sortable={true}  />\n            <Column field='rnaRef' body={toolsRefTemplate} style={{width:'120px'}} header='RNA Ref' sortable={true} />\n            <Column field='dataType' body={dataTypeTemplate} style={{width:'125px'}} header='Molecular Data' />\n            <Column field='canonical' body={canonicalTemplate} style={{width:'90px', textAlign: 'center'}} header='Canonical' />\n            {props.download && <Column field='downloadLink' body={downloadTemplate} style={{width:'90px', textAlign: 'center'}} header='Download' /> }\n        </DataTable>\n    );\n\n}\n\nexport default PSetTable;","import React from 'react';\nimport {Button} from 'primereact/button';\nimport {AuthContext} from '../../../context/auth';\nimport * as APICalls from '../APICalls';\n\nclass SavePSetButton extends React.Component{\n    constructor(){\n        super();\n        this.saveSelectedPSets = this.saveSelectedPSets.bind(this);\n    }\n\n    static contextType = AuthContext;\n\n    saveSelectedPSets = event => {\n        event.preventDefault();\n        if(this.context.authenticated){\n            APICalls.saveOrUpdateUserPSets(this.context.username, this.props.selectedPSets, (status, data) => {this.props.onSaveComplete(status, data)});\n        }\n    }\n\n    render(){\n        return(\n            this.context.authenticated ? <Button label='Save' onClick={this.saveSelectedPSets} disabled={this.props.disabled}/> : '*Login or register to save existing PSets to your profile.'\n        );\n    }\n}\n\nexport default SavePSetButton;\n","\nexport function queryPSet(api, callback){\n    //console.log(api);\n    fetch(api)  \n        .then(res => res.json())\n        .then(resData => {\n            callback(resData);\n        }   \n    );\n}\n\nexport function saveOrUpdateUserPSets(username, selectedPSets, callback){\n    if(selectedPSets.length){\n        var userPSet = { username: username };\n        var psetId = [];\n        for(let i = 0; i < selectedPSets.length; i++){\n            psetId.push(selectedPSets[i]._id);\n        }\n        userPSet.psetId = psetId;\n\n        fetch('/api/user/pset/add', {\n            method: 'POST',\n            body: JSON.stringify({reqData: userPSet}),\n            headers: {\n                'Content-type': 'application/json'\n            }\n        })\n            .then(res => res.json())\n            .then(resData => callback(1, resData))\n            .catch(err => callback(0, err));\n\n    }\n}\n\nexport function requestPSet(data, callback){\n    console.log(data);\n    fetch('/api/pset/request', {\n        method: 'POST',\n        body: JSON.stringify({\n            reqData: data\n        }),\n        headers: {\n            'Content-type': 'application/json'\n        }\n    })\n        .then(res => res.json())\n        .then(resData => callback(1, resData))\n        .catch(err => callback(0, err));\n}\n\nexport function downloadPSet(psetID){\n    console.log('downloadOnePSet: ' + psetID);\n    fetch('/api/pset/download', {\n        method: 'POST',\n        body: JSON.stringify({\n            psetID: psetID\n        }),\n        headers: {\n            'Content-type': 'application/json'\n        }\n    })\n        .then(res => res.json())\n        .catch(err => console.log(err));\n}","// Helper functions used for PSet API requests.\n\nexport function isNoneSelected(filterset){\n    if(!filterset.datatype.length && \n        !filterset.datasetName.length && \n        !filterset.genome.length && \n        !filterset.rnaTool.length &&\n        !filterset.dnaTool.length &&\n        !filterset.rnaRef.length &&\n        !filterset.dnaRef.length &&\n        !filterset.drugSensitivity.length){\n        return(true);\n    }\n    return(false);\n}\n\nexport function isReadyToSubmit(request){\n    if(!isSelected(request.dataset)){\n        return(false)\n    }\n    if(!isSelected(request.drugSensitivity)){\n        return(false);\n    }\n    if(!hasName(request.name)){return(false)}\n\n    if(!isValidEmail(request.email)){return(false)}\n\n    if(!isSelected(request.genome) && !(request.dataset.name === 'CTRPv2' || request.dataset.name === 'FIMM')){\n        return(false);\n    }\n    if(!isSelected(request.rnaTool) && !(request.dataset.name === 'CTRPv2' || request.dataset.name === 'FIMM')){\n        return(false);\n    }\n    if(!isSelected(request.rnaRef) && !(request.dataset.name === 'CTRPv2' || request.dataset.name === 'FIMM')){\n        return(false);\n    }\n\n    return(true);\n}\n\nexport function isSelected(reqParam){\n    if(typeof reqParam === 'undefined' || reqParam === null){\n        return(false);\n    }\n    if(Array.isArray(reqParam) && !reqParam.length){\n        return(false);\n    }\n    return(true);\n}\n\nexport function messageAfterRequest(status, data, initialize=null, msgComponent){\n    if(initialize){\n        initialize();\n    }\n    if(status){\n        msgComponent.show({severity: 'success', summary: data.summary, detail: data.message, sticky: true});\n    }else{\n        msgComponent.show({severity: 'error', summary: 'An error occured', detail: data.toString(), sticky: true});\n    } \n}\n\nfunction hasName(name){\n    if(typeof name === 'undefined' || name === null){\n        return(false);\n    }\n    if(name.length === 0){\n        return(false);\n    }\n    return(true);\n}\n\nfunction isValidEmail(email){\n    const regex = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/;\n    if(typeof email === 'undefined' || email === null){\n        return(false);\n    }\n    if(email.length === 0){\n        return(false);\n    }\n    if(!regex.test(email)){\n        return(false);\n    }\n    return(true);\n}\n","import React, {useState, useEffect, useContext} from 'react';\nimport './PSetSearch.css';\nimport PSetFilter from './subcomponents/PSetFilter';\nimport PSetRequestForm from './subcomponents/PSetRequestForm';\nimport PSetTable from '../Shared/PSetTable';\nimport SavePSetButton from '../Shared/Buttons/SavePSetButton';\nimport Loader from 'react-loader-spinner';\nimport {Messages} from 'primereact/messages';\nimport * as Helper from '../Shared/Helper';\nimport {AuthContext} from '../../context/auth';\n\nexport const SearchReqContext = React.createContext();\n\nasync function fetchData(url, parameters) {\n    const response = await fetch(url, {\n        method: 'POST',\n        body: JSON.stringify({parameters: {...parameters, status: 'complete'}}),\n        headers: {'Content-type': 'application/json'}\n    });\n    const json = await response.json();\n    return(json);\n}\n\nconst PSetSearch = () => {\n    \n    const auth = useContext(AuthContext);\n    \n    const [psets, setPSets] = useState([]);\n    const [searchAll, setSearchAll] = useState(true);\n    const [selectedPSets, setSelectedPSets] = useState([]);\n    const [disableSaveBtn, setDisableSaveBtn] = useState(true);\n    const [isRequest, setIsRequest] = useState(false);\n    const [readyToSubmit, setReadyToSubmit] = useState(true);\n    \n    const [parameters, setParameters] = useState({\n        dataset: [],\n        drugSensitivity: [],\n        canonicalOnly: false,\n        filteredSensitivity: false,\n        genome: [],\n        dataType: [],\n        rnaTool: [],\n        rnaRef: [],\n        name: '',\n        email: '',\n        search: false\n    });\n\n    const [ready, setReady] = useState(false)\n\n    useEffect(() => {\n        const initializeView = async () => {\n            const psets = await fetchData('/api/pset/search');\n            console.log(psets)\n            setPSets(psets);\n            setSearchAll(true);\n            setReady(true);\n        }\n        initializeView();\n    }, []);\n\n    useEffect(() => {\n        setDisableSaveBtn(Helper.isSelected(selectedPSets) ? false : true)\n    }, [selectedPSets]);\n\n    useEffect(() => {   \n        async function search() {\n            console.log('search');\n            console.log(parameters);\n            let copy = JSON.parse(JSON.stringify(parameters));\n            Object.keys(copy).forEach(key => {\n                if(!Array.isArray(copy[key]) && !(key === 'canonicalOnly' || key === 'filteredSensitivity')){\n                    copy[key] = [copy[key]];\n                }\n            });\n            const psets = await fetchData('/api/pset/search', copy);\n            let all = true;\n            Object.keys(parameters).forEach(key => {\n                if(Array.isArray(parameters[key]) && parameters[key].length){\n                    all = false;\n                }\n            });\n            setPSets(psets);\n            setSearchAll(all);\n        }\n\n        if(parameters.search){\n            search();\n        }\n        \n        if(isRequest){\n            setReadyToSubmit(Helper.isReadyToSubmit(parameters));\n        }\n    }, [parameters]);\n\n    const showMessage = (status, data) => {\n        let severity = status ? 'success' : 'error';\n        PSetSearch.messages.show({severity: severity, summary: data.summary, detail: data.message, sticky: true});\n        initializeState();\n    }\n\n    const updatePSetSelection = (selected) => {\n        setSelectedPSets(selected);\n    }\n\n    const initializeState = () => {\n        setSelectedPSets([]);\n        setDisableSaveBtn(true);\n    }\n        \n    return(\n        <SearchReqContext.Provider value={{ \n                parameters: parameters, \n                setParameters: setParameters, \n                isRequest: isRequest, \n                setIsRequest: setIsRequest\n            }}\n        >\n            <div className='pageContent'>\n                <h2>Search or Request Pharmacogenomic Datasets</h2>\n                <div className='pSetListContainer'>\n                    <PSetFilter />\n                    <div className='pSetTable'>\n                        <Messages ref={(el) => PSetSearch.messages = el} />\n                        <div className='pSetSelectionSummary'>\n                            <div className='summaryPanel'>\n                                <h2>Summary</h2>\n                                <div className='pSetSummaryContainer'>\n                                    <div className='pSetSummaryItem'>\n                                        {\n                                            searchAll ? \n                                            <span><span className='pSetSummaryNum'>{psets.length ? psets.length : 0}</span> <span>dataset(s) available.</span></span>\n                                            :\n                                            <span><span className='pSetSummaryNum'>{psets.length}</span> <span>{psets.length === 1 ? ' match' : ' matches'}</span> found.</span>\n                                        }\n                                    </div>\n                                </div>\n                                <SavePSetButton selectedPSets={selectedPSets} disabled={disableSaveBtn} onSaveComplete={showMessage} />\n                            </div>\n                            {\n                                isRequest &&\n                                <PSetRequestForm readyToSubmit={readyToSubmit} onRequestComplete={showMessage} />\n                            }\n                        </div>\n                        {\n                            ready ?\n                            <PSetTable \n                                psets={psets} selectedPSets={selectedPSets} \n                                updatePSetSelection={updatePSetSelection} scrollHeight='600px'\n                                authenticated={auth.authenticated} download={true}\n                            /> \n                            :\n                            <div className='tableLoaderContainer'>\n                                <Loader type=\"ThreeDots\" color=\"#3D405A\" height={100} width={100} />\n                            </div>\n                        }  \n                    </div>\n                </div>\n            </div>\n        </SearchReqContext.Provider>\n    );\n}\n\nexport default PSetSearch;","import React, {useState, useEffect, useContext} from 'react';\nimport './Dashboard.css';\nimport Loader from 'react-loader-spinner';\nimport {Messages} from 'primereact/messages';\nimport {DataTable} from 'primereact/datatable';\nimport {Column} from 'primereact/column';\nimport {AuthContext} from '../../context/auth';\n\nconst Dashboard = () => {\n    \n    const auth = useContext(AuthContext);\n    const [data, setData] = useState([]);\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        const getData = async () => {\n            const res = await fetch('/api/pset/search', {\n                method: 'POST',\n                body: JSON.stringify({parameters: {status: ['pending', 'in-process']}}),\n                headers: {'Content-type': 'application/json'}\n            });\n            const json = await res.json();\n            console.log(json);\n            setData(json);\n            setLoading(false);\n        }\n        getData();\n    }, []);\n\n    const show = (message) => {\n        Dashboard.messages.show(message);\n    }\n\n    const submitRequest = async (id) => {\n        const result = await fetch(\n            '/api/pset/process', \n            { \n                method: 'POST', \n                body: JSON.stringify({id: id}), \n                headers: {'Content-type': 'application/json'} \n            }\n        );\n        const json = await result.json();\n        return({ok: result.ok, data: json});\n    }\n    \n    const onSubmit = async (event) => {\n        event.preventDefault();\n        console.log(event.target.id);\n        const result = await submitRequest(event.target.id);\n        if(result.ok){\n            show({severity: 'success', summary: result.data.summary, detail: result.data.message, sticky: true});\n        }else{\n            show({severity: 'error', summary: result.data.summary, detail: result.data.message, sticky: true});\n        }\n        const res = await fetch('/api/pset/search', {\n            method: 'POST',\n            body: JSON.stringify({parameters: {status: ['pending', 'in-process']}}),\n            headers: {'Content-type': 'application/json'}\n        });\n        const json = await res.json();\n        console.log(json);\n        setData(json);\n    }\n\n    const dateTimeTemplate = (rowData, column) => {\n        let dateTimeStr = '';\n        if(rowData[column.field]){\n            dateTimeStr = new Date(rowData[column.field]).toLocaleString(undefined, {dateStyle: 'long', timeStyle: 'medium'});\n        }\n        return(<div>{dateTimeStr}</div>)\n    }\n\n    const buttonTemplate = (rowData, column) => {\n        let button = '';\n        if(rowData.status === 'pending'){\n            button = <button id={rowData._id} onClick={onSubmit} className='dashboardBtn' type='button'>Submit</button>\n        }\n        return(<div className='dashBoardBtnContainer'>{button}</div>)\n    }\n\n    return(\n        <div className='pageContent'>\n            <div className='dashboardWrapper'>\n                <h2>PSet Request Status Board</h2>\n                <Messages ref={(el) => Dashboard.messages = el }></Messages>\n                <div className='dashboardSummary'>\n                    <h2>Request Status Summary</h2>\n                    <div className='dashboardSummaryContainer'>\n                        <div className='dashboardSummarySection'>\n                            <span className='number'>{ data.filter(d => d.status === 'pending').length }</span> pending request(s).\n                        </div>\n                        <div className='dashboardSummarySection'>\n                            <span className='number'>{ data.filter(d => d.status === 'in-process').length }</span> request(s) in process.\n                        </div>    \n                    </div>    \n                </div>\n                <div className='dashboardTable'>\n                    {\n                        !loading ?\n                            data.length > 0 ?\n                            <DataTable value={data} paginator={true}  scrollable={true} rows={10} >\n                                <Column className='textField' field='status' header='Status' style={{width:'2em'}} sortable={true} />\n                                <Column className='textField' field='name' header='Name' style={{width:'5em'}} sortable={true} />\n                                <Column className='textField' field='dateSubmitted' header='Submitted Date' body={dateTimeTemplate} style={{width:'4em'}} sortable={true} />\n                                <Column className='textField' field='dateProcessed' header='Process Start Date' body={dateTimeTemplate} style={{width:'4em'}} sortable={true} />\n                                { auth.isAdmin && <Column body={buttonTemplate} style={{width:'1.5em'}}/> }\n                            </DataTable>\n                            :\n                            <h3>There are no pending or in-process requests.</h3>\n                        :   \n                        <div className='dashboardTableLoaderContainer'>\n                            <Loader type=\"ThreeDots\" color=\"#3D405A\" height={100} width={100} />\n                        </div>\n                    } \n                </div> \n            </div>   \n        </div>  \n    );\n}\n\nexport default Dashboard;","import React from 'react';\nimport Plotly from \"plotly.js-basic-dist\";\nimport createPlotlyComponent from \"react-plotly.js/factory\";\nconst Plot = createPlotlyComponent(Plotly);\n\nconst UpsetPlot = (props) => {\n\n    return(\n        <div className='upsetPlot'>\n            {\n                Object.keys(props.data).length && \n                <React.Fragment>\n                    <Plot\n                        data= {props.data.bars}\n                        layout={ {\n                            autosize: true,\n                            xaxis: {\n                                showgrid: false,\n                                zeroline: false,\n                                showticklabels: false,\n                                range: [-1, props.data.bars.length + 1]\n                            },\n                            yaxis: {\n                                tickfont: {\n                                    size: 12\n                                },\n                                showgrid: true,\n                                showticklabels: true\n                            },\n                            margin: {t: 10, b: 0, l: 120, r: 10},\n                            showlegend: false\n                        } }\n                        style = {{width: '2000px', height: '250px'}}\n                        useResizeHandler = {true}\n                        config = {{displayModeBar: false}}\n                    />\n                    <Plot\n                        data= {props.data.points}\n                        layout={ {\n                            autosize: true,\n                            xaxis: {\n                                showgrid: false,\n                                zeroline: false,\n                                showticklabels: false,\n                                range: [-1, props.data.points.length + 1]\n                            },\n                            yaxis: {\n                                showgrid: true,\n                                tickfont: {\n                                    size: 12\n                                },\n                                showticklabels: true\n                            },\n                            margin: {t: 0, b: 10, l: 120, r: 10},\n                            showlegend: false\n                        } }\n                        style = {{ width: '2000px', height: '200px'}}\n                        useResizeHandler = {true}\n                        config = {{displayModeBar: false}}\n                    />\n                </React.Fragment>\n            }\n        </div>\n    )\n}\n\nexport default UpsetPlot","import React, {useEffect, useState} from 'react';\nimport Plotly from \"plotly.js-basic-dist\";\nimport createPlotlyComponent from \"react-plotly.js/factory\";\nimport {Checkbox} from 'primereact/checkbox';\nimport {RadioButton} from 'primereact/radiobutton';\nimport UpsetPlot from './UpsetPlot'\nimport Loader from 'react-loader-spinner';\nconst Plot = createPlotlyComponent(Plotly);\n\nconst DatasetChart = () => {\n\n    const metricSet = [\n        {name: 'Numer of Cell Lines', value: 'cellLines'},\n        {name: 'Numer of Drugs', value: 'drugs'},\n        {name: 'Number of Tissue Types', value: 'tissues'},\n        {name: 'Numer of Drug Experiments ', value: 'experiments'},\n        {name: 'Numer of Genes', value: 'genes'}\n    ]\n    const [upsetData, setUpsetData] = useState({})\n    const [barData, setBarData] = useState([])\n    const [parameters, setParameters] = useState({\n        datasets: [],\n        metricName: ''\n    });\n    const [isReady, setIsReady] = useState(false)\n    const [isPlotReady, setIsPlotReady] = useState(false)\n\n    useEffect(() => {\n        const getData = async () => {\n            const res = await fetch('/api/stats/metrics/options')\n            const json = await res.json()\n            console.log(json)\n            setParameters({\n                datasets: json,\n                metricName: 'cellLines'\n            })\n        } \n        getData()\n        setIsReady(true)\n    }, [])\n\n    useEffect(() => {\n        const updateData = async () => {\n            const res = await fetch('/api/stats/metrics/data', {\n                method: 'POST',\n                body: JSON.stringify({parameters: parameters}),\n                headers: {'Content-type': 'application/json'}\n            })\n            const json = await res.json()\n\n            if(parameters.metricName === 'cellLines' || parameters.metricName === 'drugs' || parameters.metricName === 'tissues'){\n                let points = []\n                let bars = []\n                let data = json.upsetData.data\n                console.log(json.upsetData)\n                for(let i = 0; i < data.length; i++){\n                    let datasets = []\n                    let colors = []\n                    for(let j = 0; j < data[i].setIndices.length; j++){\n                        let index = data[i].setIndices[j]\n                        datasets.push(json.upsetData.sets[index].name)\n                        colors.push(json.upsetData.sets[index].color)\n                    }\n                    data[i].datasets = datasets\n                    data[i].colors = colors\n                }\n\n                for(let i = 0; i < data.length; i++){\n\n                    points.push({\n                            x: new Array(data[i].datasets.length).fill(i),\n                            y: data[i].datasets,\n                            mode: data[i].datasets.length > 1 ? 'lines+markers' : 'markers',\n                            type: 'scatter',\n                            marker: {\n                                size: 10,\n                                color: data[i].colors\n                            },\n                            line: {\n                                color: '#777777'\n                            },\n                            hoverinfo: 'text'\n                    }) \n\n                    bars.push({\n                            x: [i, i],\n                            y: [0, data[i].names.length],\n                            mode: 'markers+lines',\n                            type: 'scatter',\n                            line: {\n                                color: data[i].colors.length > 1 ? '#777777' : data[i].colors[0],\n                                width: 10\n                            },\n                            marker: {\n                                color: data[i].colors.length > 1 ? '#777777' : data[i].colors[0],\n                                symbol: 'line-ew',\n                                size: 10\n                            },\n                            text: data[i].names.length,\n                            hoverinfo: 'text'\n                    })\n                }\n                setUpsetData({points: points, bars: bars})\n            }else{\n                const barDatasets = json.barData\n                barDatasets.sort((a, b) => (a.value > b.value) ? 1: -1)\n\n                setBarData([{\n                    x: barDatasets.map((item) => {return item.value}), \n                    y: barDatasets.map((item) => {return item.name}), \n                    type: 'bar',\n                    orientation: 'h',\n                    marker: {\n                        color: barDatasets.map((item) => {return item.color})\n                    }\n                }])\n            }\n            setIsPlotReady(true)\n        }\n        setIsPlotReady(false)\n        if(isReady){\n            console.log(parameters)\n            updateData()\n        }\n    }, [parameters])\n    \n    return (\n        <React.Fragment>\n            <h4>Select Dataset Metrics to View</h4>\n            <div className='stats-dataset-metric-control'>\n                {\n                    metricSet.map((metric) => {\n                        return(\n                            <div className='stats-chart-control-checkbox' key={metric.value}>\n                                <RadioButton inputId={metric.name} value={metric.value} checked={parameters.metricName === metric.value}\n                                    onChange={e => {\n                                        let params = {...parameters}\n                                        params.metricName = e.value\n                                        setParameters(params)\n                                    }\n                                }></RadioButton>\n                                <div>{metric.name}</div>\n                            </div>\n                        )\n                    })\n                }\n            </div>    \n            <div className='stats-dataset-chart'>\n                {isPlotReady ? \n                    <div className='stats-dataset-plot'>\n                        {\n                            parameters.metricName === 'experiments' || parameters.metricName === 'cellLineDrugPairs' || parameters.metricName === 'genes' ?\n                            <Plot\n                                data= {barData}\n                                layout={ {\n                                    autosize: true,\n                                    margin: {t: 50, b: 50, l: 130, r: 10},\n                                    showlegend: false\n                                } }\n                                style = {{width: \"100%\", height: '300px'}}\n                                useResizeHandler = {true}\n                                config = {{displayModeBar: false}}\n                            />\n                            :\n                            <UpsetPlot data={upsetData} />\n                        }\n                    </div>\n                    :\n                    <div className='componentLoaderContainer'>\n                        <Loader type=\"ThreeDots\" color=\"#3D405A\" height={100} width={100} />\n                    </div>\n                }\n                <div className='stats-dataset-chart-control'>\n                    <h4>Select Dataset(s) to View</h4>\n                    {\n                        parameters.datasets.map((dataset) => {\n                            return(\n                                <div className='stats-chart-control-checkbox dataset-checkbox' key={dataset.name}>\n                                    <Checkbox inputId={dataset.name} value={dataset.name} checked={dataset.checked}\n                                        onChange={e => {\n                                            let params = {...parameters}\n                                            let index = params.datasets.findIndex(item => item.name === dataset.name)\n                                            params.datasets[index].checked = e.checked\n                                            setParameters(params)\n                                        }\n                                    }></Checkbox>\n                                    <label htmlFor={dataset.name}>{dataset.name}</label>\n                                </div>\n                            )\n                        })\n                    }\n                </div>  \n            </div>\n        </React.Fragment>\n    );\n}\n\nexport default DatasetChart;","import React, {useState, useEffect} from 'react';\nimport './Stats.css';\nimport {DataTable} from 'primereact/datatable';\nimport {Column} from 'primereact/column';\nimport { Link } from 'react-router-dom';\nimport DatasetChart from './DatasetChart';\nimport Loader from 'react-loader-spinner';\n\nconst Stats = () => {\n\n    const [psets, setPSets] = useState([])\n    const [chartData] = useState([])\n    const [isReady, setIsReady] = useState(false)\n\n    useEffect(() => {\n        const getData = async () => {\n            const res = await fetch('/api/stats/data')\n            const json = await res.json()\n            console.log(json)\n            setPSets(json.psets)\n            setIsReady(true)\n        }\n        getData()\n    }, [])\n    \n    const nameColumnTemplate = (rowData, column) => {\n        let route = '/' + rowData.doi;\n        return(\n            <Link to={route} target=\"_blank\">{rowData.name}</Link>\n        );\n    }\n        \n    return(\n        <div className='pageContent'>\n            <h2>Dataset Metrics and PSet Usage Statistics</h2>\n            {\n                isReady ?\n                <div className='statContainer'>\n                    <div className='container downloadHistogram'>\n                        <h3>Dataset Metrics</h3>\n                        <DatasetChart chartData={chartData} />\n                    </div>\n                    <div className='container rankingTable'>\n                        <h3>Download Ranking</h3>\n                        <DataTable \n                            value={psets} paginator={true} rows={10} scrollable={true} \n                            resizableColumns={true} columnResizeMode=\"fit\"\n                        >\n                            <Column className='textField' field='download' header='Number of Downloads' style={{width:'5%', textAlign:'center'}} sortable={true} />\n                            <Column className='textField' field='name' header='Name' style={{width:'7%', textAlign:'center'}} body={nameColumnTemplate} sortable={true} />\n                            <Column className='textField' field='dataset' header='Dataset' style={{width:'5%', textAlign:'center'}} sortable={true} />\n                            <Column className='textField' field='version' header='Drug Sensitivity' style={{width:'5%', textAlign:'center'}} sortable={true} />\n                        </DataTable>\n                    </div>  \n                </div>\n                :\n                <div className='componentLoaderContainer'>\n                    <Loader type=\"ThreeDots\" color=\"#3D405A\" height={100} width={100} />\n                </div>\n            }\n        </div>\n    );\n}\n\nexport default Stats;","import React from 'react';\n\nconst Overview = () => {\n    return(\n        <div className='documentation'>\n            <h1>Overview</h1>\n\n                <div>\n                    <h3>Introduction</h3>\n                    <p>\n                        <b>ORCESTRA</b> is a new web application that enables users to search, request and manage pharmacogenomic datasets (PSets).\n                        <br />\n                        PSets are generated with an automated pipeline by using a version controlling platform called Pachyderm. Upon completion of the pipeline, a newly generated PSet is uploaded to Zenodo, a data-sharing platform, and is assigned a DOI.\n                        <br />\n                        With Pachyderm's strict version controlling system, coupled with the DOI assignment, ORCESTRA ensures that your experiments with PSets are transparent and easily reproducible.\n                    </p>\n                    <h3>System Overview</h3>  \n                    <p>\n                        The <b>ORCESTRA</b> system consists of three main layers:   \n                    </p>  \n                    <ol>\n                        <li><b>Web application layer</b> which allows users to view and submit PSet requests</li>\n                        <li><b>Data processing layer</b> which utilizes a version control software called Pachyderm to process requested data</li>\n                        <li><b>Data sharing layer</b> which utilizes Zenodo to ensure that the generated dataset is tagged with a DOI</li>\n                    </ol>     \n                    <div className='img-architecture'>\n                        <img src={process.env.PUBLIC_URL + \"/images/documentation/architecture.png\"} alt=''/>\n                    </div>\n                    <div className='bottom-fill'></div>  \n                </div>  \n        </div>    \n    );\n}\n\nexport default Overview","import React from 'react';\n\nconst Search = () => {\n    return(\n        <div className='documentation'>\n            <h1>Search</h1>\n                <div>\n                    <h3>How to search existing PSets</h3>\n                    <p>\n                        Existing PSets can be searched on <a href='/PSetSearch'>Search and Request</a> page.<br />\n                        User can select different pipeline parameters uder PSet Parameters pane. Each selection of parameters triggers a database search. The search result is displayed on the data table as shown in the figure below.\n                    </p> \n                    <div className='img-full'>\n                        <img src={process.env.PUBLIC_URL + \"/images/documentation/search.png\"} alt='' />\n                    </div>  \n                    <h3>How to view metadata of a PSet</h3>\n                    <p>\n                        Metadata of a PSet can be viewed by clicking a dataset name on the search table.<br />\n                        Explore PSet view is displayed as in the figure below where user can view publications associated with the dataset, and command lines used in the pipeline to generate the PSet.\n                    </p> \n                    <div className='img-full'>\n                        <img src={process.env.PUBLIC_URL + \"/images/documentation/explore_pset.png\"} alt='' />\n                    </div>\n                    <div className='bottom-fill'></div> \n                </div>      \n        </div>    \n    );\n}\n\nexport default Search","import React from 'react';\n\nconst Request = () => {\n    return(\n        <div className='documentation'>\n            <h1>Request</h1> \n                <div>\n                    <h3>How to request a PSet</h3>\n                    <p>\n                        To request a PSet, turn on the Request mode on <a href='/PSetSearch'>Search and Request</a> view with the toggle button on top of the PSet Parameters pane. In the requets mode, two text fields to enter the PSet name and email address to receive pipeline completion notification will be displayed.<br />\n                        Once all the information is filled out, including the PSet name and email address, the Submit Request button becomes active.<br />\n                        PSet request is submitted upon clicking the Submit button.\n                    </p> \n                    <div className='img-full'>\n                        <img src={process.env.PUBLIC_URL + \"/images/documentation/request.png\"} alt='' />\n                    </div>  \n                    <h3>How to check status of your request</h3>\n                    <p>\n                        Status of your pipeline request can be viewed at <a href='/Dashboard'>Request Status</a> view.<br /> \n                        Status of your request can either be \"pending\" or \"in-process\". Pending requests are the ones that have been successfully submitted, and will be processed once the Pachyderm cluster is online. In-process requests have been successfully submitted, and the pipeline execution has been started.\n                    </p> \n                    <div className='img-full'>\n                        <img src={process.env.PUBLIC_URL + \"/images/documentation/request_status.png\"} alt='' />\n                    </div> \n                    <div className='bottom-fill'></div>\n                </div>\n        </div>    \n    );\n}\n\nexport default Request","import React from 'react';\n\nconst UserProfile = () => {\n    return(\n        <div className='documentation'>\n            <h2>User Profile and Usage Statistics</h2>\n            <div>\n                <h3>What you can do with your profile</h3>\n                <p>\n                    <b>ORCESTRA</b> comes with user account feature which allows registred users to:\n                </p>\n                <ul>\n                    <li>Save existing PSets as \"favorites\".</li>\n                    <li>Keep track of the user's PSet reguqest status.</li>\n                </ul>\n                <p>\n                    To register for the user account, simply click on the \"Login/Register\" button on navigation \n                    bar, and enter your email address and password.\n                </p> \n            </div>\n            <div>\n                <h3>Usage Statistics</h3>\n                <p>\n                    <b>ORCESTRA</b>'s usage metrics can be viewed at <a href='http://orcestra.ca/Stats'>Statistics</a> page.<br />\n                    <b>ORCESTRA</b> currently provides the download ranking of the existing PSets.\n                </p>   \n            </div>\n        </div>    \n    );\n}\n\nexport default UserProfile","import React from 'react';\nimport styled from 'styled-components';\nimport download from 'downloadjs';\n\nconst StyledTable = styled.table`\n    text-align: left;\n    font-size: 14px;\n    .download {\n        border: none;\n        background: none;\n        font-size: 16px;\n        cursor: pointer;\n        color: #3D405A;\n    }\n`\n\nconst DocSection = styled.div`\n    margin-top: 10px;\n    margin-bottom: 30px;\n    .docContent {\n        margin-left: 20px;\n    }\n`\n\nconst DataContribution = () => {\n\n    const exampleFilesTable = (files) => (\n        <StyledTable>\n            <thead>\n                <tr>\n                    <th>Download Example File(s):</th>\n                </tr> \n            </thead>\n            <tbody>\n            {\n                files.map(file => (\n                    <tr key={file}>\n                        <td>{file}</td>\n                        <td>\n                            <button className='download' title='Download' onClick={(e) => {\n                                e.preventDefault();\n                                downloadFile(file);\n                            }}>\n                                <i className=\"pi pi-fw pi-download\"></i>\n                            </button>\n                        </td>\n                    </tr>\n                ))\n            } \n            </tbody>  \n        </StyledTable>\n    );\n\n    const downloadFile = async (file) => {\n        const res = await fetch('/api/example-download/' + file);\n        const blob = await res.blob();\n        download(blob, file);\n    }\n\n    return(\n        <div className='documentation'>\n            <h2>Contributing Your Data</h2>\n            <div>\n                Please ensure your data submission includes the following files, in the format of the example CSV files provided below:\n            </div>\n            <div>\n                <DocSection>\n                    <h3>1. Sample annotation</h3>\n                    <div className='docContent'>\n                        {exampleFilesTable(['example_sample_annotation.csv'])}\n                        <p>\n                            File (.CSV) that includes each sample with respective unique ID's (unique.sample.id). For cell lines, please also provide Cellosaurus Accession IDs. If a cell line is not present in Cellosaurus, indicate with NA. In addition, please include tissue types (tissue.id) for each sample and any other sample metadata in the CSV that you would like to include in your data object.\n                            <br />\n                            Cellosaurus: <a href='https://web.expasy.org/cellosaurus/'>https://web.expasy.org/cellosaurus/</a>\n                        </p> \n                    </div> \n                </DocSection> \n                <DocSection>\n                    <h3>2. Drug annotation</h3>\n                    <div className='docContent'>\n                        {exampleFilesTable(['example_drug_annotation.csv'])}\n                        <p>\n                            File (.CSV) that includes each drug compound with respective unique ID's (unique.drug.id). Please also provide PubChem CID for each drug compound. If a drug is not present in PubChem, indicate CID with NA. In addition, include any other drug metadata in the CSV that you would like to include in your data object.\n                            <br />\n                            PubChem: <a href='https://pubchem.ncbi.nlm.nih.gov'>https://pubchem.ncbi.nlm.nih.gov</a>\n                        </p>\n                    </div>  \n                </DocSection>\n                <DocSection>\n                    <h3>3. Raw drug sensitivity data</h3>\n                    <div className='docContent'>\n                        {exampleFilesTable(['example_drug_annotation.csv', 'example_raw_drug_viability.csv'])}\n                        <ol>\n                            <li>\n                                File (.CSV) that contains the doses (in micromolar) utilized each drug compound and sample pair. A unique experiment ID must be used for each drug compound and sample pair, which follows the following format (unique.sampleid_unique.drugid) - refer to example_raw_drug_dose.csv\n                            </li>\n                            <li>\n                                File (.CSV) that contains the viability (in percentage %) for each dose of the respective unique experiment ID (unique.sampleid_unique.drugid) - refer to example_raw_drug_viability.csv\n                            </li>\n                        </ol>\n                        <p>\n                            *NOTE: If an experiment was performed more than once for a given drug compound and sample pair (unique.sampleid_unique.drugid), ensure that the unique unique experiment ID reflects this by appending \"_number\" to the end of the unique experiment ID (e.g. 380_XMD8-85_1; 380_XMD8-85_2; 380_XMD8-85_3) \n                        </p>\n                    </div>\n                </DocSection>\n                <DocSection>\n                    <h3>4. Drug sensitivity info</h3>\n                    <div className='docContent'>\n                        {exampleFilesTable(['example_sensitivity_info.csv'])}\n                        <p>\n                            File (.CSV) that contains the minimum and maximum drug dose (in micromolar) used for each unique experiment ID (unique.sampleid_unique.drugid), along with the respective unique.sample.id and unique.drug.id.\n                        </p>\n                    </div>\n                </DocSection> \n                <DocSection>\n                    <h3>5. Processed molecular profile data</h3>\n                    <div className='docContent'>\n                        {exampleFilesTable(['example_rnaseq.csv '])}\n                        <p>\n                            We accept processed RNA-seq, microarray, mutation, and CNV data. For each datatype, ensure rows are denoted as gene, transcript, or probe ID's, while columns are denoted as samples (unique.sample.id). Please also indicate which tools and their versions were used to process your molecular data (e.g. Kallisto v.0.43.1 for RNA-seq), including information about all accompanying files required to process your data (e.g. Gencode v33 transcriptome for RNA-seq; SureSelectHumanAllExonV5 BED file for mutation calling).\n                        </p> \n                    </div>\n                </DocSection>\n                <DocSection>\n                    <h3>6. Other metadata to include in ORCESTRA</h3>\n                    <div className='docContent'>\n                        <p>\n                            If your data is associated with specific publications, please provide us with respective publication links for each data source (drug sensivitity data, molecular profiles).\n                        </p>\n                    </div> \n                </DocSection>\n            </div>\n        </div>    \n    );\n}\n\nexport default DataContribution","import React, {useState, useEffect} from 'react';\nimport {ScrollPanel} from 'primereact/scrollpanel';\n\nconst AvailablePSets = () => {\n    \n    const [data, setData] = useState([])\n\n    useEffect(() => {\n        const getData = async () => {\n            const res = await fetch('/api/psets/available')\n            const data = await res.json()\n            setData(JSON.stringify(data, null, 2))\n        }\n        getData()\n    }, [])\n    \n    return(\n        <div className='documentation'>\n            <h2>List of Available PSets</h2>\n            <p>\n                This RESTful API call restrieves a list of available PSets in the database:<br />\n                <code className='code'>curl http://api.orcestra.ca/psets/available</code><br />\n                Current result of the successful API call is as follows:<br />\n            </p>\n            <ScrollPanel className='documentation-scroll'>\n                <div>\n                    <pre>\n                        {data}\n                    </pre>    \n                </div>\n            </ScrollPanel>\n        </div>    \n    );\n}\n\nexport default AvailablePSets","import React, {useState, useEffect} from 'react';\nimport {ScrollPanel} from 'primereact/scrollpanel';\n\nconst PSetMetadata = () => {\n    const [data, setData] = useState([])\n\n    useEffect(() => {\n        const getData = async () => {\n            const res = await fetch('/api/pset/10.5281/zenodo.3905462')\n            const data = await res.json()\n            console.log(data)\n            setData(JSON.stringify(data, null, 2))\n        }\n        getData()\n    }, [])\n    \n    return(\n        <div className='documentation'>\n            <h2>Single PSet</h2>\n            <p>\n                This RESTful API call restrieves a PSet associated with specified DOI:<br />\n                <code className='code'>curl http://api.orcestra.ca/pset/[ DOI ]</code><br />\n                Example:<br />\n                <code className='code'>curl http://api.orcestra.ca/pset/10.5281/zenodo.3905462</code><br />\n                Current result of the successful API call is as follows:<br />\n            </p>\n            <ScrollPanel className='documentation-scroll'>\n            <div>\n                <pre>\n                    {data}\n                </pre>    \n            </div>\n            </ScrollPanel>\n        </div>    \n    );\n}\n\nexport default PSetMetadata","import React, {useState, useEffect} from 'react';\nimport {ScrollPanel} from 'primereact/scrollpanel';\n\nconst StatisticsAPI = () => {\n    const [data, setData] = useState([])\n\n    useEffect(() => {\n        const getData = async () => {\n            const res = await fetch('/api/psets/statistics/5')\n            const data = await res.json()\n            setData(JSON.stringify(data, null, 2))\n        }\n        getData()\n    }, [])\n    \n    return(\n        <div className='documentation'>\n            <h2>Statistics</h2>\n            <p>\n                This RESTful API call restrieves a list of PSets ordered by the number of downloads:<br />\n                <code className='code'>curl http://api.orcestra.ca/psets/statistics/[ number of psets to be returned ]</code><br />\n                Example:<br />\n                <code className='code'>curl http://api.orcestra.ca/psets/statistics/5</code><br />\n                Current result of the successful API call is as follows:<br />\n            </p>\n            <ScrollPanel className='documentation-scroll'>\n            <div>\n                <pre>\n                    {data}\n                </pre>    \n            </div>\n            </ScrollPanel>\n        </div>    \n    );\n}\n\nexport default StatisticsAPI","import React, { useState } from 'react';\nimport './Documentation.css';\n\nimport Overview from './DocFunctionality/Overview';\nimport Search from './DocFunctionality/Search';\nimport Request from './DocFunctionality/Request';\nimport UserProfile from './DocFunctionality/UserProfile';\nimport DataContribution from './DocFunctionality/DataContribution';\nimport AvailablePSets from './DocAPI/AvailablePSets';\nimport PSetMetadata from './DocAPI/PSetMetadata';\nimport StatisticsAPI from './DocAPI/StatisticsAPI';\n\nconst Documentation = (props) => {\n    \n    const [display, setDisplay] = useState(props.match.params.section);\n\n    return(\n        <div className='pageContent'>\n            <div className='documentationContent'>\n                <nav className='documentationNav'>\n                    <h2>Functionality</h2>\n                    <ul>\n                        <li className={display === 'overview' ? 'selected' : undefined}>\n                            <button type='button' onClick={() => setDisplay('overview')}>Overview</button>\n                        </li>\n                        <li className={display === 'search' ? 'selected' : undefined}>\n                            <button type='button' onClick={() => setDisplay('search')}>Search</button>\n                        </li>    \n                        <li className={display === 'request' ? 'selected' : undefined}>\n                            <button type='button' onClick={() => setDisplay('request')}>Request</button>\n                        </li>\n                        <li className={display === 'userProfile' ? 'selected' : undefined}>\n                            <button type='button' onClick={() => setDisplay('userProfile')}>Profile/Statistics</button>\n                        </li>\n                    </ul> \n                    <h2>Support</h2>\n                    <ul>\n                        <li className={display === 'datacontribution' ? 'selected' : undefined}>\n                            <button type='button' onClick={() => setDisplay('datacontribution')}>Contributing Your Data</button>\n                        </li>   \n                    </ul>\n                    <h2>API</h2>\n                    <ul>\n                        <li className={display === 'api-psets-available' ? 'selected' : undefined}>\n                            <button type='button' onClick={() => setDisplay('api-psets-available')}>Available PSets</button>\n                        </li>\n                        <li className={display === 'api-pset-single' ? 'selected' : undefined}>\n                            <button type='button' onClick={() => setDisplay('api-pset-single')} >Single PSet</button>\n                        </li>\n                        <li className={display === 'api-statistics' ? 'selected' : undefined}>\n                            <button type='button' onClick={() => setDisplay('api-statistics')}>Statistics</button>\n                        </li>    \n                    </ul>\n                </nav>\n                {display === 'overview' && <Overview /> }\n                {display === 'search' && <Search /> }\n                {display === 'request' && <Request /> }\n                {display === 'userProfile' && <UserProfile /> }\n                {display === 'datacontribution' && <DataContribution /> }\n                {display === 'api-psets-available' && <AvailablePSets /> }\n                {display === 'api-pset-single' && <PSetMetadata /> }\n                {display === 'api-statistics' && <StatisticsAPI /> }\n            </div>\n        </div>\n    );\n}\n\nexport default Documentation;","import React, {useState, useContext, useEffect} from 'react';\nimport { Link } from \"react-router-dom\";\nimport './UserInfo.css'\nimport {Button} from 'primereact/button';\nimport {InputText} from 'primereact/inputtext';\nimport {Messages} from 'primereact/messages';\nimport {AuthContext} from '../../../context/auth';\n\nconst UserInfo = (props) => {\n    const auth = useContext(AuthContext);\n    const [show, setShow] = useState(false)\n    const [password1, setPassword1] = useState('')\n    const [password2, setPassword2] = useState('')\n    const [btnResetDisabled, setBtnResetDisabled] = useState(true)\n\n    useEffect(() => {\n        password1.length >= 6 ?  password1 === password2 && setBtnResetDisabled(false) : setBtnResetDisabled(true);\n    }, [password1, password2])\n    \n    const showPwdReset = (event) => {\n        event.preventDefault()\n        setShow(true)\n    }\n\n    const hidePwdReset = (event) => {\n        event.preventDefault()\n        setShow(false)\n    }\n\n    const resetPwd = async (event) => {\n        event.preventDefault()\n        const res = await fetch('/api/user/reset', {\n            method: 'POST',\n            body: JSON.stringify({\n                user: { username: auth.username, password: password1 }   \n            }),\n            headers: { 'Content-type': 'application/json' }\n        })\n        const data = await res.json();\n        if(data.authenticated){\n            console.log('authenticated');\n            auth.setAuthToken(data);\n            setPassword1('')\n            setPassword2('')\n            setShow(false)\n            UserInfo.messages.show({severity: 'success', summary: 'Password changed'});\n        }else{\n            UserInfo.messages.show({severity: 'error', summary: 'Error occurred', detail: 'Password could not be changed'});\n        }\n    }\n\n    return(\n        <div className='userInfoContainer'>\n            <h2>User Information</h2>\n            <Messages ref={(el) => UserInfo.messages = el}></Messages>\n            <div className='userInfo'>Username: {auth.username}</div>\n            { auth.isAdmin && <div className='userInfo'><Link to = '/admin'>Admin Menu</Link></div> }\n            {\n                show &&\n                <div>\n                    <div>\n                        <div className='pwdMsg'>Password needs to be at least 6 characters in length</div>\n                        <InputText className='pwdInput' type='password' name='password1' value={password1} onChange={(e) => {setPassword1(e.target.value)}}/>\n                    </div>\n                    <div>\n                        <label>Confirm your password:</label>\n                        <InputText className='pwdInput' type='password' name='password2' value={password2} onChange={(e) => {setPassword2(e.target.value)}}/>\n                    </div> \n                </div> \n            }\n            <div className='userInfoBtn'>\n                {\n                    show ? \n                    <div>\n                        <Button className='pwdReset' label='Reset' onClick={resetPwd} disabled={btnResetDisabled}/>\n                        <Button className='pwdReset' label='Cancel' onClick={hidePwdReset}/>\n                    </div>\n                    :\n                    <Button label='Reset password' onClick={showPwdReset}/>\n                }\n                \n            </div>\n        </div>\n    );\n}\n\nexport default UserInfo;","import React from 'react';\nimport PSetTable from '../../Shared/PSetTable';\nimport {Button} from 'primereact/button';\n// import DownloadPSetButton from '../../Shared/Buttons/DownloadPSetButton';\nimport {Dialog} from 'primereact/dialog';\nimport * as Helper from '../../Shared/Helper';\nimport './UserPSet.css';\n\nclass UserPSet extends React.Component{\n    \n    constructor(){\n        super();\n        this.state = {\n            selectedPSets: [],\n            btnDisabled: true,\n            dialogVisible: false,\n            btnYesDislabed: false\n        }\n        this.handleBtnClick = this.handleBtnClick.bind(this);\n        this.handleSelectionChange = this.handleSelectionChange.bind(this);\n        this.onClickYes = this.onClickYes.bind(this);\n        this.onHide = this.onHide.bind(this);\n        this.showMessages = this.showMessages.bind(this);\n    }\n\n    handleSelectionChange(selected){\n        this.setState({selectedPSets: selected}, () => {\n            if(this.state.selectedPSets && this.state.selectedPSets.length > 0){\n                this.setState({btnDisabled: false});\n            }else{\n                this.setState({btnDisabled: true});\n            }\n        });\n    }\n\n    handleBtnClick = event => {\n        this.setState({dialogVisible: true});\n    }\n\n    showMessages(status, data){\n        Helper.messageAfterRequest(status, data, null, this.props.messages);\n    }\n\n    onClickYes(){\n        this.setState({\n            btnDisabled: true,\n            btnYesDislabed: true\n        });\n        this.props.handleBtnClick(this.state.selectedPSets, (err)=>{\n            if(!err){\n                this.setState({\n                    selectedPSets: [],\n                    dialogVisible: false,\n                });\n            }else{\n                this.setState({btnDisabled: false});\n            }   \n        });\n    }\n    \n    onHide(){\n        this.setState({\n            dialogVisible: false,\n            btnYesDislabed: false\n        });\n    }\n    \n    render(){\n\n        const psetData = (\n            <React.Fragment>\n                <div>\n                    <PSetTable \n                        allData={this.props.pset} selectedPSets={this.state.selectedPSets} \n                        updatePSetSelection={this.handleSelectionChange} \n                        scrollHeight='350px' \n                        pending={this.props.pending}\n                        download={true}\n                        authenticated={true}\n                    />\n                </div>\n                <div className='footer'>\n                { !this.props.pending && <Button label={this.props.btnLabel} onClick={this.handleBtnClick} disabled={this.state.btnDisabled} /> } \n                </div>\n            </React.Fragment>\n        );\n\n        const noPSetData = (\n            <p>No data available.</p>\n        );\n\n        const dialogFooter = (\n            <div>\n                <Button label=\"Yes\" onClick={this.onClickYes} disabled={this.state.btnYesDislabed}/>\n                <Button label=\"Cancel\" onClick={this.onHide} />\n            </div>\n        );\n        \n        return(\n            <div className='userPSet'>\n                <h2>{this.props.heading}</h2>\n                <div className='userPSetContent'>\n                    {this.props.pset ? psetData : noPSetData}\n                </div>\n                <div>\n                    <Dialog header={'Removing Pset(s)'} footer={dialogFooter} visible={this.state.dialogVisible} style={{width: '300px'}} modal={true} onHide={this.onHide}>\n                        { 'Are you sure you would like to remove the selected PSet(s) from the saved list?' }\n                    </Dialog>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default UserPSet;","import React from 'react';\nimport './Profile.css';\nimport UserInfo from './subcomponents/UserInfo';\nimport UserPSet from './subcomponents/UserPSet';\nimport {Messages} from 'primereact/messages';\nimport {AuthContext} from '../../context/auth';\nimport * as Helper from '../Shared/Helper';\n\nclass Profile extends React.Component{\n\n    constructor(){\n        super();\n        this.state = {\n            username: '',\n            userEmail: '',\n            psetSaved: [],\n            psetInProcess: []\n        }\n        this.removeFromSavedList = this.removeFromSavedList.bind(this);\n        this.cancelPSetRequest = this.cancelPSetRequest.bind(this);\n        this.findPSetByID = this.findPSetByID.bind(this);\n        this.removePSetByID = this.removePSetByID.bind(this);\n    }\n\n    static contextType = AuthContext;\n\n    componentDidMount(){\n        fetch('/api/user/pset/?username=' + this.context.username)  \n            .then(res => res.json())\n            .then(resData => {\n                let complete = [];\n                let pending = [];\n                for(let i = 0; i < resData.length; i++){\n                    if(resData[i].status === 'complete'){\n                        complete.push(resData[i]);\n                    }else{\n                        pending.push(resData[i]);\n                    }\n                }\n                this.setState({\n                    psetSaved: complete,\n                    psetInProcess: pending\n                });\n            });\n    }\n\n    removeFromSavedList = (selectedPSet, callback) => {\n        var psetID = []\n        for(let i = 0; i < selectedPSet.length; i++){\n            psetID.push(selectedPSet[i]._id);\n        }\n        fetch('/api/user/pset/remove', {\n            method: 'POST',\n            body: JSON.stringify({username: this.context.username, psetID: psetID}),\n            headers: {\n                'Content-type': 'application/json'\n            }\n        })\n            .then(res => res.json())\n            .then(resData => {\n                Helper.messageAfterRequest(1, resData, null, this.messages);\n                var saved = this.state.psetSaved;\n                saved = this.removePSetByID(saved, psetID);\n                this.setState({psetSaved: saved}, callback(0));\n            })\n            .catch(err => {\n                Helper.messageAfterRequest(0, err, null, this.messages);\n                callback(1);\n            });\n    }\n\n    cancelPSetRequest = (selectedPSet, callback) => {\n        var psetID = []\n        for(let i = 0; i < selectedPSet.length; i++){\n            psetID.push(selectedPSet[i]._id);\n        }\n        fetch('/api/pset/cancel', {\n            method: 'POST',\n            body: JSON.stringify({username: this.context.username, psetID: psetID}),\n            headers: {\n                'Content-type': 'application/json'\n            }\n        })\n            .then(res => res.json())\n            .then(resData => {\n                Helper.messageAfterRequest(1, resData, null, this.messages);\n                var inProcess = this.state.psetInProcess;\n                inProcess = this.removePSetByID(inProcess, psetID);\n                this.setState({psetInProcess: inProcess}, callback(0));\n            })\n            .catch(err => {\n                Helper.messageAfterRequest(0, err, null, this.messages);\n                callback(1);\n            });\n    }\n\n    findPSetByID(psetArray, id){\n        for(let i = 0; i < psetArray.length; i++){\n            if(psetArray[i]._id === id){\n                return(i)\n            }\n        }\n        return(-1);\n    }\n\n    removePSetByID(psets, selected){\n        for(let i = 0; i < selected.length; i++){\n            let index = this.findPSetByID(psets, selected[i]);\n            if(index > -1){\n                psets.splice(index, 1);\n            }\n        }\n        return(psets);\n    }\n\n    render(){   \n        return(\n            <div className='pageContent'>\n                <h2>Your Profile</h2>\n                <div className='userProfile'>\n                    <UserInfo />\n                    <div className='userPSetLists'>\n                        <Messages ref={(el) => this.messages = el} />\n                        <UserPSet heading='Your Saved PSets' btnLabel='Remove from List' \n                            pset={this.state.psetSaved} \n                            handleBtnClick={this.removeFromSavedList}\n                            messages={this.messages}\n                        />\n                        <UserPSet heading='Your PSet Requests in Process'\n                            pset={this.state.psetInProcess} \n                            pending={true}\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Profile;","import React, {useState, useEffect, useContext} from 'react';\nimport PSetTable from '../Shared/PSetTable';\nimport {Messages} from 'primereact/messages';\nimport {Button} from 'primereact/button';\nimport styled from 'styled-components';\nimport {trackPromise} from 'react-promise-tracker';\nimport Loader from 'react-loader-spinner';\nimport {AuthContext} from '../../context/auth';\n\nconst MenuContainer = styled.div`\n    display: flex;\n    align-items: center;\n    button {\n        margin-left: 20px;\n    }\n`\n\nconst Admin = props => {\n    \n    const auth = useContext(AuthContext);\n\n    const [data, setData] = useState({ready: false, psets: []})\n    const [selected, setSelected] = useState([])\n\n    useEffect(() => {\n        const getData = async () => {\n            const res = await trackPromise(fetch('/api/pset/search', {\n                method: 'POST',\n                body: JSON.stringify({parameters: {status: 'complete'}}),\n                headers: {'Content-type': 'application/json'}\n            }));\n            const json = await res.json()\n            console.log(json);\n            setSelected(json.filter(p => {return p.canonical}))\n            setData({ready: true, psets: json})\n        }\n        getData()\n    }, [])\n\n    const updateCanonicalPSets = async (event) => {\n        event.preventDefault()\n        setData({...data, ready: false})\n        await trackPromise(fetch('/api/pset/canonical/update', {\n            method: 'POST',\n            body: JSON.stringify({selected: selected}),\n            headers: {'Content-type': 'application/json'}\n        }));\n        const res = await trackPromise(fetch('/api/pset/search', {\n            method: 'POST',\n            body: JSON.stringify({parameters: {status: 'complete'}}),\n            headers: {'Content-type': 'application/json'}\n        }));\n        const json = await res.json();\n        setSelected(json.filter(p => {return p.canonical}));\n        setData({ready: true, psets: json});\n    }\n\n    const handleSelectionChange = (selection) => {\n        console.log(selection);\n        setSelected(selection);\n    }\n    \n    return(\n        <div className='pageContent'>\n            <h2>Administrator's Menu</h2>\n            <Messages ref={(el) => Admin.messages = el} />\n            <MenuContainer>\n                <h3>Update Canonical PSets</h3>\n                <Button label='Update' type='submit' onClick={updateCanonicalPSets} />\n            </MenuContainer>\n            {\n                data.ready ?\n                <PSetTable \n                    psets={data.psets} selectedPSets={selected} \n                    updatePSetSelection={handleSelectionChange} scrollHeight='600px'\n                    authenticated={auth.authenticated}\n                    download={false}\n                /> \n                :\n                <Loader type=\"ThreeDots\" color=\"#3D405A\" height={100} width={100} />\n            }\n        </div>\n    )\n}\n\nexport default Admin","import React, {useState, useContext, useEffect} from 'react';\nimport {Button} from 'primereact/button';\nimport {InputText} from 'primereact/inputtext';\nimport {Messages} from 'primereact/messages';\nimport {AuthContext} from '../../context/auth';\n\nconst AuthForm = (props) => {\n    \n    const auth = useContext(AuthContext);\n    \n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [passwordReg1, setPasswordReg1] = useState('');\n    const [passwordReg2, setPasswordReg2] = useState('');\n    const [userChecked, setUserChecked] = useState(false);\n    const [userExists, setUserExists] = useState(false);\n    const [userRegistered, setUserRegistered] = useState(false);\n    const [btnFindDisabled, setBtnFindDisabled] = useState(true);\n    const [btnLoginDisabled, setBtnLoginDisabled] = useState(true);\n    const [btnRegDisabled, setBtnRegDisabled] = useState(true);\n\n    useEffect(() => {\n        const regex = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/;\n        regex.test(email) ? setBtnFindDisabled(false) : setBtnFindDisabled(true);\n    }, [email]);\n\n    useEffect(() => {\n        password.length >= 6 ? setBtnLoginDisabled(false) : setBtnLoginDisabled(true);\n    }, [password]);\n\n    useEffect(() => {\n        passwordReg1.length >= 6 ?  passwordReg1 === passwordReg2 && setBtnRegDisabled(false) : setBtnRegDisabled(true);\n    }, [passwordReg1, passwordReg2])\n\n    const handleInputChange = (event) => {\n        var name = event.target.name;\n        switch(name){\n            case 'email':\n                setEmail(event.target.value);\n                break;\n            case 'password':\n                setPassword(event.target.value);\n                break;\n            case 'passwordReg1':\n                setPasswordReg1(event.target.value);\n                break;\n            case 'passwordReg2':\n                setPasswordReg2(event.target.value);\n                break;\n            default:\n                break;\n        }\n    }\n\n    const initialize = () => {\n        setEmail('');\n        setPassword('');\n        setPasswordReg1('');\n        setPasswordReg2('');\n        setUserChecked(false);\n        setUserExists(false);\n        setUserRegistered(false);\n        setBtnFindDisabled(true);\n        setBtnLoginDisabled(true);\n        setBtnRegDisabled(true);\n    }\n\n    const onFindClick = async (event) => {\n        event.preventDefault();\n        const api = '/api/user/check/?username=' + email;\n        const res = await fetch(api);\n        const json = await res.json();\n        if(res.ok){\n            setUserChecked(true);\n            setUserExists(json.exists);\n            setUserRegistered(json.registered);\n        }\n    }\n\n    const onLoginClick = async (event) => {\n        event.preventDefault();\n        const res = await fetch('/api/user/login', {\n            method: 'POST',\n            body: JSON.stringify({\n                user: { username: email, password: password }   \n            }),\n            headers: { 'Content-type': 'application/json' }\n        })\n        const data = await res.json();\n        if(data.authenticated){\n            console.log('authenticated');\n            initialize();\n            auth.setAuthToken(data);\n        }else{\n            AuthForm.messages.show({severity: 'error', summary: 'Login Failed', detail: 'Please re-enter your email and password.'});\n        }\n    }\n\n    const onRegisterClick = async (event) => {\n        event.preventDefault();\n        const res = await fetch('/api/user/register', {\n            method: 'POST',\n            body: JSON.stringify({\n                user: { username: email, password: passwordReg1, exists: userExists }\n            }),\n            headers: { 'Content-type': 'application/json' }\n        })\n        const data = await res.json();\n        if(res.status){\n            initialize();\n            auth.setAuthToken({authenticated: data.authenticated, username: data.username});\n        }else{\n            AuthForm.messages.show({severity: 'error', summary: 'Registration Failed', detail: data.message});\n        }\n    }\n\n    const onResetClick = async (event) => {\n        event.preventDefault()\n        console.log('reset click')\n        const res = await fetch('/api/user/reset/email', {\n            method: 'POST',\n            body: JSON.stringify({\n                email: email \n            }),\n            headers: { 'Content-type': 'application/json' }\n        })\n        const data = await res.json()\n        if(res.ok){\n            AuthForm.messages.show({severity: 'success', summary: 'Email has been sent.', detail: 'Please follow the link in the email to reset your password.'});\n        }else{\n            AuthForm.messages.show({severity: 'error', summary: 'An error occurred', detail: data.message});\n        }\n    }\n\n    const loginForm = () => {\n        return(\n            <React.Fragment>\n                <h4>Login with your password:</h4>\n                <div className='pwdMsg'>Password needs to be at least 6 characters in length</div>\n                <InputText className='pwdInput' type='password' name='password' value={password} onChange={handleInputChange}/>\n                <div>\n                    <Button label='Login' onClick={onLoginClick} disabled={btnLoginDisabled}/>\n                </div>\n                <div>\n                    <button className='forgotPasswordBtn' onClick={onResetClick}>Reset your password</button>\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    const registerForm = () => {\n        return(\n            <React.Fragment>\n                <h4>{userExists ? 'Email is not registered. ': 'Email not found. '}Please register.</h4>\n                <div>\n                    <div className='pwdMsg'>Password needs to be at least 6 characters in length</div>\n                    <InputText className='pwdInput' type='password' name='passwordReg1' value={passwordReg1} onChange={handleInputChange}/>\n                </div>\n                <div>\n                    <label>Confirm your password:</label>\n                    <InputText className='pwdInput' type='password' name='passwordReg2' value={passwordReg2} onChange={handleInputChange}/>\n                </div>\n                <div>\n                    <Button label='Register' onClick={onRegisterClick} disabled={btnRegDisabled}/>\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    \n    return(\n        <React.Fragment>\n            <h2>Login/Register</h2>\n            <Messages ref={(el) => AuthForm.messages = el}></Messages>\n            <h4>Enter your email:</h4>\n            <div className='emailInput'>\n                <InputText type='email' name='email' value={email} onChange={handleInputChange}/>\n                <Button className='btnLoginFind' label='Find' icon=\"pi pi-arrow-right\" onClick={onFindClick} disabled={btnFindDisabled}/>\n            </div>\n            { userChecked ? <div className='formContainer'>{userRegistered ? loginForm() : registerForm()}</div> : '' }\n        </React.Fragment>\n    );\n}\n\nexport default AuthForm;","import React, {useContext} from 'react';\nimport { Redirect } from 'react-router-dom';\nimport AuthForm from './AuthForm';\nimport './Login.css';\nimport {AuthContext} from '../../context/auth';\nimport {withRouter} from 'react-router';\n\nconst Login = (props) => {\n    const auth = useContext(AuthContext);\n    const { location } = props\n    const msg = location.state ? location.state.logoutMsg : undefined;\n\n    return(\n        <React.Fragment>\n            {auth.authenticated ? \n                    location.state && location.state.path !== '/' ? \n                    <Redirect to={location.state.path}/> \n                    :\n                    <Redirect to={'/app/profile'}/> \n                : \n                <div className='pageContent'>\n                    <div className=\"loginRegContent\">\n                        <div className='logoutMsg'>{msg ? msg : ''}</div>\n                        <AuthForm />\n                    </div>   \n                </div>\n            }\n        </React.Fragment>\n    );\n}\n\nexport default withRouter(Login);","import React, {useState, useEffect} from 'react';\nimport {InputText} from 'primereact/inputtext';\nimport {Button} from 'primereact/button';\nimport {Messages} from 'primereact/messages';\nimport './Login.css';\n\nconst Reset = (props) => {\n\n    const [email, setEmail] = useState('')\n    const [password1, setPassword1] = useState('')\n    const [password2, setPassword2] = useState('')\n    const [btnDisabled, setBtnDisabled] = useState(true)\n\n    useEffect(() => {\n        const regex = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/;\n        (password1.length >= 6 && password1 === password2 && regex.test(email)) ? setBtnDisabled(false) : setBtnDisabled(true)\n    }, [email, password1, password2])\n\n    const onResetClick = async (event) => {\n        event.preventDefault()\n        const res = await fetch('/api/user/reset/token', {\n            method: 'POST',\n            body: JSON.stringify({\n                user: { \n                    username: email, \n                    password: password1,\n                    token: props.match.params.token \n                }   \n            }),\n            headers: { 'Content-type': 'application/json' }\n        })\n        const data = await res.json()\n        console.log(data)\n        if(data.status){\n            Reset.messages.show({severity: 'success', summary: 'Password has been reset', detail: 'Please login using your new password.'});\n        }else{\n            Reset.messages.show({severity: 'error', summary: 'Password could not be reset', detail: data.message});\n        }\n    }\n    \n    return(\n        <React.Fragment>\n            <div className='pageContent'>\n                <div className=\"loginRegContent\">\n                    <h2>Reset Password</h2>\n                    <Messages ref={(el) => Reset.messages = el}></Messages>\n                    <div className='emailInput'>\n                        <label>Email:</label>\n                        <InputText type='email' name='email' value={email} onChange={(e) => {setEmail(e.target.value)}}/>\n                    </div>\n                    <div className='formContainer'>\n                        <h4>Enter new password</h4>\n                        <div>\n                            <div className='pwdMsg'>Password needs to be at least 6 characters in length</div>\n                            <InputText className='pwdInput' type='password' name='password1' value={password1} onChange={(e) => {setPassword1(e.target.value)}}/>\n                        </div>\n                        <div>\n                            <label>Confirm new password:</label>\n                            <InputText className='pwdInput' type='password' name='password2' value={password2} onChange={(e) => {setPassword2(e.target.value)}}/>\n                        </div>\n                        <div>\n                            <Button label='Reset' onClick={onResetClick} disabled={btnDisabled}/>\n                        </div>\n                    </div>\n                </div> \n            </div>\n        </React.Fragment>\n    );\n}\n\nexport default Reset","import React from 'react';\nimport { TabHeader, TabContent, TabContentSection} from '../PSetStyle';\n\nclass DatasetTabContent extends React.Component{\n\n    render(){          \n        const publication = (\n            <div>    \n            {this.props.metadata.dataset.versionInfo.publication.length ? \n                this.props.metadata.dataset.versionInfo.publication.map((item) => \n                    <li key={item.link} className='pubList'>\n                        <div className='subContent'>{item.citation}</div>\n                        <br />\n                        <div className='subContent'><a href={item.link}>{item.link}</a></div>\n                    </li>\n                )\n                :\n                <div className=\"subContent\">\n                    Not available.\n                </div>\n                }  \n            </div> \n        );\n        \n        return(\n            <React.Fragment>\n                <TabHeader>Dataset: {this.props.metadata.dataset.label}</TabHeader>\n                <TabContent>\n                    <TabContentSection>\n                        <h3>Drug Sensitivity</h3>\n                        <h4 className='subContent'>Source: {\n                            this.props.metadata.dataset.versionInfo.drugSensitivity.source ? \n                            <a href={this.props.metadata.dataset.versionInfo.drugSensitivity.source}>{this.props.metadata.dataset.versionInfo.drugSensitivity.source}</a> \n                            : 'Not available'\n                            }\n                        </h4>\n                        <h4 className='subContent'>Version: {this.props.metadata.dataset.versionInfo.drugSensitivity.version}</h4>\n                        <h4 className='subContent'>Filtered Sensitivity Data: {this.props.metadata.dataset.filteredSensitivity ? 'YES' : 'NO'}</h4>\n                    </TabContentSection>\n                    \n                    <TabContentSection>\n                        <h3>Publication: </h3>\n                        <ul>\n                            {publication}\n                        </ul> \n                    </TabContentSection>\n                    \n                    <TabContentSection>\n                        <h3>Genome Version</h3>\n                        <div className='subContent'>{this.props.metadata.genome.name ? this.props.metadata.genome.name : \"Not Available\"}</div>\n                    </TabContentSection>\n                </TabContent> \n            </React.Fragment>\n        );\n    }\n}\n\nexport default DatasetTabContent;","import React from 'react';\nimport { TabContentSection} from '../PSetStyle';\n\nconst getType = function(type){\n    switch(type){\n        case 'rna':\n            return 'Microarray'\n        case 'cnv':\n            return 'Copy Number Variation'\n        case 'mut':\n            return 'Mutation'\n        case 'fusion':\n            return 'Fusion'\n        default:\n            return ''\n    }\n}\n\nconst AccompanyDataTabContent = props => {\n    \n    return(\n        <React.Fragment>\n            {\n                props.data.map(d => {\n                    return(\n                        <div key={Math.random()}>\n                        {\n                            Array.isArray(d.source) ?\n                            d.source.map(s => {\n                                return(\n                                    <TabContentSection key={Math.random()}>\n                                        <h3>{s.label}</h3>\n                                        <h4 className='subContent'>Source: {<a href={s.source}>{s.source}</a>}</h4>\n                                    </TabContentSection>\n                                )\n                            })\n                            :\n                            <TabContentSection key={Math.random()}>\n                                <h3>{getType(d.type)}</h3>\n                                <h4 className='subContent'>Source: {<a href={d.source}>{d.source}</a>}</h4>\n                            </TabContentSection>\n                        }\n                        </div>\n                    )\n                })\n            }\n        </React.Fragment>    \n    )\n}\n\nexport default AccompanyDataTabContent","import React from 'react';\nimport {PSetToolAccordion, RNARefAccordion} from '../PSetAccordion';\nimport AccompanyDataTabContent from './AccompanyDataTabContent';\nimport { TabHeader, TabContent, TabContentSection} from '../PSetStyle';\n\nconst RNATabContent = props => {\n    const rawSeqDataRNA = props.metadata.find(x => x.name === 'rawSeqDataRNA')\n    const rnaRef = props.metadata.find(x => x.name === 'rnaRef')\n    const rnaTool = props.metadata.find(x => x.name === 'rnaTool')\n    const accRNA = props.metadata.find(x => x.name === 'accRNA')\n\n    return(\n        <React.Fragment>\n            <TabHeader>RNA Data</TabHeader>\n            <TabContent>\n                {\n                    rawSeqDataRNA &&\n                    <TabContentSection>\n                        <h3>Raw Data Source: </h3>\n                        <div className='subContent'>\n                            <a href={rawSeqDataRNA.value}>{rawSeqDataRNA.value}</a>\n                        </div>\n                    </TabContentSection>\n                }\n                {\n                    rnaRef &&\n                    <TabContentSection>\n                        <h3>RNA Transcriptome</h3>\n                        <RNARefAccordion items={rnaRef.value} />\n                    </TabContentSection>\n                }\n                {\n                    rnaTool &&\n                    <TabContentSection>\n                        <h3>Tools and Commands Used</h3>\n                        <PSetToolAccordion items={rnaTool.value} />\n                    </TabContentSection>\n                }\n                {\n                    accRNA &&\n                    <AccompanyDataTabContent data={accRNA.value} />\n                }\n            </TabContent>\n        </React.Fragment>\n    );\n}\n\nexport default RNATabContent;","import React from 'react';\nimport {PSetToolAccordion, DNARefAccordion} from '../PSetAccordion';\nimport AccompanyDataTabContent from './AccompanyDataTabContent';\nimport { TabHeader, TabContent, TabContentSection} from '../PSetStyle';\n\nconst DNATabContent = props => {\n    const rawSeqDataDNA = props.metadata.find(x => x.name === 'rawSeqDataDNA')\n    const dnaRef = props.metadata.find(x => x.name === 'dnaRef')\n    const dnaTool = props.metadata.find(x => x.name === 'dnaTool')\n    const accDNA = props.metadata.find(x => x.name === 'accDNA')\n\n    return(\n        <React.Fragment>\n            <TabHeader>DNA Data</TabHeader>\n            <TabContent>\n                {\n                    rawSeqDataDNA &&\n                    <TabContentSection>\n                        <h3>Raw Data Source: </h3>\n                        <div className='subContent'>\n                            <a href={rawSeqDataDNA.value}>{rawSeqDataDNA.value}</a>\n                        </div>\n                    </TabContentSection>\n                }\n                {\n                    dnaRef &&\n                    <TabContentSection>\n                        <h3>Exome Reference</h3>\n                        <DNARefAccordion items={dnaRef.value} />\n                    </TabContentSection>\n                }\n                {\n                    dnaTool &&\n                    <TabContentSection>\n                        <h3>Tools and Commands Used</h3>\n                        <PSetToolAccordion items={dnaTool.value} />\n                    </TabContentSection>\n                }\n                {\n                    accDNA &&\n                    <AccompanyDataTabContent data={accDNA.value} />\n                }\n            </TabContent>\n        </React.Fragment>\n    );\n}\n\nexport default DNATabContent;","import React from 'react';\nimport { TabHeader, TabContent, StyledAccordion} from '../PSetStyle';\nimport {Accordion,AccordionTab} from 'primereact/accordion';\nimport styled from 'styled-components';\n\nconst PipelineContent = styled.div`\n    display: flex;\n    align-items: center;\n    h3 {\n        margin-right: 10px;\n    }\n`\n\nconst PipelineTabContent = props => {\n    return(\n        <React.Fragment>\n            <TabHeader>Pipeline Data</TabHeader>\n            <TabContent>\n                <PipelineContent>\n                    <h3>Pachyderm CommitID:</h3>\n                    <div>{props.data.commitID}</div>\n                </PipelineContent>\n                <PipelineContent>\n                    <h3>Docker Image: </h3>\n                    <a target=\"_blank\" href={'https://hub.docker.com/r/' + props.data.config.transform.image.split(':')[0]}>\n                        {props.data.config.transform.image}\n                    </a>\n                </PipelineContent>\n                <PipelineContent>\n                    <h3>Pipeline Repository: </h3>\n                    <a target=\"_blank\" href={props.data.config.input.cross[0].git.url}>{props.data.config.input.cross[0].git.url}</a>\n                </PipelineContent>\n                <StyledAccordion>\n                    <AccordionTab header='Pipeline Configuration File'>\n                        <pre>\n                            {JSON.stringify(props.data.config, null, 2)}\n                        </pre>\n                    </AccordionTab>\n                </StyledAccordion>\n            </TabContent>\n        </React.Fragment> \n    )\n}\n\nexport default PipelineTabContent","import React from 'react';\nimport styled from 'styled-components';\n\nconst StyledFilter = styled.div`\n    margin-left: ${props => props.style.margin ? props.style.margin.left : '0.5rem'};\n    margin-right: ${props => props.style.margin ? props.style.margin.right : '0.5rem'};\n`\n\nconst DefaultFilterInput = styled.input`\n    width: 100%;\n    margin-bottom: 1.0rem;\n    font-size: 14px;\n    padding: 5px;\n    border: 1px solid #999999;\n    border-radius: 3px;\n    :focus {\n        outline: none;\n    }\n`\n\nexport const Filter = ({column, style}) => {\n    return(\n        <StyledFilter style={style}>\n            {column.canFilter && column.render('Filter')}\n        </StyledFilter>\n    );\n}\n\nexport const DefaultColumnFilter = ({\n    column: {\n        filterValue, \n        setFilter, \n        preFilteredRows,\n        filterPlaceholder\n    }\n}) => {\n    return(\n        <DefaultFilterInput\n            value={filterValue || \"\"}\n            onChange={e => {\n                setFilter(e.target.value || undefined); // Set undefined to remove the filter entirely\n            }}\n            placeholder={filterPlaceholder}\n        />\n    );\n};\n\n","import React from 'react';\nimport { Dropdown } from 'primereact/dropdown';\nimport styled from 'styled-components';\n\nexport const StyledPagination = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 100%;\n    padding: 10px 0 10px 0;\n\n    .pageIndex {\n        max-width: 500px;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        margin-left: 1%;\n        margin-right: 1%;\n\n        button {\n            border: none;\n            background: none;\n            padding: 0;\n            line-height: 0;\n            cursor: pointer;\n        }\n    \n        button:focus {\n            outline: none;\n        }\n    \n        button: disabled {\n            cursor: not-allowed;\n            pointer-events: none;\n            color: #999999;\n        }\n\n        .arrows {\n            line-height: 0;\n        }\n    \n        .arrowbtn {\n            font-size: 20px;\n            color: #3D405A;\n        }\n    \n        .indexbtn {\n            font-size: 15px;\n            margin-left: 5px;\n            margin-right: 5px;\n            color: #666666;\n        }\n    \n        .current {\n            font-weight: bold;\n            color: #3D405A;\n        }\n    }\n\n    .pageCounter {\n        line-height: 0;\n        color: #666666;\n        margin-left: 1%;\n        margin-right: 1%;\n    }\n\n    .pageSkip {\n        margin-left: 1%;\n        margin-right: 1%;\n        span {\n            margin-right: 10px;\n            color: #666666;\n        }\n\n        input[type=number] {\n            width: 10%;\n            min-width: 50px;\n            padding: 5px;\n            color: #666666;\n            border: 1px solid #666666;\n            border-radius: 5px;\n        }\n\n        input:focus {\n            outline: none;\n        }\n    }\n\n    .pageSizeChange {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        margin-left: 1%;\n        margin-right: 1%;\n        span {\n            margin-left: 10px;\n            color: #666666;\n        }\n    }\n`;\n\nconst Pagination = (props) => {\n    return(\n        <StyledPagination style={props.style}>\n            {\n                props.pageOptions.length > 1 && \n                <div className='pageIndex'>\n                    <div className='arrows'>\n                        <button className='arrowbtn' onClick={() => props.gotoPage(0)} disabled={props.pageIndex === 0}>\n                            <i className='pi pi-fw pi-angle-double-left'></i>\n                        </button>\n                        <button className='arrowbtn' onClick={() => props.previousPage()} disabled={!props.canPreviousPage}>\n                            <i className='pi pi-fw pi-angle-left'></i>\n                        </button>\n                    </div>\n                    {\n                        props.pageIndexArray.map(index => (\n                            <button key={index} className={`indexbtn ${index === props.pageIndex ? 'current' : ''}`} onClick={() => props.gotoPage(index)}>\n                                {index + 1}\n                            </button>\n                        ))\n                    }\n                    <div className='arrows'>\n                        <button className='arrowbtn' onClick={() => props.nextPage()} disabled={!props.canNextPage}>\n                            <i className='pi pi-fw pi-angle-right'></i>\n                        </button>\n                        <button className='arrowbtn' onClick={() => props.gotoPage(props.pageOptions.length - 1)} disabled={props.pageIndex === props.pageOptions.length - 1}>\n                            <i className='pi pi-fw pi-angle-double-right'></i>\n                        </button>\n                    </div>\n                </div>\n            }\n            \n            {\n                props.pageCounter && \n                <div className='pageCounter'>\n                    {props.pageIndex + 1} of {props.pageOptions.length}\n                </div>\n            }\n            {\n                props.pageSkip &&\n                <div className='pageSkip'>\n                    <span>Go to:</span>\n                    <input\n                        type=\"number\"\n                        defaultValue={props.pageIndex + 1 || 1}\n                        onChange={e => {\n                            const page = e.target.value ? Number(e.target.value) - 1 : 0\n                            props.gotoPage(page)\n                        }}\n                    />\n                </div>\n            }\n            {\n                props.pageSizeChange &&\n                <div className='pageSizeChange'>\n                    <Dropdown \n                        options={[5, 10, 20, 30, 40, 50, 100].map(option => ({value: option, label: option}))} \n                        value={props.pageSize}\n                        default={props.pageSize}\n                        placeholder=''\n                        onChange={(e) => {\n                            props.setPageSize(e.value);\n                        }}\n                    />\n                    <span>rows/page</span>\n                </div>\n            }\n        </StyledPagination>\n    );\n}\n\nexport default Pagination;","import React, {useEffect, useState} from 'react';\nimport {useTable, usePagination, useFilters, useGlobalFilter, useSortBy} from 'react-table';\nimport {Filter, DefaultColumnFilter} from './TableFilters';\nimport Pagination from './Pagination';\nimport styled from 'styled-components';\n\nexport const StyledReactTable = styled.div`\n    width: ${props => props.style.width ? props.style.width : '100%'};\n    color: #666666;\n\n    table{\n        border-collapse: collapse;\n        width: ${props => props.style.width ? props.style.width : '100%'};\n    }\n\n    thead {\n        font-size: 12px;\n        color: #666666;\n    }  \n\n    tbody {\n        font-size: 12px;\n    }\n\n    tbody tr:nth-child(even) {\n\n    }\n\n    th[class='header'] {\n        vertical-align: top;\n        .headerContent {\n            display: flex;\n            align-items: ${props => props.style.headerTextAlign ? props.style.headerTextAlign : 'center'};\n            justify-content: ${props => props.style.headerTextAlign ? props.style.headerTextAlign : 'center'};\n            margin: 0.5rem 0.5rem;\n        }\n    }\n\n    th {\n        text-align: ${props => props.style.headerTextAlign ? props.style.headerTextAlign : 'center'};\n        letter-spacing: 0.5px;\n    }\n\n    tbody td {\n        padding: ${props => props.style.cellPadding ? props.style.cellPadding : '1.5rem 0.5rem'};\n        text-align: ${props => props.style.cellTextAlign ? props.style.cellTextAlign : 'center'};\n    }\n`;\n\nconst ReactDataTable = (props) => {\n\n    const [pageIndexArray, setPageIndexArray] = useState(Array.from(Array(5).keys()));\n\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        prepareRow,\n        pageOptions,\n        page,\n        state: { pageIndex, pageSize, hideHeader},\n        gotoPage,\n        previousPage,\n        nextPage,\n        setPageSize,\n        canPreviousPage,\n        canNextPage,\n    } = useTable(\n        {\n            columns: props.columns, \n            data: props.data, \n            initialState: { \n                pageIndex: 0,\n                pageSize: props.pageSize,\n                sortBy: props.sortBy ? props.sortBy : [],\n                hideHeader: props.hideHeader\n            },\n            defaultColumn: {Filter: DefaultColumnFilter},\n        },\n        useFilters,\n        useSortBy,\n        usePagination\n    );\n\n    useEffect(() => {\n        let numPages = pageOptions.length >= 5 ? 5 : pageOptions.length;\n        let start = 0;\n        // if index of the current page is not 2, shift the index array.\n        // if current index is 2 or less away from the end, shift the index array only to the last page index.\n        if(pageIndexArray.indexOf(pageIndex) != 2 && pageIndex -2 > 0 && pageIndex + 2 < pageOptions.length - 1){\n            start = pageOptions[pageIndex - 2];\n        }else if(pageIndex + 2 >= pageOptions.length - 1){ \n            start = pageOptions.length - numPages;\n        }\n        setPageIndexArray(Array(numPages).fill().map((_, i) => (start + i)));\n    }, [pageIndex]);\n\n    const getSortArrow = (column) => {\n        if(column.disableSortBy){\n            return '';\n        }else{\n            if(column.isSorted){\n                if(column.isSortedDesc){\n                    return <i className='pi pi-fw pi-arrow-down'></i>\n                }else{\n                    return <i className='pi pi-fw pi-arrow-up'></i>\n                }\n            }else{\n                return <i className='pi pi-fw pi-sort-alt'></i>\n            }\n        }\n    }\n\n    return(\n        <StyledReactTable style={props.style}>\n            <table {...getTableProps()}>\n                <thead>\n                    {\n                        headerGroups.map(headerGroup => (\n                            <tr {...headerGroup.getHeaderGroupProps()}>\n                                {\n                                    headerGroup.headers.map(column => (\n                                        <th className='header' {...column.getHeaderProps({style: {width: column.width || 'auto'}})}>\n                                            {\n                                                !hideHeader &&\n                                                <div className='headerContent' {...column.getSortByToggleProps()}>\n                                                    { column.render('Header') }\n                                                    { getSortArrow(column) }\n                                                </div>\n                                            }\n                                            <Filter column={column} style={props.filterStyle} />\n                                        </th>\n                                    ))\n                                }\n                            </tr>\n                        )) \n                    }\n                </thead>\n                <tbody {...getTableBodyProps()}>\n                    {\n                        page.map(row => {\n                            prepareRow(row);\n                            return(\n                                <tr {...row.getRowProps()}>\n                                    {\n                                        row.cells.map(cell => {\n                                            return(\n                                                <td key={Math.random()} {...cell.getCellProps}>\n                                                    {cell.render('Cell')}\n                                                </td>\n                                            );\n                                        })\n                                    }\n                                </tr>\n                            );\n                        })\n                    }\n                </tbody>\n            </table>\n            <Pagination \n                style={props.style} \n                gotoPage={gotoPage} \n                previousPage={previousPage} \n                nextPage={nextPage} \n                pageIndex={pageIndex} \n                pageIndexArray={pageIndexArray} \n                canPreviousPage={canPreviousPage} \n                canNextPage={canNextPage}\n                pageOptions={pageOptions}\n                pageSize={pageSize}\n                setPageSize={setPageSize}\n                pageCounter={props.pageCounter}\n                pageSkip={props.pageSkip}\n                pageSizeChange={props.pageSizeChange}\n            />\n        </StyledReactTable>\n    );\n}\n\nexport default ReactDataTable;","import React, {useState, useEffect, useMemo} from 'react';\nimport {usePromiseTracker} from \"react-promise-tracker\";\nimport {trackPromise} from 'react-promise-tracker';\nimport Loader from 'react-loader-spinner';\nimport styled from 'styled-components';\nimport ReactDataTable from '../../Shared/ReactDataTable/ReactDataTable';\n\nconst StyledReleaseNoteTableGroup = styled.div`\n    margin-left: 10px;\n    .flex{\n        display: flex;\n    }\n    .column {\n        width: 30%;\n        min-width: 270px;\n        margin-right: 30px;\n    }\n    .none {\n        margin-left: 10px;\n        font-weight: bold;\n        font-size: 20px;\n        color: #3D405A;\n    }\n`\n\nconst LoaderContainer = styled.div`\n    height: 300px;\n    width: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n`\n\nconst ReleaseNoteTableGroup = (props) => {\n    const {promiseInProgress} = usePromiseTracker();\n    const [data, setData] = useState({});\n    const [ready, setReady] = useState(false);\n\n    useEffect(() => {\n        const getData = async () => {\n            const res = await trackPromise(fetch(`/api/pset/releasenotes/${props.dataset.name}/${props.dataset.version}/${props.type}`));\n            const json = await res.json();\n            console.log(json);\n            setData(json);\n            setReady(true);\n        }\n        getData();\n    }, []);\n\n    const current = useMemo(\n        () => [\n            {\n                Header: ``,\n                accessor: 'name',\n                filterPlaceholder: '',\n                disableFilters: false,\n                disableSortBy: true\n            },\n        ],\n        []\n    );\n\n    const currentExp = useMemo(\n        () => [\n            {\n                Header: `Experiment ID`,\n                accessor: 'experimentID',\n                filterPlaceholder: '',\n                disableFilters: false,\n                disableSortBy: true,\n                width: '20%'\n            },\n            {\n                Header: `Cell Line`,\n                accessor: 'cellLine',\n                filterPlaceholder: '',\n                disableFilters: false,\n                disableSortBy: true,\n                width: '10%'\n            },\n            {\n                Header: `Drug`,\n                accessor: 'drug',\n                filterPlaceholder: '',\n                disableFilters: false,\n                disableSortBy: true,\n                width: '15%'\n            },\n            {\n                Header: `Min. Conc. Range`,\n                accessor: 'concRangeMin',\n                filterPlaceholder: '',\n                disableFilters: false,\n                disableSortBy: true,\n                width: '10%'\n            },\n            {\n                Header: `Max. Conc. Range`,\n                accessor: 'concRangeMax',\n                filterPlaceholder: '',\n                disableFilters: false,\n                disableSortBy: true,\n                width: '10%'\n            },\n        ],\n        []\n    );\n\n    const newData = useMemo(\n        () => [\n            {\n                Header: ``,\n                accessor: 'name',\n                filterPlaceholder: '',\n                disableFilters: false,\n                disableSortBy: true\n            },\n        ],\n        []\n    );\n\n    const removed = useMemo(\n        () => [\n            {\n                Header: ``,\n                accessor: 'name',\n                filterPlaceholder: '',\n                disableFilters: false,\n                disableSortBy: true\n            },\n        ],\n        []\n    );\n\n    const getTable = (columns, data, currentExp=false) => (\n        <ReactDataTable \n            columns={columns} \n            data={data} \n            pageSize={20} \n            pageCounter={true} \n            pageSkip={false} \n            pageSizeChange={false}\n            hideHeader={currentExp ? false : true}\n            style={{\n                headerTextAlign: 'left',\n                cellPadding: '0.5rem 0.5rem',\n                cellTextAlign: 'left'\n            }}\n            filterStyle={{\n                margin: {\n                    left: '0',\n                    right: '0'\n                }\n            }}\n        />\n    );\n\n    return(\n        <StyledReleaseNoteTableGroup>\n            {\n                (!promiseInProgress && ready) ?\n                <div>\n                    {\n                        props.type === 'experiments' &&\n                        <div>\n                            <h3>{`Current (${data[props.type].current.length})`}</h3>\n                            {getTable(currentExp, data[props.type].current, true)}\n                        </div>\n                    }\n                    <div className='flex'>\n                        {\n                            props.type != 'experiments' &&\n                            <div className='column'>\n                                <h3>{`Current (${data[props.type].current.length})`}</h3>\n                                {getTable(current, data[props.type].current)}\n                            </div>\n                        }\n                        <div className='column'>\n                            <h3>{`New${data[props.type].new.length ? ` (${data[props.type].new.length})` : ''}`}</h3>\n                            {\n                                data[props.type].new.length ? \n                                getTable(newData, data[props.type].new) : \n                                <div className='none'>N/A</div>\n                            }\n                        </div>\n                        <div className='column'>\n                            <h3>{`Removed${data[props.type].removed.length ? ` (${data[props.type].removed.length})` : ''}`}</h3>\n                            {\n                                data[props.type].removed.length ? \n                                getTable(removed, data[props.type].removed) : \n                                <div className='none'>N/A</div>\n                            }\n                        </div>\n                    </div>\n                </div>\n                :\n                <LoaderContainer>\n                    <Loader type=\"ThreeDots\" color=\"#3D405A\" height={100} width={100} />\n                </LoaderContainer>\n            }\n        </StyledReleaseNoteTableGroup>\n    );\n}\n\nexport default ReleaseNoteTableGroup;","import React, {useState} from 'react';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\nimport DatasetTabContent from './DatasetTabContent';\nimport ReleaseNoteTableGroup from './ReleaseNoteTableGroup';\n\n\nconst StyledReleaseNotes = styled.div`\n    width: 95%;\n    margin-left: auto;\n    margin-right: auto;\n`\n\nconst StyledMetricsPanel = styled.div`\n    margin-bottom: 30px;\n`\n\nconst StyledMetricGroupMenu = styled.div`\n    display: flex;\n    margin-top: 15px;\n    padding-top: 10px;\n    padding-bottom: 10px;\n    .menuItem {\n        margin-right: 10px;\n        padding-bottom: 5px;\n        button {\n            border: none;\n            background: none;\n            cursor: pointer;\n            font-size: 16px;\n            color: #3D405A;\n        }\n        button:focus {\n            outline: none;\n        }\n    }\n    .selected {\n        button {\n            font-weight: bold;\n        }\n        border-bottom: 3px solid rgb(241, 144, 33);\n    }\n`\n\nconst StyledMetricDataGroup = styled.div`\n    margin-top: 20px;    \n    margin-bottom: 20px;\n    table {\n        td {\n            padding: 0.3rem;\n            font-size: 14px;\n            .number {\n                color: #3D405A;\n                font-weight: bold;\n                font-size: 16px;\n            }\n        }\n        .title {\n            font-weight: bold;\n            color: #3D405A;\n        }\n    }\n`\n\nconst AdditionalInformation = styled.div`\n    margin-bottom: 20px;\n    table {\n        td {\n            padding: 0.3rem;\n            font-size: 14px;\n            .number {\n                color: #3D405A;\n                font-weight: bold;\n                font-size: 16px;\n            }\n        }\n        .title {\n            font-weight: bold;\n            color: #3D405A;\n        }\n    }\n`\n\nconst ReleaseNoteTabContent = (props) => {\n\n    //const [display, setDisplay] = useState('cellLines');\n\n    const getMetricDataText = (key, label, count) => {\n        switch(key){\n            case 'current':\n                return `${label}${count > 1 ? 's' : ''} in this dataset.`;\n            case 'new':\n                return `newly added ${label}${count > 1 ? 's' : ''}.`;\n            case 'removed':\n                return `${label}${count > 1 ? 's' : ''} ${count > 1 ? 'were' : 'was'} removed from previous version.`;\n        }\n    }\n\n    const getMolDataName = (key) => {\n        switch(key){\n            case 'rnaSeq':\n                return 'RNA-seq: ';\n            case 'microarray': \n                return 'Microarray: ';\n            case 'mutation':\n                return 'Mutation: ';\n            case 'mutationExome':\n                return 'Mutation (Exome): ';\n            case 'cnv':\n                return 'CNV: ';\n            case 'fusion':\n                return 'Fusion: ';\n            case 'methylation':\n                return 'Methylation: '\n        }\n    }\n\n    const metricDataGroup = (title, name, label, data, renderRow) => (\n        <StyledMetricDataGroup>\n            <h2>{title}</h2>\n            <table>\n                <tbody>\n                    { renderRow(name, data, label) }\n                </tbody>\n            </table>\n        </StyledMetricDataGroup>\n    );\n\n    const renderDataRow = (name=null, data, label) => (\n        Object.keys(data).map(key => (\n            data[key] > 0 &&\n            <tr key={key}>\n                <td><span className='number'>{ data[key] }</span></td>\n                <td className='text'>{ getMetricDataText(key, label, data[key]) }</td>\n            </tr>\n        ))\n    );\n\n    const renderMolDataRow = (name, data) => (\n        Object.keys(data).map(key => (\n            key === 'mutationExome' ? name === 'GDSC' && molDataTableRow(key, data) :  molDataTableRow(key, data)\n        ))\n    );\n\n    const molDataTableRow = (key, data) => (\n        <tr key={key}>\n            <td className='title'>{getMolDataName(key)}</td>\n            <td>\n                {\n                    data[key].available ?  \n                    <span><span className='number'>{data[key].count}</span> cell lines {data[key].noUpdates && '(no updates from previous version)'}</span>\n                    : 'Not available for this dataset.'\n                }\n            </td>\n        </tr>\n    );\n\n    return(\n        <StyledReleaseNotes>\n            {metricDataGroup('Cell Lines', props.data.name, 'cell line', props.data.releaseNotes.cellLines, renderDataRow)} \n            {metricDataGroup('Drugs', props.data.name, 'drug', props.data.releaseNotes.drugs, renderDataRow)} \n            {metricDataGroup('Drug Sensitivity Experiments', props.data.name, 'experiment', props.data.releaseNotes.experiments, renderDataRow)} \n            {metricDataGroup('Molecular Data', props.data.name, '', props.data.releaseNotes.molData, renderMolDataRow)} \n            {\n                props.data.name === 'GDSC' &&\n                <AdditionalInformation>\n                    <h2>Additional Information</h2>\n                    <table>\n                        <tbody>\n                            <tr>\n                                <td className='title'>GDSC Official Release Notes: </td>\n                                <td>\n                                    <a href={props.data.releaseNotes.additional.link} target=\"_blank\" rel=\"noopener noreferrer\">{props.data.releaseNotes.additional.link}</a>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </AdditionalInformation>\n            }\n            {/* <StyledMetricsPanel>\n                <StyledMetricGroupMenu>\n                    <div className={display === 'cellLines' ? 'menuItem selected' : 'menuItem'}>\n                        <button type='button' onClick={() => setDisplay('cellLines')}>Cell Lines</button>\n                    </div>\n                    <div className={display === 'drugs' ? 'menuItem selected' : 'menuItem'}>\n                        <button type='button' onClick={() => setDisplay('drugs')}>Drugs</button>\n                    </div>    \n                    <div className={display === 'experiments' ? 'menuItem selected' : 'menuItem'}>\n                        <button type='button' onClick={() => setDisplay('experiments')}>Experiments</button>\n                    </div>\n                    <div className={display === 'molData' ? 'menuItem selected' : 'menuItem'}>\n                        <button type='button' onClick={() => setDisplay('molData')}>Molecular Data</button>\n                    </div>\n                </StyledMetricGroupMenu>\n                {display === 'cellLines' && <ReleaseNoteTableGroup dataset={{name: props.data.name, version: props.data.version}} type='cellLines'/>}\n                {display === 'drugs' && <ReleaseNoteTableGroup dataset={{name: props.data.name, version: props.data.version}} type='drugs'/>}\n                {display === 'experiments' && <ReleaseNoteTableGroup dataset={{name: props.data.name, version: props.data.version}} type='experiments'/>}\n                {display === 'molData' && molDataGroup(props.data.molData)}\n            </StyledMetricsPanel> */}\n        </StyledReleaseNotes>\n    );\n}\n\nexport default ReleaseNoteTabContent;","import React from 'react';\nimport {Button} from 'primereact/button';\n\nconst DownloadPSetButton = props => {\n\n    const downloadPSet = async (event) => {\n        event.preventDefault();\n        \n        const anchor = document.createElement('a');\n        anchor.setAttribute('download', null);\n        anchor.style.display = 'none';\n        anchor.setAttribute('href', props.pset.downloadLink)\n        document.body.appendChild(anchor);\n        anchor.click();\n        document.body.removeChild(anchor);\n\n        await fetch('/api/pset/download', {\n            method: 'POST',\n            body: JSON.stringify({psetID: props.pset.doi}),\n            headers: {'Content-type': 'application/json'}\n        })\n    }\n\n    return(\n        <Button label='Download' disabled={props.disabled} onClick={downloadPSet} style={{marginLeft: '30px'}}/>\n    );\n}\n\nexport default DownloadPSetButton;","import React, {useState, useEffect} from 'react';\nimport {TabView,TabPanel} from 'primereact/tabview';\nimport DatasetTabContent from './TabContents/DatasetTabContent';\nimport RNATabContent from './TabContents/RNATabContent';\nimport DNATabContent from './TabContents/DNATabContent';\nimport PipelineTabContent from './TabContents/PipelineTabContent';\nimport ReleaseNoteTabContent from './TabContents/ReleaseNoteTabContent';\nimport {GeneralInfoAccordion} from './PSetAccordion';\nimport DownloadPSetButton from '../Shared/Buttons/DownloadPSetButton';\nimport {TabContainer} from './PSetStyle';\nimport styled from 'styled-components';\n\nconst StyledTitle = styled.div`\n    display: flex;\n    align-items: baseline;\n`\n\nconst PSet = (props) => {\n    const [pset, setPSet] = useState({})\n    const [ready, setReady] = useState(false)\n    const [error, setError] = useState(false)\n\n    useEffect(() => {\n        const getData = async () => {\n            try{\n                const res = await fetch('/api/pset/one/' + props.match.params.id1 + '/' + props.match.params.id2)\n                if(res.ok){\n                    const json = await res.json()\n                    console.log(json)\n                    setPSet(json)\n                    setReady(true)\n                }else{\n                    setError(true)\n                }\n            }catch(error){\n                console.log(error)\n                setError(true)\n            } \n        }\n        getData()\n    }, [])\n\n    return(\n        <div className='pageContent'>\n            {\n                ready &&\n                <React.Fragment>\n                    <StyledTitle>\n                        <h2>Explore PSet - {pset.name}</h2>\n                        <DownloadPSetButton disabled={false} pset={pset} />\n                    </StyledTitle>\n                    <GeneralInfoAccordion data={pset.generalInfo}/>\n                    <TabContainer>\n                        <TabView renderActiveOnly={false}>\n                            {\n                                pset.tabData.map(td => (\n                                    <TabPanel key={Math.random()} header={td.header}>\n                                        {td.header === 'Dataset' && <DatasetTabContent metadata={td.data} />}\n                                        {td.header === 'RNA' && <RNATabContent metadata={td.data} />}\n                                        {td.header === 'DNA' && <DNATabContent metadata={td.data} />}\n                                        {td.header === 'Pipeline' && <PipelineTabContent data={td.data} />}\n                                        {td.header === 'Release Notes' && <ReleaseNoteTabContent data={td.data} />}\n                                    </TabPanel>\n                                ))\n                            }\n                        </TabView>\n                    </TabContainer>\n                </React.Fragment>\n            } \n            { error && <h3>PSet with the specified DOI could not be found</h3>}\n        </div>\n    );\n}\n\nexport default PSet;","import React, {useState, useEffect} from 'react';\nimport { Accordion, AccordionTab } from 'primereact/accordion';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components'\n\nconst StyledContainer = styled.div`\n    margin-bottom: 20px;\n    border-radius: 10px;\n    padding-top: 5px;\n    padding-left: 30px;\n    padding-right: 30px;\n    padding-bottom: 30px;\n    background-color: rgba(255, 255, 255, 0.8);\n`\n\nconst StyledTable = styled.table`   \n    margin-left: 30px;\n    margin-bottom: 10px;\n    .psetName {\n        font-size: 16px;\n    }\n    .rnaRefColumn {\n        width: 30%;\n    }\n    td {\n        width: 20%;\n        margin: 0;\n        padding-right: 50px;\n        padding-bottom: 10px;\n        font-size: 14px;\n        font-family: arial, san-serif;\n    }\n    td .bold {\n        font-weight: bold;\n    }\n`\n\nconst NonCanonDiv = styled.div`\n    margin-left: 30px;\n    width: 60%;\n`\n\nconst NonCannonTable = styled.table`\n    td {\n        margin: 0;\n        padding-right: 30px;\n        padding-bottom: 10px;\n    }\n`\n\nconst PSetContainer = styled.div`\n    margin-bottom: 30px;\n    padding-bottom: 30px;\n    border-bottom: 1px solid #999999;\n`\n\nconst CanonicalPSets = (props) => {\n    \n    const [canonPSets, setCanonPSets] = useState([])\n    \n    useEffect(() => {\n        const getData = async () => {\n            const res = await fetch('/api/pset/canonical')\n            const json = await res.json()\n            console.log(json)\n            setCanonPSets(json)\n        }\n        getData()\n    }, [])\n\n    const toolsRefTemplate = (array) => {\n        let output ='Not Available';\n        if(array.length){\n            output = array.map(item => <div key={item.name}>{item.label}</div>);\n        }\n        return(\n            <div>{output}</div>\n        );\n    }\n\n    const nameColumnTemplate = (data) => {\n        let route = '/' + data.doi;\n        return(\n            <Link to={route} target=\"_blank\">{data.name}</Link>\n        );\n    }\n\n    const canonTable = (psets) => (\n        <StyledTable>\n            <tbody>\n            {psets.map(pset => {\n                return(\n                    <tr key={pset.name}>\n                        <td className='psetName'>{nameColumnTemplate(pset)}</td>\n                        <td><div>Drug Sensitivity Data:</div> <span className='bold'>{pset.dataset.versionInfo}</span></td>\n                        <td>RNA Tools: <span className='bold'>{toolsRefTemplate(pset.rnaTool)}</span></td>\n                        <td className='rnaRefColumn'>RNA Ref: <span className='bold'>{toolsRefTemplate(pset.rnaRef)}</span></td>\n                    </tr>\n                )\n            })}\n            </tbody>\n        </StyledTable>    \n    )\n\n    const nonCanonTable = (psets) => (\n        <NonCannonTable>\n            <tbody>\n            {psets.map(pset => {\n                return(\n                    <tr key={pset.name}>\n                        <td className='psetName'>{nameColumnTemplate(pset)}</td>\n                        <td><div>Drug Sensitivity Data:</div> {pset.dataset.versionInfo}</td>\n                        <td>RNA Tools: {toolsRefTemplate(pset.rnaTool)}</td>\n                        <td className='rnaRefColumn'>RNA Ref: {toolsRefTemplate(pset.rnaRef)}</td>\n                    </tr>\n                )\n            })}\n            </tbody>\n        </NonCannonTable> \n    )\n\n    return(\n        <div className='pageContent'>\n            <h2>List of Canonical PSets (The Latest Version of PSets Created by BHK Lab)</h2>\n            <StyledContainer>\n            {\n                canonPSets.map(dataset => (\n                    <PSetContainer key={dataset.dataset}>\n                        <h4>{dataset.dataset}</h4>\n                        {canonTable(dataset.canonicals)}  \n                        {\n                            dataset.nonCanonicals.length ?\n                            <NonCanonDiv>\n                                <Accordion>\n                                    <AccordionTab header='Other Versions'>\n                                        {nonCanonTable(dataset.nonCanonicals)}\n                                    </AccordionTab>\n                                </Accordion>\n                            </NonCanonDiv>\n                            :\n                            ''\n                        }\n                    </PSetContainer>    \n                ))\n            }\n            </StyledContainer>\n        </div>\n    )\n}\n\nexport default CanonicalPSets","import React from 'react';\n\nconst NotFound404 = (props) => {\n\n    return(\n        <React.Fragment>\n            <div className='pageContent'>\n                <h2>The page you are looking for could not be found.</h2>\n            </div>\n        </React.Fragment>\n    );\n}\n\nexport default NotFound404;","import React, {useState, useEffect} from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { AuthContext } from \"../../context/auth\";\nimport { PathContext } from \"../../context/path\";\nimport Navigation from '../Navigation/Navigation';\nimport Footer from '../Footer/Footer';\nimport PrivateRoute from './PrivateRoute';\nimport AdminRoute from './AdminRoute';\nimport Main from '../Main/Main';\nimport DatasetMain from '../Main/DatasetMain';\nimport PSetSearch from '../PSetSearch/PSetSearch';\nimport Dashboard from '../Dashboard/Dashboard';\nimport Stats from '../Stats/Stats';\nimport Documentation from '../Documentation/Documentation';\nimport Profile from '../Profile/Profile';\nimport Admin from '../Admin/Admin';\nimport Login from '../Authentication/Login';\nimport Reset from '../Authentication/Reset';\nimport PSet from '../PSet/PSet';\nimport CanonicalPSets from '../CanonicalPSets/CanonicalPSets';\nimport NotFound404 from '../Shared/NotFound404';\n\nconst Router = () => {\n    const [authToken, setAuthToken] = useState({\n        authenticated: false,\n        isAdmin: false,\n        username: ''\n    });\n\n    const [datatype, setDatatype] = useState('');\n\n    const resetAuthToken = () => {\n        setAuthToken({\n            authenticated: false,\n            isAdmin: false,\n            user: ''\n        });\n    }\n\n    useEffect(() => {\n        if(!authToken.authenticated){\n            fetch('/api/user/checkToken')\n            .then(res => {\n                return(res.json());\n            })\n            .then(data => {setAuthToken(data)});\n        }\n    }, []);\n\n    return(\n        <AuthContext.Provider value={{...authToken, setAuthToken: setAuthToken, resetAuthToken: resetAuthToken}}>\n            <PathContext.Provider value={{datatype: datatype, setDatatype: setDatatype}}>\n                <Navigation />\n                <Switch>\n                    <Route exact path ='/' component={Main} /> \n                    <Route exact path ='/:datatype' component={DatasetMain} /> \n                    <Route exact path ='/:datatype/search' component={PSetSearch}/>\n                    <Route exact path ='/:datatype/status' component={Dashboard}/>\n                    <Route exact path ='/:datatype/stats' component={Stats}/>\n                    <Route exact path ='/:datatype/documentation/:section' component={Documentation} />\n                    <Route exact path='/app/authentication' component={Login} />\n                    <Route path ='/reset/:token' component={Reset} />\n                    <Route path='/:id1/:id2' component={PSet} />\n                    <Route path='/:datatype/canonical' component={CanonicalPSets} />\n                    <PrivateRoute path='/app/profile' component={Profile} redirect='/app/authentication' />\n                    <AdminRoute path='/admin' component={Admin} redirect='/app/profile' />\n                    <Route component={NotFound404}/>\n                </Switch>\n                <Footer />\n            </PathContext.Provider>\n        </AuthContext.Provider>\n    );\n}\n\n// class Router extends React.Component{\n//     constructor(){\n//         super();\n//         this.state = {\n//             authenticated: false,\n//             isAdmin: false,\n//             username: '',\n//             datatype: '',\n//             setDatatype: (value) => {\n//                 this.setState({\n//                     ...this.state,\n//                     datatype: value\n//                 })\n//             },\n//             setAuthToken: (value) => {\n//                 this.setState({\n//                     authenticated: value.authenticated,\n//                     username: value.username,\n//                     isAdmin: value.isAdmin\n//                 });\n//             },\n//             resetAuthToken: () => {\n//                 this.setState({\n//                     authenticated: false,\n//                     isAdmin: false,\n//                     user: ''\n//                 });\n//             }\n//         }\n//     }\n\n//     componentDidMount(){\n//         if(!this.state.authenticated){\n//             fetch('/api/user/checkToken')\n//             .then(res => {\n//                 return(res.json());\n//             })\n//             .then(data => {this.state.setAuthToken(data)});\n//         }\n//     }\n\n//     render(){\n//         return(\n//             <AuthContext.Provider value={this.state}>\n//                 <Navigation />\n//                 <Switch>\n//                     <Route exact path ='/' component={Main} /> \n//                     <Route exact path ='/:datatype' component={DatasetMain} /> \n//                     <Route exact path ='/:datatype/search' component={PSetSearch}/>\n//                     <Route exact path ='/:datatype/status' component={Dashboard}/>\n//                     <Route exact path ='/:datatype/stats' component={Stats}/>\n//                     <Route exact path ='/:datatye/documentation/:section' component={Documentation} />\n//                     <Route exact path='/authentication' component={Login} />\n//                     <Route path ='/reset/:token' component={Reset} />\n//                     <Route path='/:id1/:id2' component={PSet} />\n//                     <Route path='/:datatype/canonical' component={CanonicalPSets} />\n//                     <PrivateRoute path='/profile' component={Profile} redirect='/authentication' />\n//                     <AdminRoute path='/admin' component={Admin} redirect='/profile' />\n//                     <Route component={NotFound404}/>\n//                 </Switch>\n//                 <Footer />\n//             </AuthContext.Provider>\n//         );\n//     }\n// }\n\nexport default Router;","import React, {useEffect} from 'react';\nimport ReactGA from 'react-ga';\nimport './App.css';\nimport './PrimeStyle.css';\nimport Router from '../Routing/Router';\n\nconst App = () => {\n\t\n\t// Google Analytics set up\n\tuseEffect(() => {\n\t\tReactGA.initialize('UA-102362625-2')\n\t\tReactGA.pageview(window.location.pathname + window.location.search)\n\t}, [])\n\t\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Router />\n\t\t</div>\n\t)\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'primereact/resources/themes/nova-light/theme.css';\nimport 'primereact/resources/primereact.min.css';\nimport 'primeicons/primeicons.css';\nimport App from './components/App/App';\nimport { BrowserRouter } from 'react-router-dom';\nimport * as serviceWorker from './components/serviceWorker';\n\nReactDOM.render((\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>\n), document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}