{"version":3,"sources":["context/auth.js","components/Navigation/Navigation.js","components/Footer/Footer.js","components/Routing/PrivateRoute.js","components/PSet/PSetAccordion.js","components/MainDialog/MainDialog.js","components/Main/Main.js","components/Shared/PSetDropdown/PSetDropdown.js","components/PSetSearch/subcomponents/PSetFilter.js","components/Shared/APICalls.js","components/Shared/PSetTable.js","components/Shared/Buttons/SavePSetButton.js","components/Shared/PSetAPIHelper.js","components/PSetSearch/PSetSearch.js","components/Dashboard/Dashboard.js","components/Stats/DownloadChart.js","components/Stats/Stats.js","components/Documentation/DocFunctionality/Overview.js","components/Documentation/DocFunctionality/Search.js","components/Documentation/DocFunctionality/Request.js","components/Documentation/DocFunctionality/UserProfile.js","components/Documentation/DocAPI/AvailablePSets.js","components/Documentation/DocAPI/PSetMetadata.js","components/Documentation/DocAPI/StatisticsAPI.js","components/Documentation/Documentation.js","components/Documentation/Support/Tutorial.js","components/Profile/subcomponents/UserInfo.js","components/Profile/subcomponents/UserPSet.js","components/Profile/Profile.js","components/Authentication/AuthForm.js","components/Authentication/Login.js","components/Authentication/Reset.js","components/PSet/TabContents/DatasetTabContent.js","components/PSet/TabContents/RNATabContent.js","components/PSet/TabContents/DNATabContent.js","components/Shared/Buttons/DownloadPSetButton.js","components/PSet/PSet.js","components/Shared/NotFound404.js","components/Routing/Router.js","components/App/App.js","components/serviceWorker.js","index.js"],"names":["AuthContext","createContext","withRouter","props","auth","useContext","useState","isOnline","setIsOnline","location","history","useEffect","a","fetch","status","json","checkStatus","console","log","onLoginClick","event","preventDefault","push","pathname","state","path","onLogoutClick","username","then","res","resetAuthToken","logoutMsg","Fragment","exact","to","src","alt","className","activeClassName","authenticated","label","onClick","width","isOpen","Footer","href","PrivateRoute","data","context","setAuthToken","userAuth","this","render","React","cloneElement","component","redirect","Component","contextType","PSetToolAccordion","toolAccordionTabs","items","map","item","key","name","header","commands","length","command","multiple","RNARefAccordion","rnaRefAccordionTabs","source","DNARefAccordion","exomeRefAccordionTabs","cosmic","exonTarget","GeneralInfoAccordion","doi","target","dateCreated","createdBy","DatasetDialog","datasetAccordionTabs","dataset","versions","version","drugSensitivity","publication","p","link","citation","visible","onHide","style","minWidth","minHeight","RNADialog","renderActiveOnly","rna","tool","ref","DNADialog","dna","OrcestraMain","statsData","setStatsData","rnaTool","dnaTool","rnaRef","dnaRef","formData","setFormData","pending","inProcess","dashboard","setDashboard","datasetVisible","setDatasetVisible","rnaVisible","setRNAVisible","dnaVisible","setDNAVisible","api","form","versionCombo","i","pset","fetchData","showDialog","type","hideDialog","alignSelf","value","field","body","rowData","column","route","PSetDropdown","dataTemplate","option","fontSize","margin","isHidden","selectOne","parameterName","id","optionLabel","selectedParameter","options","parameterOptions","onChange","handleUpdateSelection","filter","itemTemplate","placeholder","disabled","selectedItemTemplate","formDataInit","drugSensitivityOptions","rnaRefOptions","dnaRefOptions","url","response","PSetFilter","SearchReqContext","dataType","setDataType","setDataset","setDrugSensitivity","genome","setGenome","setRNATool","setRNARef","setDNATool","setDNARef","disableDSOptions","setdisableDSOptions","disableRNAToolRef","setdisableRNAToolRef","datasetDialogVisible","setDatasetDialogVisible","getParameters","formDataset","initialize","rnaRefs","Array","isArray","genomeName","includes","parameters","setParameters","isRequest","dsCopy","some","el","k","footer","checked","tooltip","e","fData","JSON","parse","stringify","tools","shift","setIsRequest","setRequestView","queryPSet","callback","resData","downloadPSet","psetID","method","headers","catch","err","PSetTable","rows","first","start","end","totalRecords","loading","setState","downloadOnePSet","API","anchor","document","createElement","setAttribute","display","appendChild","click","removeChild","toolsRefTemplate","output","allData","selection","selectedPSets","onSelectionChange","updatePSetSelection","paginator","scrollable","resizableColumns","columnResizeMode","selectionMode","sortable","downloadLink","_id","SavePSetButton","saveSelectedPSets","userPSet","psetId","reqData","APICalls","onSaveComplete","bind","getFilterSet","filterset","datatype","toFilterArray","datasetName","buildAPIStr","filterSet","apiStr","apiFragments","buildAPIStrFragment","replace","isReadyToSubmit","request","isSelected","hasName","email","test","isValidEmail","reqParam","messageAfterRequest","msgComponent","show","severity","summary","detail","message","sticky","toString","selectedValues","isDatasetVersion","filterArray","Object","keys","constructor","keyName","apiFragment","PSetSearch","setAllData","searchAll","setSearchAll","setSelectedPSets","disableSaveBtn","setDisableSaveBtn","readyToSubmit","setReadyToSubmit","setName","setEmail","ready","setReady","psets","initializeView","APIHelper","update","params","showMessage","messages","initializeState","selected","handleSubmitRequest","versionInfo","trackPromise","ok","Provider","usePromiseTracker","promiseInProgress","color","height","scrollHeight","Dashboard","setData","setLoading","submitRequest","result","onSubmit","dateTimeTemplate","dateTimeStr","Date","toLocaleString","undefined","dateStyle","timeStyle","d","isAdmin","button","Plot","createPlotlyComponent","Plotly","DownloadChart","x","y","orientation","marker","layout","autosize","title","xaxis","text","font","size","yaxis","autorange","titlefont","useResizeHandler","Stats","chartData","disableBtn","isReady","showMessages","download","showDownload","Overview","Search","Request","UserProfile","AvailablePSets","getData","PSetMetadata","StatisticsAPI","Documentation","setDisplay","Tutorial","UserInfo","setShow","password1","setPassword1","password2","setPassword2","btnResetDisabled","setBtnResetDisabled","resetPwd","user","password","UserPSet","handleBtnClick","dialogVisible","btnDisabled","btnYesDislabed","handleSelectionChange","onClickYes","psetData","btnLabel","noPSetData","dialogFooter","heading","modal","Profile","removeFromSavedList","selectedPSet","saved","psetSaved","removePSetByID","cancelPSetRequest","psetInProcess","userEmail","findPSetByID","complete","psetArray","index","splice","AuthForm","setPassword","passwordReg1","setPasswordReg1","passwordReg2","setPasswordReg2","userChecked","setUserChecked","userExists","setUserExists","userRegistered","setUserRegistered","btnFindDisabled","setBtnFindDisabled","btnLoginDisabled","setBtnLoginDisabled","btnRegDisabled","setBtnRegDisabled","handleInputChange","onFindClick","exists","registered","onRegisterClick","onResetClick","icon","msg","Reset","setBtnDisabled","token","match","DatasetTabContent","metadata","RNATabContent","genomeRawData","rawSeqDataRNA","DNATabContent","rawSeqDataDNA","DownloadPSetButton","PSet","general","id1","id2","onDownloadComplete","NotFound404","Router","profile","Main","Login","App","Boolean","window","hostname","ReactDOM","getElementById","navigator","serviceWorker","registration","unregister"],"mappings":"yeAEaA,EAAcC,0B,8DCsGZC,eAhGI,SAACC,GAEhB,IAAMC,EAAOC,qBAAWL,GAFE,EAGMM,oBAAS,GAHf,mBAGnBC,EAHmB,KAGTC,EAHS,KAIlBC,EAAsBN,EAAtBM,SAAUC,EAAYP,EAAZO,QAElBC,qBAAU,YACW,uCAAG,8BAAAC,EAAA,sEACKC,MAAM,yBADX,cACVC,EADU,gBAEGA,EAAOC,OAFV,OAEVA,EAFU,OAGhBP,EAAYO,EAAKR,UAHD,2CAAH,qDAKjBS,KACD,IAEHL,qBAAU,WACNM,QAAQC,IAAI,iBAAmBX,EAAW,SAAW,cACtD,CAACA,IAEJ,IAAMY,EAAe,SAACC,GAClBA,EAAMC,iBACNX,EAAQY,KAAK,CAACC,SAAU,kBAAmBC,MAAM,CAACC,KAAMhB,EAASc,aAG/DG,EAAgB,SAACN,GACnBA,EAAMC,iBACNR,MAAM,qBAAuBT,EAAKuB,UAC7BC,MAAK,SAAAC,GACFzB,EAAK0B,iBACLpB,EAAQY,KAAK,CAACC,SAAU,kBAAmBC,MAAM,CAACC,KAAMhB,EAASc,SAAUQ,UAAW,6BAIlG,OACI,kBAAC,IAAMC,SAAP,KACI,gCACI,kBAAC,IAAD,CAASC,OAAK,EAACC,GAAG,KAAI,yBAAKC,IAA8B,+BAAgCC,IAAI,MAC7F,yBAAKC,UAAU,mBACX,yBAAKA,UAAU,UACX,6BAAK,kBAAC,IAAD,CAASJ,OAAK,EAACC,GAAG,IAAII,gBAAgB,eAAtC,SACL,6BAAK,kBAAC,IAAD,CAASL,OAAK,EAACC,GAAG,cAAcI,gBAAgB,eAAhD,uBACL,6BAAK,kBAAC,IAAD,CAASL,OAAK,EAACC,GAAG,aAAaI,gBAAgB,eAA/C,mBACL,6BAAK,kBAAC,IAAD,CAASL,OAAK,EAACC,GAAG,iBAAiBI,gBAAgB,eAAnD,kBACHlC,EAAKmC,eAAiB,yBAAKF,UAAU,aAAY,kBAAC,IAAD,CAASJ,OAAK,EAACC,GAAG,WAAWI,gBAAgB,eAA7C,YACnD,6BAEQlC,EAAKmC,cACL,kBAAC,SAAD,CAAQC,MAAM,SAASC,QAASf,IAAmB,kBAAC,SAAD,CAAQc,MAAM,iBAAiBC,QAAStB,KAGnG,6BACKZ,EACG,yBAAK8B,UAAU,4BACX,yBAAKA,UAAU,QAAO,uBAAGA,UAAU,iBAAwB,yBAAKA,UAAU,QAAf,gBAAmC,6BAAnC,WAG/D,0BAAMA,UAAU,6BACZ,yBAAKA,UAAU,QAAO,uBAAGA,UAAU,eAAsB,yBAAKA,UAAU,QAAf,gBAAmC,6BAAnC,cAKzE,yBAAKA,UAAU,aACX,kBAAC,QAAD,CAAMK,MAAQ,IAAMC,QAAQ,GACxB,yBAAKN,UAAU,aAAY,kBAAC,IAAD,CAASJ,OAAK,EAACC,GAAG,IAAII,gBAAgB,eAAtC,SAC3B,yBAAKD,UAAU,aAAY,kBAAC,IAAD,CAASJ,OAAK,EAACC,GAAG,cAAcI,gBAAgB,eAAhD,uBAC3B,6BAAK,kBAAC,IAAD,CAASL,OAAK,EAACC,GAAG,aAAaI,gBAAgB,eAA/C,mBACL,6BAAK,kBAAC,IAAD,CAASL,OAAK,EAACC,GAAG,iBAAiBI,gBAAgB,eAAnD,kBACHlC,EAAKmC,eAAiB,yBAAKF,UAAU,aAAY,kBAAC,IAAD,CAASJ,OAAK,EAACC,GAAG,WAAWI,gBAAgB,eAA7C,YACnD,yBAAKD,UAAU,aAEPjC,EAAKmC,cACL,kBAAC,SAAD,CAAQC,MAAM,SAASC,QAASf,IAAmB,kBAAC,SAAD,CAAQc,MAAM,iBAAiBC,QAAStB,KAGnG,6BACKZ,EACG,yBAAK8B,UAAU,4BACX,yBAAKA,UAAU,QAAO,uBAAGA,UAAU,iBAAwB,yBAAKA,UAAU,QAAf,gBAAmC,6BAAnC,WAG/D,0BAAMA,UAAU,6BACZ,yBAAKA,UAAU,QAAO,uBAAGA,UAAU,eAAsB,yBAAKA,UAAU,QAAf,gBAAmC,6BAAnC,gBAQjF,yBAAKA,UAAU,YAAYjC,EAAKmC,cAAgB,iBAAmBnC,EAAKuB,SAAW,SC7DpFiB,G,MAjCA,SAACzC,GACZ,OACI,yBAAKkC,UAAU,aACX,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,0BACX,oCACA,kBAAC,IAAD,CAASJ,OAAK,EAACC,GAAG,eAAlB,sBACA,kBAAC,IAAD,CAASD,OAAK,EAACC,GAAG,cAAlB,kBACA,kBAAC,IAAD,CAASD,OAAK,EAACC,GAAG,UAAlB,eAEJ,yBAAKG,UAAU,6BACX,uCACA,kBAAC,IAAD,CAASJ,OAAK,EAACC,GAAG,kBAAlB,iBACA,kBAAC,IAAD,CAASD,OAAK,EAACC,GAAG,aAAlB,0BACA,uBAAGW,KAAK,6BAAR,UACA,uBAAGA,KAAK,sBAAR,WAEJ,yBAAKR,UAAU,iBACX,sCACA,yBAAKA,UAAU,eAAf,kBAEI,6BAFJ,6BAIK,IACD,6BALJ,uB,QCnBdS,E,4LAIkB,IAAD,OACfjC,MAAM,wBACDe,MAAK,SAAAC,GACF,OAAkB,MAAfA,EAAIf,OACIe,EAAId,OAEJ,CAACwB,eAAe,EAAOZ,SAAU,OAG/CC,MAAK,SAAAmB,GAAS,EAAKC,QAAQC,aAAaF,Q,+BAGxC,IAAD,OACEG,EAAWC,KAAKH,QACtB,OACI,kBAAC,IAAD,CACIf,OAAK,EAACR,KAAM0B,KAAKhD,MAAMsB,KACvB2B,OAAQ,SAACjD,GAAD,OAAW+C,EAASX,cAAgBc,IAAMC,aAAa,EAAKnD,MAAMoD,UAA9B,eAA6CpD,IAAW,kBAAC,IAAD,CAAU+B,GAAI,CAACX,SAAU,EAAKpB,MAAMqD,SAAUhC,MAAO,CAACC,KAAM,EAAKtB,MAAMsB,gB,GArBhK4B,IAAMI,WAA3BX,EAEKY,YAAc1D,EAyBV8C,Q,wCC5BTa,E,iLAGE,IAAMC,EAAoBT,KAAKhD,MAAM0D,MAAMC,KAAI,SAACC,GAAD,OAC3C,kBAAC,eAAD,CAAcC,IAAKD,EAAKE,KAAMC,OAAQH,EAAKE,MACtCF,EAAKI,SAASC,OACX,4BACKL,EAAKI,SAASL,KAAI,SAACO,GAAD,OACf,wBAAIL,IAAKK,GACJA,OAKb,oBAMZ,OACIlB,KAAKhD,MAAM0D,MAAMO,OACb,kBAAC,YAAD,CAAWE,UAAU,GAChBV,GAGL,yBAAKvB,UAAU,cAAf,qB,GA1BgBgB,IAAMI,WAgChCc,E,iLAGE,IAAMC,EAAsBrB,KAAKhD,MAAM0D,MAAMC,KAAI,SAACC,GAAD,OAC7C,kBAAC,eAAD,CAAcC,IAAKD,EAAKE,KAAMC,OAAQH,EAAKE,MACvC,4BACI,wBAAI5B,UAAU,cACV,6BAAM0B,EAAKE,KAAKG,OAASL,EAAKE,KAAO,2BACrC,6BAAMF,EAAKU,OAAOL,OAAS,uBAAGvB,KAAMkB,EAAKU,QAASV,EAAKU,QAAc,iCAMrF,OACItB,KAAKhD,MAAM0D,MAAMO,OACb,kBAAC,YAAD,CAAWE,UAAU,GAChBE,GAGL,yBAAKnC,UAAU,cAAf,qB,GApBcgB,IAAMI,WA0B9BiB,E,iLAGE,IAAMC,EAAwBxB,KAAKhD,MAAM0D,MAAMC,KAAI,SAACC,GAAD,OAC/C,kBAAC,eAAD,CAAcC,IAAKD,EAAKE,KAAMC,OAAQH,EAAKE,MACvC,4BACI,wBAAI5B,UAAU,cACV,6BAAM0B,EAAKE,KAAKG,OAASL,EAAKE,KAAM,2BACpC,6BAAMF,EAAKU,OAAOL,OAAS,uBAAGvB,KAAMkB,EAAKU,QAASV,EAAKU,QAAc,4BAEzE,wBAAIpC,UAAU,cACV,6BAAM0B,EAAKa,OAAOX,MAClB,6BAAK,uBAAGpB,KAAMkB,EAAKa,OAAOH,QAASV,EAAKa,OAAOH,QAA/C,MAEJ,wBAAIpC,UAAU,cACV,6BAAM0B,EAAKc,WAAWZ,MACtB,6BAAK,uBAAGpB,KAAMkB,EAAKc,WAAWJ,QAASV,EAAKc,WAAWJ,eAMvE,OACItB,KAAKhD,MAAM0D,MAAMO,OACb,kBAAC,YAAD,CAAWE,UAAU,GAChBK,GAGL,yBAAKtC,UAAU,cAAf,qB,GA5BcgB,IAAMI,WAkC9BqB,E,iLAEE,IAAMC,EAAM,kBAAoB5B,KAAKhD,MAAM4C,KAAKgC,IAChD,OACI,kBAAC,YAAD,CAAW1C,UAAU,wBACjB,kBAAC,eAAD,CAAc6B,OAAO,uBACjB,wBAAI7B,UAAU,cAAd,cAAuCc,KAAKhD,MAAM4C,KAAKkB,MACvD,wBAAI5B,UAAU,cAAd,SAAiC,uBAAGQ,KAAMkC,EAAKC,OAAO,UAAU7B,KAAKhD,MAAM4C,KAAKgC,MAChF,wBAAI1C,UAAU,cAAd,iBAA0Cc,KAAKhD,MAAM4C,KAAKkC,aACzD9B,KAAKhD,MAAM4C,KAAKmC,WAAa,wBAAI7C,UAAU,cAAd,cAAuCc,KAAKhD,MAAM4C,KAAKmC,iB,GATtE7B,IAAMI,WCzFnC0B,EAAgB,SAAChF,GAEnB,IAAMiF,EAAuBjF,EAAMkF,QAAQvB,KAAI,SAACC,GAAD,OAC3C,kBAAC,WAAD,CAAUC,IAAKD,EAAKvB,MAAO0B,OAAQH,EAAKvB,OACpC,yBAAKH,UAAU,kBACX,kBAAC,YAAD,CAAWiC,UAAU,GAChBP,EAAKuB,SAASxB,KAAI,SAACyB,GAAD,OACf,kBAAC,eAAD,CAAcvB,IAAKuB,EAAQA,QAASrB,OAAQqB,EAAQA,SAChD,yBAAKlD,UAAU,qBACX,gDACA,wBAAIA,UAAU,cAAd,YAAqCkD,EAAQC,gBAAgBD,SAC7D,wBAAIlD,UAAU,cAAd,WAAoCkD,EAAQC,gBAAgBf,OAAS,uBAAG5B,KAAM0C,EAAQC,gBAAgBf,QAASc,EAAQC,gBAAgBf,QAAc,kBAEzJ,yBAAKpC,UAAU,qBACX,6CACA,4BACI,6BACKkD,EAAQE,YAAYrB,OACjBmB,EAAQE,YAAY3B,KAAI,SAAC4B,GAAD,OACpB,wBAAI1B,IAAK0B,EAAEC,KAAMtD,UAAU,WACvB,yBAAKA,UAAU,cAAcqD,EAAEE,UAC/B,6BACA,yBAAKvD,UAAU,cAAa,uBAAGQ,KAAM6C,EAAEC,MAAOD,EAAEC,WAIxD,yBAAKtD,UAAU,cAAf,+BAcxC,OACI,kBAAC,SAAD,CAAQ6B,OAAO,mBAAmB2B,QAAS1F,EAAM0F,QAASC,OAAQ3F,EAAM2F,OAAQC,MAAO,CAACC,SAAU,OAAQC,UAAW,SACjH,kBAAC,UAAD,KACKb,KAMXc,EAAY,SAAC/F,GACf,OACI,kBAAC,SAAD,CAAQ+D,OAAO,wBAAwB2B,QAAS1F,EAAM0F,QAASC,OAAQ3F,EAAM2F,OAAQC,MAAO,CAACC,SAAU,OAAQC,UAAW,SACtH,kBAAC,UAAD,CAASE,kBAAkB,GACvB,kBAAC,WAAD,CAAUnC,IAAI,WAAWE,OAAO,aAC5B,4DACA,kBAAC,EAAD,CAAmBL,MAAO1D,EAAMiG,IAAIC,QAExC,kBAAC,WAAD,CAAUrC,IAAI,SAASE,OAAO,kBAC1B,sEACA,kBAAC,EAAD,CAAiBL,MAAO1D,EAAMiG,IAAIE,UAOhDC,EAAY,SAACpG,GACf,OACI,kBAAC,SAAD,CAAQ+D,OAAO,kCAAkC2B,QAAS1F,EAAM0F,QAASC,OAAQ3F,EAAM2F,OAAQC,MAAO,CAACC,SAAU,OAAQC,UAAW,SAChI,kBAAC,UAAD,CAASE,kBAAkB,GACvB,kBAAC,WAAD,CAAUnC,IAAI,WAAWE,OAAO,aAC5B,4DACA,kBAAC,EAAD,CAAmBL,MAAO1D,EAAMqG,IAAIH,QAExC,kBAAC,WAAD,CAAUrC,IAAI,SAASE,OAAO,kBAC1B,8DACA,kBAAC,EAAD,CAAiBL,MAAO1D,EAAMqG,IAAIF,UCwEvCG,G,OAnJM,SAACtG,GAAW,IAAD,EAEMG,mBAAS,IAFf,mBAErBoG,EAFqB,KAEVC,EAFU,OAGIrG,mBAAS,CACrC+E,QAAS,GACTuB,QAAS,GACTC,QAAS,GACTC,OAAQ,GACRC,OAAQ,KARgB,mBAGrBC,EAHqB,KAGXC,EAHW,OAUM3G,mBAAS,CACvC4G,QAAS,EACTC,UAAW,IAZa,mBAUrBC,EAVqB,KAUVC,EAVU,OAcgB/G,oBAAS,GAdzB,mBAcrBgH,EAdqB,KAcLC,EAdK,OAeQjH,oBAAS,GAfjB,mBAerBkH,EAfqB,KAeTC,EAfS,OAgBQnH,oBAAS,GAhBjB,mBAgBrBoH,EAhBqB,KAgBTC,EAhBS,KAkB5BhH,qBAAU,YACS,uCAAG,WAAOiH,GAAP,uBAAAhH,EAAA,sEACIC,MAAM+G,GADV,cACR/F,EADQ,gBAEKA,EAAId,OAFT,OAKd,IAHMA,EAFQ,OAGRsE,EAAUtE,EAAK8G,KAAK,GAAGxC,QACzByC,EAAe,EACXC,EAAI,EAAGA,EAAI1C,EAAQjB,OAAQ2D,IAC/BD,GAAgBzC,EAAQ0C,GAAGzC,SAASlB,OAExCuC,EAAa5F,EAAKiH,MAClBf,EAAY,eAAIlG,EAAK8G,KAAK,GAAf,CAAmBC,aAAcA,KAC5CT,EAAatG,EAAKqG,WAVJ,4CAAH,sDAYfa,CAAU,uBACX,IAEH,IAOMC,EAAa,SAACC,GAChB,OAAOA,GACH,IAAK,UACDZ,GAAkB,GAClB,MACJ,IAAK,MACDE,GAAc,GACd,MACJ,IAAK,MACDE,GAAc,KAOpBS,EAAa,SAACD,GAChB,OAAOA,GACH,IAAK,UACDZ,GAAkB,GAClB,MACJ,IAAK,MACDE,GAAc,GACd,MACJ,IAAK,MACDE,GAAc,KAO1B,OACI,kBAAC,IAAM3F,SAAP,KACI,yBAAKK,UAAU,eACX,yBAAKA,UAAU,QACX,wCACA,+FACA,yBAAKA,UAAU,qBACX,yBAAKA,UAAU,eACX,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,gBACX,wDACA,yBAAKA,UAAU,uBACX,4DACA,yBAAKA,UAAU,oBACX,yBAAKA,UAAU,YAAW,4BAAQI,QAAS,WAAOyF,EAAW,aAAclB,EAASc,eADxF,IACqH,uEAErH,yBAAKzF,UAAU,oBAAmB,0BAAMA,UAAU,YAC9C,4BAAQI,QAAS,WAAOyF,EAAW,SAAUlB,EAASJ,QAAQxC,SADlE,IAC0F,iDAE1F,yBAAK/B,UAAU,oBAAmB,0BAAMA,UAAU,YAC9C,4BAAQI,QAAS,WAAOyF,EAAW,SAAUlB,EAASH,QAAQzC,SADlE,IAC0F,6CAE1F,yBAAK/B,UAAU,gBACX,uBAAGA,UAAU,SAASQ,KAAK,eAA3B,0BAKhB,yBAAKR,UAAU,kBACX,yBAAKA,UAAU,eAAe0D,MAAO,CAAEsC,UAAW,eAC9C,wDACA,yBAAKhG,UAAU,uBACX,2EACA,yBAAKA,UAAU,oBAAmB,0BAAMA,UAAU,YAAY+E,EAAUF,SAAxE,IAAwF,qDACxF,yBAAK7E,UAAU,oBAAmB,0BAAMA,UAAU,YAAY+E,EAAUD,WAAxE,IAA0F,uDAC1F,yBAAK9E,UAAU,gBAAe,uBAAGA,UAAU,SAASQ,KAAK,cAA3B,sBAI1C,yBAAKR,UAAU,kBACX,yBAAKA,UAAU,gBACX,mDACA,yBAAKA,UAAU,uBACX,kBAAC,YAAD,CAAWiG,MAAO5B,GACd,kBAAC,SAAD,CAAQrE,UAAU,YAAYkG,MAAM,WAAWrE,OAAO,aACtD,kBAAC,SAAD,CAAQ7B,UAAU,YAAYkG,MAAM,OAAOrE,OAAO,OAAOsE,KApFtE,SAACC,EAASC,GACjC,IAAIC,EAAQ,IAAMF,EAAQ1D,IAC1B,OACI,kBAAC,IAAD,CAAM7C,GAAIyG,GAASF,EAAQxE,UAmFC,yBAAK5B,UAAU,gBAAe,uBAAGA,UAAU,SAASQ,KAAK,UAA3B,sBAGtC,yBAAKR,UAAU,gBACX,6DACA,yBAAKA,UAAU,uBACX,2BACI,8EADJ,IAC2D,6BAD3D,2CAE4C,uBAAGQ,KAAK,aAAR,0BAF5C,YAW5B,kBAAC,EAAD,CAAegD,QAASyB,EAAgBxB,OAAQ,WAAOsC,EAAW,YAAa/C,QAAS2B,EAAS3B,UACjG,kBAAC,EAAD,CAAWQ,QAAS2B,EAAY1B,OAAQ,WAAOsC,EAAW,QAAShC,IAAK,CAACC,KAAMW,EAASJ,QAASN,IAAKU,EAASF,UAC/G,kBAAC,EAAD,CAAWjB,QAAS6B,EAAY5B,OAAQ,WAAOsC,EAAW,QAAS5B,IAAK,CAACH,KAAMW,EAASH,QAASP,IAAKU,EAASD,UAjEnH,O,0CCPO6B,E,iLAhEP,IAAMC,EAAgB,SAACC,GACnB,OACI,yBAAKzG,UAAU,IACX,0BAAM0D,MAAO,CAACgD,SAAS,MAAMC,OAAO,iBAAkBF,EAAOtG,SAkBzE,OAAGW,KAAKhD,MAAM8I,SACH,KAER9F,KAAKhD,MAAM+I,UAEN,yBAAK7G,UAAU,aACX,+BAAQc,KAAKhD,MAAMgJ,eACnB,kBAAC,WAAD,CACIC,GAAIjG,KAAKhD,MAAMiJ,GACf/G,UAAU,aACVgH,YAAY,QACZf,MAAOnF,KAAKhD,MAAMmJ,kBAClBC,QAASpG,KAAKhD,MAAMqJ,iBACpBC,SAAUtG,KAAKhD,MAAMuJ,sBACrBC,QAAQ,EACRC,aAAcf,EACdgB,YAAY,gBACZC,SAAU3G,KAAKhD,MAAM2J,YAMjC,yBAAKzH,UAAU,aACX,+BAAQc,KAAKhD,MAAMgJ,eACnB,kBAAC,cAAD,CACIC,GAAIjG,KAAKhD,MAAMiJ,GACf/G,UAAU,aACVgH,YAAY,QACZf,MAAOnF,KAAKhD,MAAMmJ,kBAClBC,QAASpG,KAAKhD,MAAMqJ,iBACpBC,SAAUtG,KAAKhD,MAAMuJ,sBACrBC,QAAQ,EACRC,aAAcf,EACdkB,qBA/CiB,SAAChG,GAC1B,OAAIA,EAEI,yBAAK1B,UAAU,+BACX,8BAAO0B,EAAKvB,QAKb,4CAuCHsH,SAAU3G,KAAKhD,MAAM2J,gB,GA3DdzG,IAAMI,WCC7BuG,G,OAAe,IACfhD,EAAW,GACXiD,EAAyB,GACzBC,EAAgB,GAChBC,EAAgB,G,SAELlC,E,8EAAf,WAAyBmC,GAAzB,iBAAAxJ,EAAA,sEAC2BC,MAAMuJ,GADjC,cACUC,EADV,gBAEuBA,EAAStJ,OAFhC,cAEUA,EAFV,yBAGWA,GAHX,4C,sBAMA,IA+QeuJ,EA/QI,WAEf,IAAMtH,EAAU3C,qBAAWkK,IAFN,EAIWjK,mBAAS,IAJpB,mBAIdkK,EAJc,KAIJC,EAJI,OAKSnK,mBAAS,IALlB,mBAKd+E,EALc,KAKLqF,EALK,OAMyBpK,mBAAS,IANlC,mBAMdkF,EANc,KAMGmF,EANH,OAOOrK,mBAAS,IAPhB,mBAOdsK,EAPc,KAONC,EAPM,OAQSvK,mBAAS,IARlB,mBAQdsG,EARc,KAQLkE,EARK,OASOxK,mBAAS,IAThB,mBASdwG,EATc,KASNiE,EATM,OAUSzK,mBAAS,IAVlB,mBAUduG,EAVc,KAULmE,EAVK,OAWO1K,mBAAS,IAXhB,mBAWdyG,EAXc,KAWNkE,EAXM,OAa2B3K,oBAAS,GAbpC,mBAad4K,EAbc,KAaIC,EAbJ,OAc6B7K,oBAAS,GAdtC,mBAcd8K,GAdc,KAcKC,GAdL,QAgBmC/K,oBAAS,GAhB5C,qBAgBdgL,GAhBc,MAgBQC,GAhBR,MAkBfC,GAAgB,WAWlB,MAViB,CACbhB,WACAnF,UACAG,kBACAoF,SACAhE,UACAE,SACAD,UACAE,WAKRpG,qBAAU,YACU,uCAAG,4BAAAC,EAAA,sEACWqH,EAAU,iBADrB,OACTwD,EADS,OAEfzB,EAAeyB,EAAY,GAC3BzE,EAAWyE,EAAY,GACvBvB,EAAgBlD,EAASF,OACzBqD,EAAgBnD,EAASD,OACzB0D,EAAYzD,EAASwD,SAAS,IANf,2CAAH,qDAQhBkB,KACD,IAEH/K,qBAAU,WACN,GAAqB,IAAlBiK,EAAOxG,OAEN8F,EAAgBlD,EAASF,WACxB,CAED,IAAI6E,EAAU7E,EAEd,GAAG8E,MAAMC,QAAQjB,GAAQ,CACrB,IAAIkB,EAAalB,EAAO9G,KAAI,SAAC8G,GAAY,OAAOA,EAAO3G,QAEvD0H,EAAU7E,EAAO6C,QAAO,SAACrD,GAAS,OAAOwF,EAAWC,SAASzF,EAAIsE,SAAWtE,KAE5E4D,EAAgBlD,EAASF,OAAO6C,QAAO,SAACrD,GAAS,OAAOwF,EAAWC,SAASzF,EAAIsE,SAAWtE,UAExFsF,MAAMC,QAAQF,KAEbA,EAAU7E,EAAO6C,QAAO,SAACrD,GAAS,OAAOsE,EAAO3G,OAASqC,EAAIsE,QAAUtE,MAG3E4D,EAAgBlD,EAASF,OAAO6C,QAAO,SAACrD,GAAS,OAAOsE,EAAO3G,OAASqC,EAAIsE,QAAUtE,KAI1FyE,EAAUY,GAEd,IAAMK,EAAaR,KACnBxI,EAAQiJ,cAAcD,KACvB,CAACpB,IAEJjK,qBAAU,WACN,GAAGqC,EAAQkJ,UAAU,CAEjB,GAAsB,qBAAZ7G,EACN4E,EAAyB,GACzBkB,GAAoB,OACnB,CACDlB,EAAyB5E,EAAQC,SAEjC,IADA,IAAI6G,EAAS,GAFZ,WAGOpE,GACDkC,EAAuBmC,MAAK,SAAAC,GAAE,OAAIA,EAAG7J,QAAUgD,EAAgBuC,GAAGvF,WACjEvB,QAAQC,IAAI,SACZiL,EAAO7K,KAAKkE,EAAgBuC,MAH5BA,EAAI,EAAGA,EAAIvC,EAAgBpB,OAAQ2D,IAAK,EAAxCA,GAMR4C,EAAmBwB,EAAO,IAC1BhB,GAAoB,GAIJ,WAAjB9F,EAAQpB,KACPsH,IAAwB,GACF,SAAjBlG,EAAQpB,MACb6G,EAAW,IACXC,EAAU,IACVM,IAAqB,IAErBA,IAAqB,OAGxB,CAEEhG,EAAQjB,OACP+G,GAAoB,GAEpBA,GAAoB,GAGxBlB,EAAyB,GACzB,IATC,eASOlC,GACJ,IAVH,eAUWuE,GACArC,EAAuBmC,MAAK,SAAAC,GAAE,OAAIA,EAAG7J,QAAU6C,EAAQ0C,GAAGzC,SAASgH,GAAG9J,UACtEyH,EAAuB3I,KAAK+D,EAAQ0C,GAAGzC,SAASgH,KAFhDA,EAAI,EAAGA,EAAIjH,EAAQ0C,GAAGzC,SAASlB,OAAQkI,IAAK,EAA5CA,IADJvE,EAAI,EAAGA,EAAI1C,EAAQjB,OAAQ2D,IAAK,EAAhCA,GAQR,GAAG6D,MAAMC,QAAQrG,GAAiB,CAE9B,IADA,IAAI2G,EAAS,GADiB,WAEtBpE,GACDkC,EAAuBmC,MAAK,SAAAC,GAAE,OAAIA,EAAG7J,QAAUgD,EAAgBuC,GAAGvF,UACjE2J,EAAO7K,KAAKkE,EAAgBuC,KAF5BA,EAAI,EAAGA,EAAIvC,EAAgBpB,OAAQ2D,IAAK,EAAxCA,GAKR4C,EAAmBwB,IAI3B,IAAMH,EAAaR,KACnBxI,EAAQiJ,cAAcD,KACvB,CAAC3G,IAEJ1E,qBAAU,WACN,IAAMqL,EAAaR,KACnBxI,EAAQiJ,cAAcD,KACvB,CAACxB,EAAUhF,EAAiBoB,EAASE,EAAQD,EAASE,IAEzD,IA8DMwF,GACF,6BACI,kBAAC,SAAD,CAAQ/J,MAAM,MAAMC,QAfD,SAACrB,GACxBA,EAAMC,iBACNkK,IAAwB,MAcpB,kBAAC,SAAD,CAAQ/I,MAAM,KAAKC,QAXD,SAACrB,GACvBA,EAAMC,iBACNgK,IAAqB,GACrBP,EAAW,IACXC,EAAU,IACVQ,IAAwB,OAU5B,OACI,kBAAC,IAAMvJ,SAAP,KACI,kBAAC,SAAD,CAAQkC,OAAO,wBAAwBqI,OAAQA,GAAQ1G,QAASyF,GAAsBxF,OAAQ,kBAAMyF,IAAwB,IAAQxF,MAAO,CAACC,SAAU,OAAQC,UAAW,SACrK,yDACA,mFAIJ,yBAAK5D,UAAU,uBACX,yBAAKA,UAAU,cACX,+CACA,yBAAKA,UAAU,aACX,2BAAOA,UAAU,QAAjB,kBACA,kBAAC,cAAD,CAAamK,QAASxJ,EAAQkJ,UAAWO,QAAQ,kCAC7ChD,SAAU,SAACiD,GAAD,OAnFX,SAACR,GACpB,IAAIS,EAAQC,KAAKC,MAAMD,KAAKE,UAAU9F,IACtC,GAAGkF,EAAU,CAST,GARG7G,EAAQjB,SACPuI,EAAMtH,QAAUA,EAChBqF,EAAWrF,EAAQ,KAEpBuF,EAAOxG,SACNuI,EAAM/B,OAASA,EACfC,EAAUD,EAAO,KAElBhE,EAAQxC,OAAO,CACduI,EAAM/F,QAAUgG,KAAKC,MAAMD,KAAKE,UAAUlG,IAE1C,IADA,IAAImG,EAAQH,KAAKC,MAAMD,KAAKE,UAAUlG,IAChCmG,EAAM3I,OAAS,GACjB2I,EAAMC,QAEVlC,EAAWiC,GAEZjG,EAAO1C,SACNuI,EAAM7F,OAASA,EACfiE,EAAUjE,EAAO,SAEpB,CACD,GAAG6F,EAAMtH,QAAQjB,OAAS4F,EAAa3E,QAAQjB,OAC3CsG,EAAWiC,EAAMtH,cACf,IAAIuG,MAAMC,QAAQxG,GAAS,CAE7BqF,EAAW,CADArF,IAGf,GAAGsH,EAAM/B,OAAOxG,OAAS4F,EAAaY,OAAOxG,OACzCyG,EAAU8B,EAAM/B,aACd,IAAIgB,MAAMC,QAAQjB,GAAQ,CAE5BC,EAAU,CADAD,IAGd,GAAG+B,EAAM7F,OAAO1C,OAAS4F,EAAalD,OAAO1C,OACzC2G,EAAU4B,EAAM7F,aACd,IAAI8E,MAAMC,QAAQ/E,GAAQ,CAE5BiE,EAAU,CADCjE,IAGf6F,EAAQ3C,EACRqB,IAAqB,GAEzBrE,EAAW2F,EACX3J,EAAQiK,aAAaf,GAqCgBgB,CAAeR,EAAEpE,WAG1C,kBAAC,EAAD,CAAcc,GAAG,WAAWH,UAAU,EAAOE,cAAc,aAAaD,WAAW,EAC/EM,iBAAkBxC,EAASwD,SAAUlB,kBAAmBtG,EAAQgJ,WAAWxB,SAC3Ed,sBAAuB,SAACgD,GAAD,OAAOjC,EAAYiC,EAAEpE,UAEhD,kBAAC,EAAD,CAAcc,GAAG,UAAUH,UAAU,EAAOE,cAAc,WAAWD,UAAWlG,EAAQkJ,UACpF1C,iBAAkBxC,EAAS3B,QAASiE,kBAAmBtG,EAAQgJ,WAAW3G,QAC1EqE,sBAAuB,SAACgD,GAAD,OAAOhC,EAAWgC,EAAEpE,UAE/C,kBAAC,EAAD,CAAcc,GAAG,kBAAkBH,UAAU,EAAOE,cAAc,oBAAoBD,UAAWlG,EAAQkJ,UACrGpC,SAAUoB,EACV1B,iBAAkBS,EAAwBX,kBAAmBtG,EAAQgJ,WAAWxG,gBAAiBkE,sBAAuB,SAACgD,GAAD,OAAO/B,EAAmB+B,EAAEpE,UAExJ,kBAAC,EAAD,CAAcc,GAAG,SAASH,UAAU,EAAOE,cAAc,UAAUD,UAAWlG,EAAQkJ,UAClF1C,iBAAkBxC,EAAS4D,OAAQtB,kBAAmBtG,EAAQgJ,WAAWpB,OACzElB,sBAAuB,SAACgD,GAAD,OAAO7B,EAAU6B,EAAEpE,UAE9C,kBAAC,EAAD,CAAcc,GAAG,UAAUU,SAAUsB,GAAmBjC,cAAc,YAClEK,iBAAkBxC,EAASJ,QAAS0C,kBAAmBtG,EAAQgJ,WAAWpF,QAC1E8C,sBAAuB,SAACgD,GACpB,GAAG1J,EAAQkJ,WAAaQ,EAAEpE,MAAMlE,OAAS,EACrC,KAAMsI,EAAEpE,MAAMlE,OAAS,GACnBsI,EAAEpE,MAAM0E,QAGhBlC,EAAW4B,EAAEpE,UAGrB,kBAAC,EAAD,CAAcc,GAAG,SAASU,SAAUsB,GAAmBjC,cAAc,WAAWD,UAAWlG,EAAQkJ,UAC/F1C,iBAAkBU,EAAeZ,kBAAmBtG,EAAQgJ,WAAWlF,OACvE4C,sBAAuB,SAACgD,GAAD,OAAO3B,EAAU2B,EAAEpE,UAE9C,kBAAC,EAAD,CAAcc,GAAG,UAAUU,UAAU,EAAMX,cAAc,YACrDK,iBAAkBxC,EAASH,QAASyC,kBAAmBtG,EAAQgJ,WAAWnF,QAC1E6C,sBAAuB,SAACgD,GAAD,OAAO1B,EAAW0B,EAAEpE,UAE/C,kBAAC,EAAD,CAAcc,GAAG,SAASU,UAAU,EAAMX,cAAc,WACpDK,iBAAkBW,EAAeb,kBAAmBtG,EAAQgJ,WAAWjF,OACvE2C,sBAAuB,SAACgD,GAAD,OAAOzB,EAAUyB,EAAEpE,cC3R3D,SAAS6E,EAAUvF,EAAKwF,GAE3BvM,MAAM+G,GACDhG,MAAK,SAAAC,GAAG,OAAIA,EAAId,UAChBa,MAAK,SAAAyL,GACFD,EAASC,MA4Cd,SAASC,EAAaC,GACzBtM,QAAQC,IAAI,oBAAsBqM,GAClC1M,MAAM,qBAAsB,CACxB2M,OAAQ,OACRhF,KAAMoE,KAAKE,UAAU,CACjBS,OAAQA,IAEZE,QAAS,CACL,eAAgB,sBAGnB7L,MAAK,SAAAC,GAAG,OAAIA,EAAId,UAChB2M,OAAM,SAAAC,GAAG,OAAI1M,QAAQC,IAAIyM,MCvDlC,IAkFeC,EAlFG,SAACzN,GAEf,IAAMC,EAAOC,qBAAWL,GAFC,EAICM,mBAAS,CAC/BuN,KAAM,GACNC,MAAO,EACPC,MAAO,EACPC,IAAK,GACLC,aAAc,EACdC,SAAS,IAVY,mBAIlB1M,EAJkB,KAIX2M,EAJW,KAazBxN,qBAAU,WACNwN,EAAS,eAAI3M,EAAL,CAAY0M,SAAS,OAC9B,IAEH,IAAME,EAAkB,SAAChF,EAAIzD,GAAL,OAAc,SAACvE,GACnCA,EAAMC,iBACNJ,QAAQC,IAAI,mBACZmN,EAAiBjF,GACjB,IAAMkF,EAASC,SAASC,cAAc,KACtCF,EAAOG,aAAa,WAAY,MAChCH,EAAOvI,MAAM2I,QAAU,OACvBJ,EAAOG,aAAa,OAAQ9I,GAC5B4I,SAAS/F,KAAKmG,YAAYL,GAC1BA,EAAOM,QACPL,SAAS/F,KAAKqG,YAAYP,KAGxBQ,EAAmB,SAACrG,EAASC,GAC/B,IAAIqG,EAAQ,GAIZ,OAHGtG,EAAQC,EAAOH,SACdwG,EAAStG,EAAQC,EAAOH,OAAOzE,KAAI,SAAAC,GAAI,OAAI,yBAAKC,IAAKD,EAAKE,MAAOF,EAAKvB,WAGtE,6BAAMuM,IAyBd,OACI,kBAAC,YAAD,CACIzG,MAAOnI,EAAM6O,QACbC,UAAW9O,EAAM+O,cAAeC,kBAPP,SAAA/N,GAC7BjB,EAAMiP,oBAAoBhO,EAAMkH,QAO5B+G,WAAW,EAAMxB,KAAMrM,EAAMqM,KAC7ByB,YAAY,EAAMC,kBAAkB,EAAMC,iBAAiB,OAE1DpP,EAAKmC,eAAiB,kBAAC,SAAD,CAAQkN,cAAc,WAAW1J,MAAO,CAACrD,MAAO,SACvE,kBAAC,SAAD,CAAQL,UAAU,YAAYkG,MAAM,OAAOrE,OAAO,OAAO6B,MAAO,CAACrD,MAAM,OAAQ8F,KA7B5D,SAACC,EAASC,GACjC,IAAIC,EAAQ,IAAMF,EAAQ1D,IAC1B,OACI,kBAAC,IAAD,CAAM7C,GAAIyG,EAAO3D,OAAO,UAAUyD,EAAQxE,OA0B+DyL,UAAU,IACnH,kBAAC,SAAD,CAAQrN,UAAU,YAAYkG,MAAM,eAAerE,OAAO,UAAU6B,MAAO,CAACrD,MAAM,OAAQgN,UAAU,IACpG,kBAAC,SAAD,CAAQrN,UAAU,YAAYkG,MAAM,8BAA8BrE,OAAO,mBAAmB6B,MAAO,CAACrD,MAAM,OAAQgN,UAAU,IAC5H,kBAAC,SAAD,CAAQnH,MAAM,UAAUC,KAAMsG,EAAkB/I,MAAO,CAACrD,MAAM,OAAQwB,OAAO,WAAWwL,UAAU,IAElG,kBAAC,SAAD,CAAQnH,MAAM,SAASC,KAAMsG,EAAkB/I,MAAO,CAACrD,MAAM,QAASwB,OAAO,UAAUwL,UAAU,IAEjG,kBAAC,SAAD,CAAQnH,MAAM,eAAeC,KA7BZ,SAACC,EAASC,GAC/B,IAAI/C,EAAO,gBAIX,OAHG8C,EAAQkH,eACPhK,EAAO,uBAAGyD,GAAIX,EAAQmH,IAAK/M,KAAK,IAAIJ,QAAS2L,EAAgB3F,EAAQmH,IAAKnH,EAAQkH,eAA3E,aAGPhK,GAuBqDI,MAAO,CAACrD,MAAM,SAAUwB,OAAO,e,SC9E1F2L,G,YACF,aAAc,IAAD,8BACT,+CAMJC,kBAAoB,SAAA1O,GAChBA,EAAMC,iBACH,EAAK2B,QAAQT,eFJjB,SAA+BZ,EAAUuN,EAAe9B,GAC3D,GAAG8B,EAAc9K,OAAO,CAGpB,IAFA,IAAI2L,EAAW,CAAEpO,SAAUA,GACvBqO,EAAS,GACLjI,EAAI,EAAGA,EAAImH,EAAc9K,OAAQ2D,IACrCiI,EAAO1O,KAAK4N,EAAcnH,GAAG6H,KAEjCG,EAASC,OAASA,EAElBnP,MAAM,qBAAsB,CACxB2M,OAAQ,OACRhF,KAAMoE,KAAKE,UAAU,CAACmD,QAASF,IAC/BtC,QAAS,CACL,eAAgB,sBAGnB7L,MAAK,SAAAC,GAAG,OAAIA,EAAId,UAChBa,MAAK,SAAAyL,GAAO,OAAID,EAAS,EAAGC,MAC5BK,OAAM,SAAAC,GAAG,OAAIP,EAAS,EAAGO,OEb1BuC,CAA+B,EAAKlN,QAAQrB,SAAU,EAAKxB,MAAM+O,eAAe,SAACpO,EAAQiC,GAAU,EAAK5C,MAAMgQ,eAAerP,EAAQiC,OARzI,EAAK+M,kBAAoB,EAAKA,kBAAkBM,KAAvB,iBAFhB,E,sEAeT,OACIjN,KAAKH,QAAQT,cAAgB,kBAAC,SAAD,CAAQC,MAAM,OAAOC,QAASU,KAAK2M,kBAAmBhG,SAAU3G,KAAKhD,MAAM2J,WAAc,iE,GAjBrGzG,IAAMI,WAA7BoM,GAMKnM,YAAc1D,EAgBV6P,U,+CCzBR,SAASQ,GAAatN,GACzB,IAAIuN,EAAY,GAShB,OARAA,EAAUC,SAAWC,GAAczN,EAAKyH,UACxC8F,EAAUG,YAAcD,GAAczN,EAAKsC,SAC3CiL,EAAU1F,OAAS4F,GAAczN,EAAK6H,QACtC0F,EAAU1J,QAAU4J,GAAczN,EAAK6D,SACvC0J,EAAUzJ,QAAU2J,GAAczN,EAAK8D,SACvCyJ,EAAUxJ,OAAS0J,GAAczN,EAAK+D,QACtCwJ,EAAUvJ,OAASyJ,GAAczN,EAAKgE,QACtCuJ,EAAU9K,gBAAkBgL,GAAczN,EAAKyC,iBAAiB,GACzD8K,EAGJ,SAASI,GAAYC,GACxB,IAAIC,EAAS,6BACTC,EAAe,GACnBA,EAAavP,KAAKwP,GAAoB,MAAOH,EAAUJ,WACvDM,EAAavP,KAAKwP,GAAoB,MAAOH,EAAUF,cACvDI,EAAavP,KAAKwP,GAAoB,MAAOH,EAAU/F,SACvDiG,EAAavP,KAAKwP,GAAoB,OAAQH,EAAU/J,UACxDiK,EAAavP,KAAKwP,GAAoB,OAAQH,EAAU9J,UACxDgK,EAAavP,KAAKwP,GAAoB,OAAQH,EAAU7J,SACxD+J,EAAavP,KAAKwP,GAAoB,OAAQH,EAAU5J,SACxD8J,EAAavP,KAAKwP,GAAoB,MAAOH,EAAUnL,kBACvD,IAAI,IAAIuC,EAAI,EAAGA,EAAI8I,EAAazM,OAAQ2D,IACjC8I,EAAa9I,GAAG3D,OAAS,IACxBwM,GAAUC,EAAa9I,GAAK,KAIpC,OADA6I,EAASA,EAAOG,QAAQ,KAAM,IAkB3B,SAASC,GAAgBC,GAC5B,QAAIC,GAAWD,EAAQzG,cAEnB0G,GAAWD,EAAQrG,YAmD3B,SAAiB3G,GACb,GAAmB,qBAATA,GAAiC,OAATA,EAC9B,OAAO,EAEX,GAAmB,IAAhBA,EAAKG,OACJ,OAAO,EAEX,OAAO,EAxDH+M,CAAQF,EAAQhN,UA2DxB,SAAsBmN,GAElB,GAAoB,qBAAVA,GAAmC,OAAVA,EAC/B,OAAO,EAEX,GAAoB,IAAjBA,EAAMhN,OACL,OAAO,EAEX,IAPc,8CAOJiN,KAAKD,GACX,OAAO,EAEX,OAAO,EApEHE,CAAaL,EAAQG,WAErBF,GAAWD,EAAQ5L,WAEW,WAAzB4L,EAAQ5L,QAAQpB,MAA8C,SAAzBgN,EAAQ5L,QAAQpB,QAI1DiN,GAAWD,EAAQnK,YAEnBoK,GAAWD,EAAQrK,YASnBsK,GAAWD,EAAQzL,uBAOpB,SAAS0L,GAAWK,GACvB,MAAuB,qBAAbA,GAAyC,OAAbA,KAGnC3F,MAAMC,QAAQ0F,KAAcA,EAASnN,QAMrC,SAASoN,GAAoB1Q,EAAQiC,GAAqC,IAA/B2I,EAA8B,uDAAnB,KAAM+F,EAAa,uCACzE/F,GACCA,IAED5K,EACC2Q,EAAaC,KAAK,CAACC,SAAU,UAAWC,QAAS7O,EAAK6O,QAASC,OAAQ9O,EAAK+O,QAASC,QAAQ,IAE7FN,EAAaC,KAAK,CAACC,SAAU,QAASC,QAAS,mBAAoBC,OAAQ9O,EAAKiP,WAAYD,QAAQ,IA4B5G,SAASvB,GAAcyB,GAA0C,IAA1BC,EAAyB,wDACxDC,EAAc,GAClB,GAA6B,qBAAnBF,GAAqD,OAAnBA,EACxC,OAAOE,EAEX,GAA0C,IAAvCC,OAAOC,KAAKJ,GAAgB7N,QAAgB6N,EAAeK,cAAgBF,OAC1E,OAAOD,EAEX,GAAGvG,MAAMC,QAAQoG,GAAgB,CAC7B,GAAGC,EACC,IAAI,IAAInK,EAAI,EAAGA,EAAIkK,EAAe7N,OAAQ2D,IACtCoK,EAAY7Q,KAAK2Q,EAAelK,GAAGxC,cAGvC,IAAI,IAAIwC,EAAI,EAAGA,EAAIkK,EAAe7N,OAAQ2D,IACtCoK,EAAY7Q,KAAK2Q,EAAelK,GAAG9D,MAG3C,OAAOkO,EAOX,OALGD,EACCC,EAAY7Q,KAAK2Q,EAAe1M,SAEhC4M,EAAY7Q,KAAK2Q,EAAehO,MAE7BkO,EAGX,SAASrB,GAAoByB,EAASJ,GAClC,IAAIK,EAAc,GAClB,GAAGL,EAAY/N,OAAS,EACpB,IAAI,IAAI2D,EAAI,EAAGA,EAAIoK,EAAY/N,OAAQ2D,IACnCyK,GAAeD,EAAU,IAAMJ,EAAYpK,GACxCA,EAAIoK,EAAY/N,OAAS,IACxBoO,GAAe,KAI3B,OAAOA,ECxJJ,IAAMjI,GAAmBlH,IAAMpD,gB,SAEvBgI,G,iFAAf,WAAyBmC,GAAzB,iBAAAxJ,EAAA,sEAC2BC,MAAMuJ,GADjC,cACUC,EADV,gBAEuBA,EAAStJ,OAFhC,cAEUA,EAFV,yBAGWA,GAHX,4C,sBAMA,IA2Ke0R,GA3KI,SAAbA,EAActS,GAAW,IAAD,EACIG,mBAAS,IADb,mBACnB0O,EADmB,KACV0D,EADU,OAEQpS,oBAAS,GAFjB,mBAEnBqS,EAFmB,KAERC,EAFQ,OAGgBtS,mBAAS,IAHzB,mBAGnB4O,EAHmB,KAGJ2D,EAHI,OAIkBvS,oBAAS,GAJ3B,mBAInBwS,EAJmB,KAIHC,EAJG,OAKQzS,oBAAS,GALjB,mBAKnB4L,EALmB,KAKRe,EALQ,OAMgB3M,oBAAS,GANzB,mBAMnB0S,EANmB,KAMJC,EANI,OAOU3S,mBAAS,IAPnB,mBAOnB0L,EAPmB,KAOPC,EAPO,OASF3L,mBAAS,IATP,mBASnB2D,EATmB,KASbiP,EATa,OAUA5S,mBAAS,IAVT,mBAUnB8Q,EAVmB,KAUZ+B,EAVY,OAYA7S,oBAAS,GAZT,mBAYnB8S,EAZmB,KAYZC,EAZY,KAc1B1S,qBAAU,YACc,uCAAG,4BAAAC,EAAA,sEACCqH,GAAU,6BADX,OACbqL,EADa,OAEnBZ,EAAWY,GACXV,GAAa,GACbS,GAAS,GAJU,2CAAH,qDAMpBE,KACD,IAEH5S,qBAAU,WACNoS,GAAkBS,GAAqBtE,MACxC,CAACA,IAEJvO,qBAAU,WAAM,4CACZ,kCAAAC,EAAA,6DACQ0P,EAAYkD,GAAuBxH,GACnC4E,EAAS4C,GAAsBlD,GACnCrP,QAAQC,IAAI0P,GACR+B,EAAuB,cAAX/B,GAAsC,8BAAXA,EAJ/C,SAKwB3I,GAAU2I,GALlC,OAKU0C,EALV,OAMIZ,EAAWY,GACXV,EAAaD,GAPjB,4CADY,sBAWZ,GAXa,WAAD,wBAUZc,GACGvH,EAAU,CACT,IAAIwH,EAAM,eAAO1H,GACjB0H,EAAOzP,KAAOA,EACdyP,EAAOtC,MAAQA,EACf6B,EAAiBO,GAA0BE,OAEhD,CAAC1H,IAEJ,IAAM2H,EAAc,SAAC7S,EAAQiC,GACzB,IAAI4O,EAAW7Q,EAAS,UAAY,QACpC2R,EAAWmB,SAASlC,KAAK,CAACC,SAAUA,EAAUC,QAAS7O,EAAK6O,QAASC,OAAQ9O,EAAK+O,QAASC,QAAQ,IACnG8B,KAGEzE,EAAsB,SAAC0E,GACzBjB,EAAiBiB,IAGfD,EAAkB,WACpBhB,EAAiB,IACjBE,GAAkB,IAGhBgB,GAAmB,uCAAG,WAAM3S,GAAN,yBAAAR,EAAA,6DACxBQ,EAAMC,iBACFgE,EAAU,CAACpB,KAAM+H,EAAW3G,QAAQpB,KAAMzB,MAAOwJ,EAAW3G,QAAQ7C,MAAOwR,YAAahI,EAAWxG,iBACnGyK,EAHoB,eAGNjE,GACdxB,EAJoB,eAILwB,EAAWxB,UAC1B1D,EALoB,eAKPkF,EAAWlF,QAE5BmJ,EAAQ5K,QAAUA,EAClB4K,EAAQzF,SAAW,CAACA,GACpByF,EAAQnJ,OAAyC,IAA/BsL,OAAOC,KAAKvL,GAAQ1C,QAAgB0C,EAAOwL,cAAgBF,OAAS,GAAK,CAACtL,GAC5FmJ,EAAQhM,KAAOA,EACfgM,EAAQmB,MAAQA,SACTnB,EAAQzK,gBACfvE,QAAQC,IAAI+O,GAbY,UAeNgE,wBAAapT,MAAM,oBAAqB,CAClD2M,OAAQ,OACRhF,KAAMoE,KAAKE,UAAU,CAACmD,QAASA,IAC/BxC,QAAS,CAAC,eAAgB,uBAlBV,eAelB5L,EAfkB,iBAoBFA,EAAId,OApBF,QAoBlBsM,EApBkB,OAqBxBsG,EAAY9R,EAAIqS,GAAI7G,GACpBwG,IAtBwB,4CAAH,sDAyBzBlT,qBAAU,WACN,IAAI+S,EAAM,eAAO1H,GACjB0H,EAAOzP,KAAOA,EACdyP,EAAOtC,MAAQA,EACf6B,EAAiBO,GAA0BE,MAC5C,CAACzP,EAAMmN,IAcV,OACI,kBAAC7G,GAAiB4J,SAAlB,CAA2B7L,MAAO,CAC1B0D,WAAYA,EACZC,cAAeA,EACfC,UAAWA,EACXe,aAAcA,IAGlB,yBAAK5K,UAAU,eACX,0EACA,yBAAKA,UAAU,qBACX,kBAAC,EAAD,MACA,yBAAKA,UAAU,aACX,kBAAC,YAAD,CAAUiE,IAAK,SAAC+F,GAAD,OAAQoG,EAAWmB,SAAWvH,KAC7C,yBAAKhK,UAAU,wBACX,yBAAKA,UAAU,gBACX,uCACA,yBAAKA,UAAU,wBACX,yBAAKA,UAAU,mBAEPsQ,EACA,8BAAM,0BAAMtQ,UAAU,kBAAkB2M,EAAQ5K,OAAS4K,EAAQ5K,OAAS,GAA1E,IAAoF,wDAEpF,8BAAM,0BAAM/B,UAAU,kBAAkB2M,EAAQ5K,QAAhD,IAA+D,8BAA0B,IAAnB4K,EAAQ5K,OAAe,SAAW,YAAxG,aAIZ,kBAAC,GAAD,CAAgB8K,cAAeA,EAAepF,SAAUgJ,EAAgB3C,eAAgBwD,KAGxFzH,GACA,yBAAK7J,UAAU,oBACX,4CACA,yBAAKA,UAAU,gBACX,6CACI,kBAAC,aAAD,CAAW+G,GAAG,OAAO/G,UAAU,aAAaiG,MAAOrE,GAAQ,GAAIwF,SAAU,SAACiD,GAAOwG,EAAQxG,EAAE1H,OAAOsD,WAE1G,yBAAKjG,UAAU,gBACX,wDACI,kBAAC,aAAD,CAAW+G,GAAG,QAAQ/G,UAAU,aAAaiG,MAAO8I,GAAS,GAAI3H,SAAU,SAACiD,GAAOyG,EAASzG,EAAE1H,OAAOsD,WAE7G,yBAAKjG,UAAU,gBACX,mBAtDR,WAExB,OAD4B+R,+BAArBC,kBAGC,yBAAKhS,UAAU,mBACX,kBAAC,KAAD,CAAQ8F,KAAK,YAAYmM,MAAM,UAAUC,OAAQ,IAAK7R,MAAO,OAGjE,kBAAC,SAAD,CAAQF,MAAM,iBAAiB2F,KAAK,SAAS2B,UAAWkJ,EAAevQ,QAASsR,OA8CxD,SAMZ7H,GAGAkH,EAFA,kBAAC,EAAD,CAAWpE,QAASA,EAASE,cAAeA,EAAeE,oBAAqBA,EAAqBoF,aAAa,UAKlH,yBAAKnS,UAAU,wBACX,kBAAC,KAAD,CAAQ8F,KAAK,YAAYmM,MAAM,UAAUC,OAAQ,IAAK7R,MAAO,YC5D9E+R,I,OAhHG,SAAZA,EAAatU,GAEf,IAAMC,EAAOC,qBAAWL,GAFC,EAGDM,mBAAS,IAHR,mBAGlByC,EAHkB,KAGZ2R,EAHY,OAIKpU,oBAAS,GAJd,mBAIlB4N,EAJkB,KAITyG,EAJS,KAMjBN,EAAsBD,+BAAtBC,kBAEF3C,EAAO,SAACI,GACV2C,EAAUb,SAASlC,KAAKI,IAGtB7J,EAAS,uCAAG,WAAOmC,GAAP,iBAAAxJ,EAAA,sEACSC,MAAMuJ,GADf,cACRC,EADQ,gBAEKA,EAAStJ,OAFd,OAERA,EAFQ,OAGd2T,EAAQ3T,GACR4T,GAAW,GAJG,2CAAH,sDAOTC,EAAa,uCAAG,WAAOxL,GAAP,iBAAAxI,EAAA,sEACGqT,wBAAapT,MAC9B,oBACA,CACI2M,OAAQ,OACRhF,KAAMoE,KAAKE,UAAU,CAAC1D,GAAIA,IAC1BqE,QAAS,CAAC,eAAgB,uBANhB,cACZoH,EADY,gBASCA,EAAO9T,OATR,cASZA,EATY,yBAUX,CAACmT,GAAIW,EAAOX,GAAInR,KAAMhC,IAVX,2CAAH,sDAanBJ,qBAAU,WACNsH,EAAU,gDACX,IAEH,IAAM6M,EAAQ,uCAAG,WAAO1T,GAAP,eAAAR,EAAA,6DACbQ,EAAMC,iBACNJ,QAAQC,IAAIE,EAAM4D,OAAOoE,IAFZ,SAGQwL,EAAcxT,EAAM4D,OAAOoE,IAHnC,cAGPyL,EAHO,QAIHX,GACNxC,EAAK,CAACC,SAAU,UAAWC,QAASiD,EAAO9R,KAAK6O,QAASC,OAAQgD,EAAO9R,KAAK+O,QAASC,QAAQ,IAE9FL,EAAK,CAACC,SAAU,QAASC,QAASiD,EAAO9R,KAAK6O,QAASC,OAAQgD,EAAO9R,KAAK+O,QAASC,QAAQ,IAPnF,SASP9J,EAAU,8CATH,2CAAH,sDAYR8M,EAAmB,SAACtM,EAASC,GAC/B,IAAIsM,EAAc,GAIlB,OAHGvM,EAAQC,EAAOH,SACdyM,EAAc,IAAIC,KAAKxM,EAAQC,EAAOH,QAAQ2M,oBAAeC,EAAW,CAACC,UAAW,OAAQC,UAAW,YAEpG,6BAAML,IAWjB,OACI,yBAAK3S,UAAU,eACX,yBAAKA,UAAU,oBACX,yDACA,kBAAC,YAAD,CAAUiE,IAAK,SAAC+F,GAAD,OAAQoI,EAAUb,SAAWvH,KAC5C,yBAAKhK,UAAU,oBACX,sDACA,yBAAKA,UAAU,6BACX,yBAAKA,UAAU,2BACX,0BAAMA,UAAU,UAAWU,EAAK4G,QAAO,SAAA2L,GAAC,MAAiB,YAAbA,EAAExU,UAAsBsD,QADxE,wBAGA,yBAAK/B,UAAU,2BACX,0BAAMA,UAAU,UAAWU,EAAK4G,QAAO,SAAA2L,GAAC,MAAiB,eAAbA,EAAExU,UAAyBsD,QAD3E,6BAKR,yBAAK/B,UAAU,kBAEN6L,EAYD,yBAAK7L,UAAU,iCACX,kBAAC,KAAD,CAAQ8F,KAAK,YAAYmM,MAAM,UAAUC,OAAQ,IAAK7R,MAAO,OAZ7DK,EAAKqB,OAAS,EACd,kBAAC,YAAD,CAAWkE,MAAOvF,EAAMsM,WAAW,EAAOC,YAAY,EAAMzB,KAAM,IAC9D,kBAAC,SAAD,CAAQxL,UAAU,YAAYkG,MAAM,SAASrE,OAAO,SAAS6B,MAAO,CAACrD,MAAM,OAAQgN,UAAU,IAC7F,kBAAC,SAAD,CAAQrN,UAAU,YAAYkG,MAAM,OAAOrE,OAAO,OAAO6B,MAAO,CAACrD,MAAM,OAAQgN,UAAU,IACzF,kBAAC,SAAD,CAAQrN,UAAU,YAAYkG,MAAM,gBAAgBrE,OAAO,iBAAiBsE,KAAMuM,EAAkBhP,MAAO,CAACrD,MAAM,OAAQgN,UAAU,IACpI,kBAAC,SAAD,CAAQrN,UAAU,YAAYkG,MAAM,gBAAgBrE,OAAO,qBAAqBsE,KAAMuM,EAAkBhP,MAAO,CAACrD,MAAM,OAAQgN,UAAU,IACtItP,EAAKmV,SAAW,kBAAC,SAAD,CAAQ/M,KAjC/B,SAACC,EAASC,GAC7B,IAAI8M,EAAS,GAIb,MAHsB,YAAnB/M,EAAQ3H,SACP0U,EAAS,4BAAQpM,GAAIX,EAAQmH,IAAKnN,QAASqS,EAAUzS,UAAU,eAAe8F,KAAK,UAA1E,WAEN,yBAAK9F,UAAU,yBAAyBmT,IA4ByBzP,MAAO,CAACrD,MAAM,YAGlE,4EAOJ2R,GACA,yBAAKhS,UAAU,yBACX,yBAAKA,UAAU,4BACX,kBAAC,KAAD,CAAQ8F,KAAK,YAAYmM,MAAM,UAAUC,OAAQ,IAAK7R,MAAO,a,sCC5GvF+S,G,OAAOC,GAAsBC,MAqCpBC,G,iLAjCP,IAAItN,EAAQnF,KAAKhD,MAAM4C,KAAKuF,MACxBrE,EAAOd,KAAKhD,MAAM4C,KAAKkB,KAE3B,OACE,kBAACwR,GAAD,CACE1S,KAAM,CACF,CACIoF,KAAM,MACN0N,EAAGvN,EACHwN,EAAG7R,EACH8R,YAAa,IACbC,OAAQ,CAAC1B,MAAO,aAGxB2B,OAAS,CACLC,UAAU,EACVC,MAAOhT,KAAKhD,MAAMgW,MAClBC,MAAO,CACHD,MAAO,CAACE,KAAM,sBAAuBC,KAAM,CAACC,KAAM,GAAIjC,MAAO,aAEjEkC,MAAO,CACHC,UAAW,YAEfC,UAAW,CAACH,KAAM,GAAIjC,MAAO,WAC7BgC,KAAK,CAAChC,MAAO,YAEjBvO,MAAS,CAACrD,MAAO,QACjBiU,kBAAoB,Q,GA7BJtT,IAAMI,WCK5BmT,G,YACF,aAAc,IAAD,8BACT,+CACKpV,MAAQ,CACTwN,QAAS,GACT6H,UAAW,GACX3H,cAAe,GACf4H,YAAY,EACZC,SAAS,GAEb,EAAK3H,oBAAsB,EAAKA,oBAAoBgB,KAAzB,iBAC3B,EAAK4G,aAAe,EAAKA,aAAa5G,KAAlB,iBACpB,EAAKyD,gBAAkB,EAAKA,gBAAgBzD,KAArB,iBAXd,E,iFAgBO,IAAD,OACfF,EAAmB,kBAAkB,SAAC7C,GAIlC,IAHA,IAAMtK,EAAO,GACPkB,EAAO,GACPqE,EAAQ,GACNP,EAAI,EAAGA,EAAIsF,EAAQjJ,SACvBrB,EAAKzB,KAAK,CAAC2C,KAAMoJ,EAAQtF,GAAG9D,KAAMqE,MAAO+E,EAAQtF,GAAGkP,WACpDhT,EAAK3C,KAAK+L,EAAQtF,GAAG9D,MACrBqE,EAAMhH,KAAK+L,EAAQtF,GAAGkP,YACnBlP,GAAK,IAJuBA,KAQnC,EAAKoG,SAAS,CACVa,QAAS3B,EACTwJ,UAAW,CAAC9T,KAAMA,EAAMkB,KAAMA,EAAMqE,MAAOA,GAC3CyO,SAAS,S,0CAKDjD,GAAU,IAAD,OACzB3Q,KAAKgL,SAAS,CAACe,cAAe4E,IAAW,WAClCN,GAAqB,EAAKhS,MAAM0N,eAC/B,EAAKf,SAAS,CAAC2I,YAAY,IAE3B,EAAK3I,SAAS,CAAC2I,YAAY,S,mCAK1BhW,EAAQiC,GAAM,IAAD,OACtByQ,GAA8B1S,EAAQiC,EAAMI,KAAK0Q,gBAAiB1Q,KAAKyQ,UACvE1D,EAAmB,kBAAkB,SAAC7C,GAClC,EAAKc,SAAS,CACVa,QAAS3B,S,wCAMjBlK,KAAKgL,SAAS,CACVe,cAAe,GACf4H,YAAY,M,+BAIX,IAAD,OACJ,OACI,yBAAKzU,UAAU,eACX,wDACA,yBAAKA,UAAU,iBAEPc,KAAK3B,MAAMuV,QACX,kBAAC,IAAM/U,SAAP,KACI,yBAAKK,UAAU,0BACX,gDACA,kBAAC,YAAD,CAAUiE,IAAK,SAAC+F,GAAD,OAAQ,EAAKuH,SAAWvH,KACvC,kBAAC,EAAD,CAAW2C,QAAS7L,KAAK3B,MAAMwN,QAASE,cAAe/L,KAAK3B,MAAM0N,cAAeE,oBAAqBjM,KAAKiM,oBAAqB8H,cAAc,EAAM1C,aAAa,UACjK,yBAAKnS,UAAU,sBAEX,kBAAC,GAAD,CAAgB6M,cAAe/L,KAAK3B,MAAM0N,cAAepF,SAAU3G,KAAK3B,MAAMsV,WAAY3G,eAAgBhN,KAAK6T,iBAGvH,yBAAK3U,UAAU,+BACVc,KAAK3B,MAAMuV,SAAW,kBAAC,GAAD,CAAehU,KAAMI,KAAK3B,MAAMqV,UAAWV,MAAM,gCAIhF,yBAAK9T,UAAU,4BACX,kBAAC,KAAD,CAAQ8F,KAAK,YAAYmM,MAAM,UAAUC,OAAQ,IAAK7R,MAAO,a,GAvFrEW,IAAMI,WAApBmT,GAeKlT,YAAc1D,EAiFV4W,UCzEAO,I,OAhCE,WACb,OACI,yBAAK9U,UAAU,iBACX,wCAEI,6BACI,4CACA,2BACI,uCADJ,+GAEI,6BAFJ,sOAII,6BAJJ,oLAOA,+CACA,kCACQ,uCADR,0CAGA,4BACI,4BAAI,oDAAJ,wDACA,4BAAI,oDAAJ,yFACA,4BAAI,iDAAJ,qFAEJ,yBAAKA,UAAU,oBACX,yBAAKF,IAA8B,yCAA0CC,IAAI,MAErF,yBAAKC,UAAU,oBCCpB+U,GA3BA,WACX,OACI,yBAAK/U,UAAU,iBACX,sCACI,6BACI,4DACA,gEACsC,uBAAGQ,KAAK,eAAR,sBADtC,SACwF,6BADxF,oNAIA,yBAAKR,UAAU,YACX,yBAAKF,IAA8B,mCAAoCC,IAAI,MAE/E,8DACA,8GACoF,6BADpF,oLAIA,yBAAKC,UAAU,YACX,yBAAKF,IAA8B,yCAA0CC,IAAI,MAErF,yBAAKC,UAAU,mBCOpBgV,GA5BC,WACZ,OACI,yBAAKhV,UAAU,iBACX,uCACI,6BACI,qDACA,6EACmD,uBAAGQ,KAAK,eAAR,sBADnD,gNAC4S,6BAD5S,+HAEgI,6BAFhI,8DAKA,yBAAKR,UAAU,YACX,yBAAKF,IAA8B,oCAAqCC,IAAI,MAEhF,mEACA,+EACqD,uBAAGS,KAAK,cAAR,kBADrD,SACkG,6BADlG,uSAIA,yBAAKR,UAAU,YACX,yBAAKF,IAA8B,2CAA4CC,IAAI,MAEvF,yBAAKC,UAAU,mBCKpBiV,GA3BK,WAChB,OACI,yBAAKjV,UAAU,iBACX,iEACA,6BACI,iEACA,2BACI,uCADJ,oEAEI,4BACI,mEACA,+EAJR,gJAUJ,6BACI,gDACA,2BACI,uCADJ,qCACqD,uBAAGQ,KAAK,4BAAR,cADrD,SAC4G,6BACxG,uCAFJ,sE,SCeD0U,GAhCQ,WAAO,IAAD,EAEDjX,mBAAS,IAFR,mBAElByC,EAFkB,KAEZ2R,EAFY,KAazB,OATA/T,qBAAU,YACO,uCAAG,8BAAAC,EAAA,sEACMC,MAAM,wBADZ,cACNgB,EADM,gBAEOA,EAAId,OAFX,OAENgC,EAFM,OAGZ2R,EAAQ9H,KAAKE,UAAU/J,EAAM,KAAM,IAHvB,2CAAH,qDAKbyU,KACD,IAGC,yBAAKnV,UAAU,iBACX,uDACA,yGAC+E,6BAC3E,0BAAMA,UAAU,QAAhB,+CAAyE,6BAF7E,2DAG4D,8BAE5D,kBAAC,eAAD,CAAaA,UAAU,wBACnB,6BACI,6BACKU,OCSV0U,GAjCM,WAAO,IAAD,EACCnX,mBAAS,IADV,mBAChByC,EADgB,KACV2R,EADU,KAYvB,OATA/T,qBAAU,YACO,uCAAG,8BAAAC,EAAA,sEACMC,MAAM,oCADZ,cACNgB,EADM,gBAEOA,EAAId,OAFX,OAENgC,EAFM,OAGZ2R,EAAQ9H,KAAKE,UAAU/J,EAAM,KAAM,IAHvB,2CAAH,qDAKbyU,KACD,IAGC,yBAAKnV,UAAU,iBACX,2CACA,oGAC0E,6BACtE,0BAAMA,UAAU,QAAhB,4CAAsE,6BAF1E,WAGY,6BACR,0BAAMA,UAAU,QAAhB,2DAAqF,6BAJzF,2DAK4D,8BAE5D,kBAAC,eAAD,CAAaA,UAAU,wBACvB,6BACI,6BACKU,OCQN2U,GAjCO,WAAO,IAAD,EACApX,mBAAS,IADT,mBACjByC,EADiB,KACX2R,EADW,KAYxB,OATA/T,qBAAU,YACO,uCAAG,8BAAAC,EAAA,sEACMC,MAAM,2BADZ,cACNgB,EADM,gBAEOA,EAAId,OAFX,OAENgC,EAFM,OAGZ2R,EAAQ9H,KAAKE,UAAU/J,EAAM,KAAM,IAHvB,2CAAH,qDAKbyU,KACD,IAGC,yBAAKnV,UAAU,iBACX,0CACA,kHACwF,6BACpF,0BAAMA,UAAU,QAAhB,mFAA6G,6BAFjH,WAGY,6BACR,0BAAMA,UAAU,QAAhB,kDAA4E,6BAJhF,2DAK4D,8BAE5D,kBAAC,eAAD,CAAaA,UAAU,wBACvB,6BACI,6BACKU,OC+BN4U,GAhDO,SAACxX,GAAW,IAAD,EAECG,mBAAS,YAFV,mBAEtBoO,EAFsB,KAEbkJ,EAFa,KAI7B,OACI,yBAAKvV,UAAU,eACX,yBAAKA,UAAU,wBACX,yBAAKA,UAAU,oBACX,6CACA,4BACI,wBAAIA,UAAuB,aAAZqM,EAAyB,gBAAayG,GACjD,4BAAQhN,KAAK,SAAS1F,QAAS,kBAAMmV,EAAW,cAAhD,aAEJ,wBAAIvV,UAAuB,WAAZqM,EAAuB,gBAAayG,GAC/C,4BAAQhN,KAAK,SAAS1F,QAAS,kBAAMmV,EAAW,YAAhD,WAEJ,wBAAIvV,UAAuB,YAAZqM,EAAwB,gBAAayG,GAChD,4BAAQhN,KAAK,SAAS1F,QAAS,kBAAMmV,EAAW,aAAhD,YAEJ,wBAAIvV,UAAuB,gBAAZqM,EAA4B,gBAAayG,GACpD,4BAAQhN,KAAK,SAAS1F,QAAS,kBAAMmV,EAAW,iBAAhD,wBAGR,mCACA,4BACI,wBAAIvV,UAAuB,wBAAZqM,EAAoC,gBAAayG,GAC5D,4BAAQhN,KAAK,SAAS1F,QAAS,kBAAMmV,EAAW,yBAAhD,oBAEJ,wBAAIvV,UAAuB,oBAAZqM,EAAgC,gBAAayG,GACxD,4BAAQhN,KAAK,SAAS1F,QAAS,kBAAMmV,EAAW,qBAAhD,gBAEJ,wBAAIvV,UAAuB,mBAAZqM,EAA+B,gBAAayG,GACvD,4BAAQhN,KAAK,SAAS1F,QAAS,kBAAMmV,EAAW,oBAAhD,iBAIC,aAAZlJ,GAA0B,kBAAC,GAAD,MACd,WAAZA,GAAwB,kBAAC,GAAD,MACZ,YAAZA,GAAyB,kBAAC,GAAD,MACb,gBAAZA,GAA6B,kBAAC,GAAD,MACjB,wBAAZA,GAAqC,kBAAC,GAAD,MACzB,oBAAZA,GAAiC,kBAAC,GAAD,MACrB,mBAAZA,GAAgC,kBAAC,GAAD,SC8ClCmJ,I,OA/FE,SAAC1X,GACd,OACI,kBAAC,IAAM6B,SAAP,KACI,yBAAKK,UAAU,eACX,yBAAKA,UAAU,sBACX,8DACA,kBAAC,eAAD,CAAaA,UAAU,mBACnB,yBAAKA,UAAU,iBAAf,qFACsF,kDADtF,KACkH,6BADlH,0EAE2E,6BAF3E,gJAKA,wBAAIA,UAAU,iBACV,4BACI,oDACA,yBAAKA,UAAU,iBAAf,wIAIJ,4BACI,+CACA,yBAAKA,UAAU,iBAAf,iJAIJ,4BACI,iDACA,yBAAKA,UAAU,iBAAf,+DAIJ,4BACI,kDACA,yBAAKA,UAAU,iBAAf,+EAIJ,4BACI,6CACA,yBAAKA,UAAU,iBAAf,+BAIJ,4BACI,4DACA,yBAAKA,UAAU,iBACX,4BACI,4BACI,iRAGA,yBAAMF,IAA8B,mCAAoCC,IAAI,MAEhF,4BACI,mJAGA,qCACA,yBAAMD,IAA8B,6BAA8BC,IAAI,KACtE,yCACA,yBAAMD,IAA8B,iCAAkCC,IAAI,MAE9E,4BACI,yHAGA,yBAAMD,IAA8B,4CAA6CC,IAAI,OAG7F,yIAKR,4BACI,4DACA,yBAAKC,UAAU,iBACX,4BACI,0NAGA,gKCDzByV,I,cA7EE,SAAXA,EAAY3X,GACd,IAAMC,EAAOC,qBAAWL,GADA,EAEAM,oBAAS,GAFT,mBAEjBoR,EAFiB,KAEXqG,EAFW,OAGUzX,mBAAS,IAHnB,mBAGjB0X,EAHiB,KAGNC,EAHM,OAIU3X,mBAAS,IAJnB,mBAIjB4X,EAJiB,KAINC,EAJM,OAKwB7X,oBAAS,GALjC,mBAKjB8X,EALiB,KAKCC,EALD,KAOxB1X,qBAAU,WACNqX,EAAU5T,QAAU,EAAK4T,IAAcE,GAAaG,GAAoB,GAASA,GAAoB,KACtG,CAACL,EAAWE,IAEf,IAUMI,EAAQ,uCAAG,WAAOlX,GAAP,iBAAAR,EAAA,6DACbQ,EAAMC,iBADO,SAEKR,MAAM,kBAAmB,CACvC2M,OAAQ,OACRhF,KAAMoE,KAAKE,UAAU,CACjByL,KAAM,CAAE5W,SAAUvB,EAAKuB,SAAU6W,SAAUR,KAE/CvK,QAAS,CAAE,eAAgB,sBAPlB,cAEP5L,EAFO,gBASMA,EAAId,OATV,QASPgC,EATO,QAULR,eACJtB,QAAQC,IAAI,iBACZd,EAAK6C,aAAaF,GAClBkV,EAAa,IACbE,EAAa,IACbJ,GAAQ,GACRD,EAASlE,SAASlC,KAAK,CAACC,SAAU,UAAWC,QAAS,sBAEtDkG,EAASlE,SAASlC,KAAK,CAACC,SAAU,QAASC,QAAS,iBAAkBC,OAAQ,kCAlBrE,2CAAH,sDAsBd,OACI,yBAAKxP,UAAU,qBACX,gDACA,kBAAC,YAAD,CAAUiE,IAAK,SAAC+F,GAAD,OAAQyL,EAASlE,SAAWvH,KAC3C,yBAAKhK,UAAU,YAAf,aAAqCjC,EAAKuB,UAEtC+P,GACA,6BACI,6BACI,yBAAKrP,UAAU,UAAf,wDACA,kBAAC,aAAD,CAAWA,UAAU,WAAW8F,KAAK,WAAWlE,KAAK,YAAYqE,MAAO0P,EAAWvO,SAAU,SAACiD,GAAOuL,EAAavL,EAAE1H,OAAOsD,WAE/H,6BACI,yDACA,kBAAC,aAAD,CAAWjG,UAAU,WAAW8F,KAAK,WAAWlE,KAAK,YAAYqE,MAAO4P,EAAWzO,SAAU,SAACiD,GAAOyL,EAAazL,EAAE1H,OAAOsD,YAIvI,yBAAKjG,UAAU,eAEPqP,EACA,6BACI,kBAAC,SAAD,CAAQrP,UAAU,WAAWG,MAAM,QAAQC,QAAS6V,EAAUxO,SAAUsO,IACxE,kBAAC,SAAD,CAAQ/V,UAAU,WAAWG,MAAM,SAASC,QAlD3C,SAACrB,GAClBA,EAAMC,iBACN0W,GAAQ,OAmDI,kBAAC,SAAD,CAAQvV,MAAM,iBAAiBC,QA1D1B,SAACrB,GAClBA,EAAMC,iBACN0W,GAAQ,UCuFDU,I,mBAjGX,aAAc,IAAD,8BACT,+CAwBJC,eAAiB,SAAAtX,GACb,EAAK+M,SAAS,CAACwK,eAAe,KAxB9B,EAAKnX,MAAQ,CACT0N,cAAe,GACf0J,aAAa,EACbD,eAAe,EACfE,gBAAgB,GAEpB,EAAKH,eAAiB,EAAKA,eAAetI,KAApB,iBACtB,EAAK0I,sBAAwB,EAAKA,sBAAsB1I,KAA3B,iBAC7B,EAAK2I,WAAa,EAAKA,WAAW3I,KAAhB,iBAClB,EAAKtK,OAAS,EAAKA,OAAOsK,KAAZ,iBACd,EAAK4G,aAAe,EAAKA,aAAa5G,KAAlB,iBAZX,E,mFAeS0D,GAAU,IAAD,OAC3B3Q,KAAKgL,SAAS,CAACe,cAAe4E,IAAW,WAClC,EAAKtS,MAAM0N,eAAiB,EAAK1N,MAAM0N,cAAc9K,OAAS,EAC7D,EAAK+J,SAAS,CAACyK,aAAa,IAE5B,EAAKzK,SAAS,CAACyK,aAAa,S,mCAS3B9X,EAAQiC,GACjByQ,GAA8B1S,EAAQiC,EAAM,KAAMI,KAAKhD,MAAMyT,Y,mCAGpD,IAAD,OACRzQ,KAAKgL,SAAS,CACVyK,aAAa,EACbC,gBAAgB,IAEpB1V,KAAKhD,MAAMuY,eAAevV,KAAK3B,MAAM0N,eAAe,SAACvB,GAC7CA,EAMA,EAAKQ,SAAS,CAACyK,aAAa,IAL5B,EAAKzK,SAAS,CACVe,cAAe,GACfyJ,eAAe,S,+BAS3BxV,KAAKgL,SAAS,CACVwK,eAAe,EACfE,gBAAgB,M,+BAMpB,IAAMG,EACF,kBAAC,IAAMhX,SAAP,KACI,6BACI,kBAAC,EAAD,CAAWgN,QAAS7L,KAAKhD,MAAM6H,KAAMkH,cAAe/L,KAAK3B,MAAM0N,cAAeE,oBAAqBjM,KAAK2V,sBAAuBtE,aAAa,QAAQtN,QAAS/D,KAAKhD,MAAM+G,WAE5K,yBAAK7E,UAAU,WACZc,KAAKhD,MAAM+G,SAAW,kBAAC,SAAD,CAAQ1E,MAAOW,KAAKhD,MAAM8Y,SAAUxW,QAASU,KAAKuV,eAAgB5O,SAAU3G,KAAK3B,MAAMoX,gBAKlHM,EACF,iDAGEC,EACF,6BACI,kBAAC,SAAD,CAAQ3W,MAAM,MAAMC,QAASU,KAAK4V,WAAYjP,SAAU3G,KAAK3B,MAAMqX,iBACnE,kBAAC,SAAD,CAAQrW,MAAM,SAASC,QAASU,KAAK2C,UAI7C,OACI,yBAAKzD,UAAU,YACX,4BAAKc,KAAKhD,MAAMiZ,SAChB,yBAAK/W,UAAU,mBACVc,KAAKhD,MAAM6H,KAAOgR,EAAWE,GAElC,6BACI,kBAAC,SAAD,CAAQhV,OAAQ,mBAAoBqI,OAAQ4M,EAActT,QAAS1C,KAAK3B,MAAMmX,cAAe5S,MAAO,CAACrD,MAAO,SAAU2W,OAAO,EAAMvT,OAAQ3C,KAAK2C,QAC1I,yF,GA3FHzC,IAAMI,YCAvB6V,G,YAEF,aAAc,IAAD,8BACT,+CAmCJC,oBAAsB,SAACC,EAAcpM,GAEjC,IADA,IAAIG,EAAS,GACLxF,EAAI,EAAGA,EAAIyR,EAAapV,OAAQ2D,IACpCwF,EAAOjM,KAAKkY,EAAazR,GAAG6H,KAEhC/O,MAAM,wBAAyB,CAC3B2M,OAAQ,OACRhF,KAAMoE,KAAKE,UAAU,CAACnL,SAAU,EAAKqB,QAAQrB,SAAU4L,OAAQA,IAC/DE,QAAS,CACL,eAAgB,sBAGnB7L,MAAK,SAAAC,GAAG,OAAIA,EAAId,UAChBa,MAAK,SAAAyL,GACFmG,GAA8B,EAAGnG,EAAS,KAAM,EAAKuG,UACrD,IAAI6F,EAAQ,EAAKjY,MAAMkY,UACvBD,EAAQ,EAAKE,eAAeF,EAAOlM,GACnC,EAAKY,SAAS,CAACuL,UAAWD,GAAQrM,EAAS,OAE9CM,OAAM,SAAAC,GACH6F,GAA8B,EAAG7F,EAAK,KAAM,EAAKiG,UACjDxG,EAAS,OAzDR,EA6DbwM,kBAAoB,SAACJ,EAAcpM,GAE/B,IADA,IAAIG,EAAS,GACLxF,EAAI,EAAGA,EAAIyR,EAAapV,OAAQ2D,IACpCwF,EAAOjM,KAAKkY,EAAazR,GAAG6H,KAEhC/O,MAAM,mBAAoB,CACtB2M,OAAQ,OACRhF,KAAMoE,KAAKE,UAAU,CAACnL,SAAU,EAAKqB,QAAQrB,SAAU4L,OAAQA,IAC/DE,QAAS,CACL,eAAgB,sBAGnB7L,MAAK,SAAAC,GAAG,OAAIA,EAAId,UAChBa,MAAK,SAAAyL,GACFmG,GAA8B,EAAGnG,EAAS,KAAM,EAAKuG,UACrD,IAAIzM,EAAY,EAAK3F,MAAMqY,cAC3B1S,EAAY,EAAKwS,eAAexS,EAAWoG,GAC3C,EAAKY,SAAS,CAAC0L,cAAe1S,GAAYiG,EAAS,OAEtDM,OAAM,SAAAC,GACH6F,GAA8B,EAAG7F,EAAK,KAAM,EAAKiG,UACjDxG,EAAS,OAhFjB,EAAK5L,MAAQ,CACTG,SAAU,GACVmY,UAAW,GACXJ,UAAW,GACXG,cAAe,IAEnB,EAAKN,oBAAsB,EAAKA,oBAAoBnJ,KAAzB,iBAC3B,EAAKwJ,kBAAoB,EAAKA,kBAAkBxJ,KAAvB,iBACzB,EAAK2J,aAAe,EAAKA,aAAa3J,KAAlB,iBACpB,EAAKuJ,eAAiB,EAAKA,eAAevJ,KAApB,iBAXb,E,iFAgBO,IAAD,OACfvP,MAAM,4BAA8BsC,KAAKH,QAAQrB,UAC5CC,MAAK,SAAAC,GAAG,OAAIA,EAAId,UAChBa,MAAK,SAAAyL,GAGF,IAFA,IAAI2M,EAAW,GACX9S,EAAU,GACNa,EAAI,EAAGA,EAAIsF,EAAQjJ,OAAQ2D,IACN,aAAtBsF,EAAQtF,GAAGjH,OACVkZ,EAAS1Y,KAAK+L,EAAQtF,IAEtBb,EAAQ5F,KAAK+L,EAAQtF,IAG7B,EAAKoG,SAAS,CACVuL,UAAWM,EACXH,cAAe3S,S,mCAuDlB+S,EAAW7Q,GACpB,IAAI,IAAIrB,EAAI,EAAGA,EAAIkS,EAAU7V,OAAQ2D,IACjC,GAAGkS,EAAUlS,GAAG6H,MAAQxG,EACpB,OAAOrB,EAGf,OAAQ,I,qCAGGuL,EAAOQ,GAClB,IAAI,IAAI/L,EAAI,EAAGA,EAAI+L,EAAS1P,OAAQ2D,IAAI,CACpC,IAAImS,EAAQ/W,KAAK4W,aAAazG,EAAOQ,EAAS/L,IAC3CmS,GAAS,GACR5G,EAAM6G,OAAOD,EAAO,GAG5B,OAAO5G,I,+BAGF,IAAD,OACJ,OACI,yBAAKjR,UAAU,eACX,4CACA,yBAAKA,UAAU,eACX,kBAAC,GAAD,MACA,yBAAKA,UAAU,iBACX,kBAAC,YAAD,CAAUiE,IAAK,SAAC+F,GAAD,OAAQ,EAAKuH,SAAWvH,KACvC,kBAAC,GAAD,CAAU+M,QAAQ,mBAAmBH,SAAS,mBAC1CjR,KAAM7E,KAAK3B,MAAMkY,UACjBhB,eAAgBvV,KAAKoW,oBACrB3F,SAAUzQ,KAAKyQ,WAEnB,kBAAC,GAAD,CAAUwF,QAAQ,gCACdpR,KAAM7E,KAAK3B,MAAMqY,cACjB3S,SAAS,W,GA1Hf7D,IAAMI,WAAtB6V,GAgBK5V,YAAc1D,EAmHVsZ,UC6CAc,GAlLE,SAAXA,EAAYja,GAEd,IAAMC,EAAOC,qBAAWL,GAFA,EAIEM,mBAAS,IAJX,mBAIjB8Q,EAJiB,KAIV+B,EAJU,OAKQ7S,mBAAS,IALjB,mBAKjBkY,EALiB,KAKP6B,EALO,OAMgB/Z,mBAAS,IANzB,mBAMjBga,EANiB,KAMHC,EANG,OAOgBja,mBAAS,IAPzB,mBAOjBka,EAPiB,KAOHC,EAPG,OAQcna,oBAAS,GARvB,mBAQjBoa,EARiB,KAQJC,EARI,OASYra,oBAAS,GATrB,mBASjBsa,EATiB,KASLC,EATK,OAUoBva,oBAAS,GAV7B,mBAUjBwa,EAViB,KAUDC,EAVC,OAWsBza,oBAAS,GAX/B,mBAWjB0a,EAXiB,KAWAC,EAXA,OAYwB3a,oBAAS,GAZjC,mBAYjB4a,EAZiB,KAYCC,EAZD,OAaoB7a,oBAAS,GAb7B,mBAajB8a,EAbiB,KAaDC,EAbC,KAexB1a,qBAAU,WACQ,8CACR0Q,KAAKD,GAAS6J,GAAmB,GAASA,GAAmB,KACpE,CAAC7J,IAEJzQ,qBAAU,WACN6X,EAASpU,QAAU,EAAI+W,GAAoB,GAASA,GAAoB,KACzE,CAAC3C,IAEJ7X,qBAAU,WACN2Z,EAAalW,QAAU,EAAKkW,IAAiBE,GAAgBa,GAAkB,GAASA,GAAkB,KAC3G,CAACf,EAAcE,IAElB,IAAMc,EAAoB,SAACla,GAEvB,OADWA,EAAM4D,OAAOf,MAEpB,IAAK,QACDkP,EAAS/R,EAAM4D,OAAOsD,OACtB,MACJ,IAAK,WACD+R,EAAYjZ,EAAM4D,OAAOsD,OACzB,MACJ,IAAK,eACDiS,EAAgBnZ,EAAM4D,OAAOsD,OAC7B,MACJ,IAAK,eACDmS,EAAgBrZ,EAAM4D,OAAOsD,SAOnCoD,EAAa,WACfyH,EAAS,IACTkH,EAAY,IACZE,EAAgB,IAChBE,EAAgB,IAChBE,GAAe,GACfE,GAAc,GACdE,GAAkB,GAClBE,GAAmB,GACnBE,GAAoB,GACpBE,GAAkB,IAGhBE,EAAW,uCAAG,WAAOna,GAAP,mBAAAR,EAAA,6DAChBQ,EAAMC,iBACAuG,EAAM,6BAA+BwJ,EAF3B,SAGEvQ,MAAM+G,GAHR,cAGV/F,EAHU,gBAIGA,EAAId,OAJP,OAIVA,EAJU,OAKbc,EAAIqS,KACHyG,GAAe,GACfE,EAAc9Z,EAAKya,QACnBT,EAAkBha,EAAK0a,aARX,2CAAH,sDAYXta,EAAY,uCAAG,WAAOC,GAAP,iBAAAR,EAAA,6DACjBQ,EAAMC,iBADW,SAECR,MAAM,kBAAmB,CACvC2M,OAAQ,OACRhF,KAAMoE,KAAKE,UAAU,CACjByL,KAAM,CAAE5W,SAAUyP,EAAOoH,SAAUA,KAEvC/K,QAAS,CAAE,eAAgB,sBAPd,cAEX5L,EAFW,gBASEA,EAAId,OATN,QASXgC,EATW,QAUTR,eACJtB,QAAQC,IAAI,iBACZwK,IACAtL,EAAK6C,aAAaF,IAElBqX,EAASxG,SAASlC,KAAK,CAACC,SAAU,QAASC,QAAS,eAAgBC,OAAQ,6CAf/D,2CAAH,sDAmBZ6J,GAAe,uCAAG,WAAOta,GAAP,iBAAAR,EAAA,6DACpBQ,EAAMC,iBADc,SAEFR,MAAM,qBAAsB,CAC1C2M,OAAQ,OACRhF,KAAMoE,KAAKE,UAAU,CACjByL,KAAM,CAAE5W,SAAUyP,EAAOoH,SAAU8B,EAAckB,OAAQZ,KAE7DnN,QAAS,CAAE,eAAgB,sBAPX,cAEd5L,EAFc,gBASDA,EAAId,OATH,OASdgC,EATc,OAUjBlB,EAAIf,QACH4K,IACAtL,EAAK6C,aAAa,CAACV,cAAeQ,EAAKR,cAAeZ,SAAUoB,EAAKpB,YAErEyY,EAASxG,SAASlC,KAAK,CAACC,SAAU,QAASC,QAAS,sBAAuBC,OAAQ9O,EAAK+O,UAdxE,2CAAH,sDAkBf6J,GAAY,uCAAG,WAAOva,GAAP,iBAAAR,EAAA,6DACjBQ,EAAMC,iBACNJ,QAAQC,IAAI,eAFK,SAGCL,MAAM,wBAAyB,CAC7C2M,OAAQ,OACRhF,KAAMoE,KAAKE,UAAU,CACjBsE,MAAOA,IAEX3D,QAAS,CAAE,eAAgB,sBARd,cAGX5L,EAHW,gBAUEA,EAAId,OAVN,OAUXgC,EAVW,OAWdlB,EAAIqS,GACHkG,EAASxG,SAASlC,KAAK,CAACC,SAAU,UAAWC,QAAS,uBAAwBC,OAAQ,gEAEtFuI,EAASxG,SAASlC,KAAK,CAACC,SAAU,QAASC,QAAS,oBAAqBC,OAAQ9O,EAAK+O,UAdzE,2CAAH,sDAsDlB,OACI,kBAAC,IAAM9P,SAAP,KACI,8CACA,kBAAC,YAAD,CAAUsE,IAAK,SAAC+F,GAAD,OAAQ+N,EAASxG,SAAWvH,KAC3C,iDACA,yBAAKhK,UAAU,cACX,kBAAC,aAAD,CAAW8F,KAAK,QAAQlE,KAAK,QAAQqE,MAAO8I,EAAO3H,SAAU6R,IAC7D,kBAAC,SAAD,CAAQjZ,UAAU,eAAeG,MAAM,OAAOoZ,KAAK,oBAAoBnZ,QAAS8Y,EAAazR,SAAUkR,KAEzGN,EAAc,yBAAKrY,UAAU,iBAAiByY,EA3ChD,kBAAC,IAAM9Y,SAAP,KACI,yDACA,yBAAKK,UAAU,UAAf,wDACA,kBAAC,aAAD,CAAWA,UAAU,WAAW8F,KAAK,WAAWlE,KAAK,WAAWqE,MAAOkQ,EAAU/O,SAAU6R,IAC3F,6BACI,kBAAC,SAAD,CAAQ9Y,MAAM,QAAQC,QAAStB,EAAc2I,SAAUoR,KAE3D,6BACI,4BAAQ7Y,UAAU,oBAAoBI,QAASkZ,IAA/C,yBAQR,kBAAC,IAAM3Z,SAAP,KACI,4BAAK4Y,EAAa,4BAA6B,oBAA/C,oBACA,6BACI,yBAAKvY,UAAU,UAAf,wDACA,kBAAC,aAAD,CAAWA,UAAU,WAAW8F,KAAK,WAAWlE,KAAK,eAAeqE,MAAOgS,EAAc7Q,SAAU6R,KAEvG,6BACI,yDACA,kBAAC,aAAD,CAAWjZ,UAAU,WAAW8F,KAAK,WAAWlE,KAAK,eAAeqE,MAAOkS,EAAc/Q,SAAU6R,KAEvG,6BACI,kBAAC,SAAD,CAAQ9Y,MAAM,WAAWC,QAASiZ,GAAiB5R,SAAUsR,OAgBkC,KCpJpGlb,I,MAAAA,aAxBD,SAACC,GACX,IAAMC,EAAOC,qBAAWL,GAChBS,EAAaN,EAAbM,SACFob,EAAMpb,EAASe,MAAQf,EAASe,MAAMO,eAAYoT,EAExD,OACI,kBAAC,IAAMnT,SAAP,KACK5B,EAAKmC,cACE9B,EAASe,MACT,kBAAC,IAAD,CAAUU,GAAIzB,EAASe,MAAMC,OAE7B,kBAAC,IAAD,CAAUS,GAAI,aAElB,yBAAKG,UAAU,eACX,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,aAAawZ,GAAY,IACxC,kBAAC,GAAD,aC+CTC,GAhED,SAARA,EAAS3b,GAAW,IAAD,EAEKG,mBAAS,IAFd,mBAEd8Q,EAFc,KAEP+B,EAFO,OAGa7S,mBAAS,IAHtB,mBAGd0X,EAHc,KAGHC,EAHG,OAIa3X,mBAAS,IAJtB,mBAId4X,EAJc,KAIHC,EAJG,OAKiB7X,oBAAS,GAL1B,mBAKdsY,EALc,KAKDmD,EALC,KAOrBpb,qBAAU,WAELqX,EAAU5T,QAAU,GAAK4T,IAAcE,GAD1B,8CAC6C7G,KAAKD,GAAU2K,GAAe,GAASA,GAAe,KAClH,CAAC3K,EAAO4G,EAAWE,IAEtB,IAAMyD,EAAY,uCAAG,WAAOva,GAAP,iBAAAR,EAAA,6DACjBQ,EAAMC,iBADW,SAECR,MAAM,wBAAyB,CAC7C2M,OAAQ,OACRhF,KAAMoE,KAAKE,UAAU,CACjByL,KAAM,CACF5W,SAAUyP,EACVoH,SAAUR,EACVgE,MAAO7b,EAAM8b,MAAMvI,OAAOsI,SAGlCvO,QAAS,CAAE,eAAgB,sBAXd,cAEX5L,EAFW,gBAaEA,EAAId,OAbN,OAaXgC,EAbW,OAcjB9B,QAAQC,IAAI6B,GACTA,EAAKjC,OACJgb,EAAMlI,SAASlC,KAAK,CAACC,SAAU,UAAWC,QAAS,0BAA2BC,OAAQ,0CAEtFiK,EAAMlI,SAASlC,KAAK,CAACC,SAAU,QAASC,QAAS,8BAA+BC,OAAQ9O,EAAK+O,UAlBhF,2CAAH,sDAsBlB,OACI,kBAAC,IAAM9P,SAAP,KACI,yBAAKK,UAAU,eACX,yBAAKA,UAAU,mBACX,8CACA,kBAAC,YAAD,CAAUiE,IAAK,SAAC+F,GAAD,OAAQyP,EAAMlI,SAAWvH,KACxC,yBAAKhK,UAAU,cACX,yCACA,kBAAC,aAAD,CAAW8F,KAAK,QAAQlE,KAAK,QAAQqE,MAAO8I,EAAO3H,SAAU,SAACiD,GAAOyG,EAASzG,EAAE1H,OAAOsD,WAE3F,yBAAKjG,UAAU,iBACX,kDACA,6BACI,yBAAKA,UAAU,UAAf,wDACA,kBAAC,aAAD,CAAWA,UAAU,WAAW8F,KAAK,WAAWlE,KAAK,YAAYqE,MAAO0P,EAAWvO,SAAU,SAACiD,GAAOuL,EAAavL,EAAE1H,OAAOsD,WAE/H,6BACI,wDACA,kBAAC,aAAD,CAAWjG,UAAU,WAAW8F,KAAK,WAAWlE,KAAK,YAAYqE,MAAO4P,EAAWzO,SAAU,SAACiD,GAAOyL,EAAazL,EAAE1H,OAAOsD,WAE/H,6BACI,kBAAC,SAAD,CAAQ9F,MAAM,QAAQC,QAASkZ,EAAc7R,SAAU8O,UCNpEsD,I,wLAlDP,IAAMzW,EACF,6BACCtC,KAAKhD,MAAMgc,SAAS9W,QAAQ2O,YAAYvO,YAAYrB,OACjDjB,KAAKhD,MAAMgc,SAAS9W,QAAQ2O,YAAYvO,YAAY3B,KAAI,SAACC,GAAD,OACpD,wBAAIC,IAAKD,EAAK4B,KAAMtD,UAAU,WAC1B,yBAAKA,UAAU,cAAc0B,EAAK6B,UAClC,6BACA,yBAAKvD,UAAU,cAAa,uBAAGQ,KAAMkB,EAAK4B,MAAO5B,EAAK4B,WAI9D,yBAAKtD,UAAU,cAAf,mBAOR,OACI,kBAAC,IAAML,SAAP,KACI,wBAAIK,UAAU,iBAAd,YAAwCc,KAAKhD,MAAMgc,SAAS9W,QAAQ7C,OACpE,yBAAKH,UAAU,cACX,yBAAKA,UAAU,qBACX,gDACA,wBAAIA,UAAU,cAAd,WACIc,KAAKhD,MAAMgc,SAAS9W,QAAQ2O,YAAYxO,gBAAgBf,OACxD,uBAAG5B,KAAMM,KAAKhD,MAAMgc,SAAS9W,QAAQ2O,YAAYxO,gBAAgBf,QAAStB,KAAKhD,MAAMgc,SAAS9W,QAAQ2O,YAAYxO,gBAAgBf,QAChI,iBAGN,wBAAIpC,UAAU,cAAd,YAAqCc,KAAKhD,MAAMgc,SAAS9W,QAAQ2O,YAAYxO,gBAAgBD,UAGjG,yBAAKlD,UAAU,qBACX,6CACA,4BACKoD,IAIT,yBAAKpD,UAAU,qBACX,8CACA,yBAAKA,UAAU,cAAcc,KAAKhD,MAAMgc,SAASvR,OAAO3G,KAAOd,KAAKhD,MAAMgc,SAASvR,OAAO3G,KAAO,wB,GA7CzFZ,IAAMI,YCkCvB2Y,G,iLA9BP,IAAMC,EACF,6BACMlZ,KAAKhD,MAAMgc,SAASG,cAAgB,uBAAGzZ,KAAMM,KAAKhD,MAAMgc,SAASG,eAAgBnZ,KAAKhD,MAAMgc,SAASG,eAAqB,iBAIpI,OACI,kBAAC,IAAMta,SAAP,KACI,wBAAIK,UAAU,iBAAd,+BACA,yBAAKA,UAAU,cACX,yBAAKA,UAAU,qBACX,iDACA,yBAAKA,UAAU,cACVga,IAGT,yBAAKha,UAAU,qBACX,iDACA,kBAAC,EAAD,CAAiBwB,MAAOV,KAAKhD,MAAMgc,SAASrV,UAEhD,yBAAKzE,UAAU,qBACX,uDACA,kBAAC,EAAD,CAAmBwB,MAAOV,KAAKhD,MAAMgc,SAASvV,iB,GAzB1CvD,IAAMI,WCiCnB8Y,G,iLA9BP,IAAMF,EACF,6BACMlZ,KAAKhD,MAAMgc,SAASK,cAAgB,uBAAG3Z,KAAMM,KAAKhD,MAAMgc,SAASK,eAAgBrZ,KAAKhD,MAAMgc,SAASK,eAAqB,iBAIpI,OACI,kBAAC,IAAMxa,SAAP,KACI,wBAAIK,UAAU,iBAAd,sCACA,yBAAKA,UAAU,cACX,yBAAKA,UAAU,qBACX,iDACA,yBAAKA,UAAU,cACVga,IAGT,yBAAKha,UAAU,qBACX,+CACA,kBAAC,EAAD,CAAiBwB,MAAOV,KAAKhD,MAAMgc,SAASpV,UAEhD,yBAAK1E,UAAU,qBACX,uDACA,kBAAC,EAAD,CAAmBwB,MAAOV,KAAKhD,MAAMgc,SAAStV,iB,GAzB1CxD,IAAMI,WC6BnBgZ,G,YA3BX,aAAc,IAAD,8BACT,+CAIJnP,aAAe,SAAAlM,GACXA,EAAMC,iBAEN,IAAM2G,EAAO,EAAK7H,MAAM6H,KAClBsG,EAASC,SAASC,cAAc,KACtCF,EAAOG,aAAa,WAAY,MAChCH,EAAOvI,MAAM2I,QAAU,OACvBJ,EAAOG,aAAa,OAAQzG,EAAK2H,cACjCpB,SAAS/F,KAAKmG,YAAYL,GAC1BA,EAAOM,QACPL,SAAS/F,KAAKqG,YAAYP,GAE1BD,EAAiBrG,EAAK4H,MAftB,EAAKtC,aAAe,EAAKA,aAAa8C,KAAlB,iBAFX,E,sEAqBT,OACI,kBAAC,SAAD,CAAQ/N,UAAU,cAAcG,MAAM,WAAWsH,SAAU3G,KAAKhD,MAAM2J,SAAUrH,QAASU,KAAKmK,mB,GAvBzEjK,IAAMI,WCkFxBiZ,G,YAzEX,aAAc,IAAD,8BACT,+CACKlb,MAAQ,CACTwG,KAAM,GACN2U,QAAS,GACTtX,QAAS,GACTe,IAAK,GACLI,IAAK,GACLuQ,SAAS,EACTjF,QAAS,IAEb,EAAK6B,YAAc,EAAKA,YAAYvD,KAAjB,iBAXV,E,iFAcO,IAAD,OACfnP,QAAQC,IAAIiC,KAAKhD,MAAM8b,MAAMvI,OAAOkJ,IAAM,IAAMzZ,KAAKhD,MAAM8b,MAAMvI,OAAOmJ,KACxE,IAAIjM,EAAS,iBAAmBzN,KAAKhD,MAAM8b,MAAMvI,OAAOkJ,IAAM,IAAMzZ,KAAKhD,MAAM8b,MAAMvI,OAAOmJ,IAC5F5b,QAAQC,IAAI0P,GACZV,EAAmBU,GAAQ,SAAC5I,GACxB/G,QAAQC,IAAI8G,GACTA,EACC,EAAKmG,SAAS,CACVnG,KAAMA,EACN2U,QAAS,CAAC1Y,KAAM+D,EAAK/D,KAAMc,IAAKiD,EAAKjD,IAAKG,UAAW8C,EAAK9C,UAAWD,YAAa+C,EAAK/C,aACvFI,QAAS,CAACA,QAAS2C,EAAK3C,QAASuF,OAAQ5C,EAAK4C,QAC9CxE,IAAK,CAACQ,QAASoB,EAAKpB,QAASE,OAAQkB,EAAKlB,OAAQwV,cAAetU,EAAK3C,QAAQ2O,YAAYsI,eAC1F9V,IAAK,CAACK,QAASmB,EAAKnB,QAASE,OAAQiB,EAAKjB,OAAQyV,cAAexU,EAAK3C,QAAQ2O,YAAYwI,eAC1FzF,SAAS,IAGb,EAAK5I,SAAS,CAAC2D,QAAS,+C,kCAKxBhR,EAAQiC,GAChByQ,GAA8B1S,EAAQiC,EAAMI,KAAK0Q,gBAAiB1Q,KAAKyQ,Y,+BAGlE,IAAD,OACJ,OACI,yBAAKvR,UAAU,eACX,kBAAC,YAAD,CAAUiE,IAAK,SAAC+F,GAAD,OAAQ,EAAKuH,SAAWvH,KACvC,yBAAKhK,UAAU,aACX,8CAAoBc,KAAK3B,MAAMwG,KAAK/D,MACpC,kBAAC,GAAD,CAAoB6F,UAAU,EAAO9B,KAAM7E,KAAK3B,MAAMwG,KAAM8U,mBAAoB3Z,KAAKwQ,eAEzF,kBAAC,EAAD,CAAsB5Q,KAAMI,KAAK3B,MAAMmb,UACvC,yBAAKta,UAAU,gBACVc,KAAK3B,MAAMuV,QACR,kBAAC,UAAD,CAAS5Q,kBAAkB,GACvB,kBAAC,WAAD,CAAUjC,OAAO,WACb,kBAAC,GAAD,CAAmBiY,SAAUhZ,KAAK3B,MAAM6D,WAE3ClC,KAAK3B,MAAMwG,KAAKwC,SAAS1G,KAAI,SAACqE,GAAD,OAC1B,kBAAC,WAAD,CAAUnE,IAAKmE,EAAKlE,KAAMC,OAAQiE,EAAKlE,MACpB,QAAdkE,EAAKlE,KACF,kBAAC,GAAD,CAAekY,SAAU,EAAK3a,MAAM4E,MAEpC,kBAAC,GAAD,CAAe+V,SAAU,EAAK3a,MAAMgF,WAMpD,4BAAKrD,KAAK3B,MAAMsQ,e,GAlErBzO,IAAMI,WCCVsZ,GAXK,SAAC5c,GAEjB,OACI,kBAAC,IAAM6B,SAAP,KACI,yBAAKK,UAAU,eACX,mFC+ED2a,G,YAnEX,aAAc,IAAD,8BACT,+CACKxb,MAAQ,CACTe,eAAe,EACfgT,SAAS,EACT5T,SAAU,GACVsB,aAAc,SAACqF,GACX,EAAK6F,SAAS,CACV5L,cAAe+F,EAAM/F,cACrBZ,SAAU2G,EAAM3G,SAChB4T,QAASjN,EAAMiN,WAGvBzT,eAAgB,WACZ,EAAKqM,SAAS,CACV5L,eAAe,EACfgT,SAAS,EACTgD,KAAM,OAjBT,E,iFAuBO,IAAD,OACXpV,KAAK3B,MAAMe,eACX1B,MAAM,wBACLe,MAAK,SAAAC,GACF,OAAkB,MAAfA,EAAIf,OACIe,EAAId,OAEJ,CAACwB,eAAe,EAAOgT,SAAS,EAAO5T,SAAU,OAG/DC,MAAK,SAAAmB,GACF,EAAKvB,MAAMyB,aAAaF,Q,+BAOhC,IAAMka,EACF,kBAAC,GAAD,MAGJ,OACI,kBAACjd,EAAYmU,SAAb,CAAsB7L,MAAOnF,KAAK3B,OAC9B,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOS,OAAK,EAACR,KAAM,IAAI8B,UAAW2Z,IAClC,kBAAC,IAAD,CAAOjb,OAAK,EAACR,KAAM,cAAc8B,UAAWkP,KAC5C,kBAAC,IAAD,CAAOxQ,OAAK,EAACR,KAAM,aAAa8B,UAAWkR,KAC3C,kBAAC,IAAD,CAAOxS,OAAK,EAACR,KAAM,SAAS8B,UAAWqT,KACvC,kBAAC,IAAD,CAAO3U,OAAK,EAACR,KAAM,iBAAiB8B,UAAWoU,KAC/C,kBAAC,IAAD,CAAO1V,OAAK,EAACR,KAAM,YAAY8B,UAAWsU,KAC1C,kBAAC,IAAD,CAAO5V,OAAK,EAACR,KAAK,kBAAkB8B,UAAW4Z,KAC/C,kBAAC,IAAD,CAAO1b,KAAM,gBAAgB8B,UAAWuY,KACxC,kBAAC,IAAD,CAAOra,KAAK,aAAa8B,UAAWmZ,KACpC,kBAAC,EAAD,CAAcjb,KAAK,WAAW8B,UAAW0Z,EAASzZ,SAAS,oBAC3D,kBAAC,IAAD,CAAOD,UAAWwZ,MAEtB,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GA9DK1Z,IAAMI,WCHZ2Z,G,iLARb,OACC,yBAAK/a,UAAU,OACd,kBAAC,GAAD,W,GAJcgB,IAAMI,WCOJ4Z,QACW,cAA7BC,OAAO7c,SAAS8c,UAEe,UAA7BD,OAAO7c,SAAS8c,UAEhBD,OAAO7c,SAAS8c,SAAStB,MACvB,2DCRNuB,IAASpa,OACL,kBAAC,IAAD,KACI,kBAAC,GAAD,OAELmL,SAASkP,eAAe,SDmHrB,kBAAmBC,WACrBA,UAAUC,cAAcvK,MAAMxR,MAAK,SAAAgc,GACjCA,EAAaC,iB","file":"static/js/main.4e9ec8cb.chunk.js","sourcesContent":["import { createContext } from 'react';\n\nexport const AuthContext = createContext();","import React, {useState, useEffect, useContext} from 'react';\nimport { NavLink } from 'react-router-dom';\nimport {Button} from 'primereact/button';\nimport {AuthContext} from '../../context/auth';\nimport './Navigation.css';\nimport { slide as Menu } from 'react-burger-menu';\nimport {withRouter} from 'react-router'\n\nconst Navigation = (props) => {\n\n    const auth = useContext(AuthContext);\n    const [isOnline, setIsOnline] = useState(false);\n    const { location, history } = props\n\n    useEffect(() => {\n        const checkStatus = async () => {\n            const status = await fetch('/api/pachyderm/status');\n            const json = await status.json();\n            setIsOnline(json.isOnline);\n        }\n        checkStatus();\n    }, []);\n\n    useEffect(() => {\n        console.log('Pachyderm is ' + (isOnline ? 'online' : 'offline'))\n    }, [isOnline])\n\n    const onLoginClick = (event) => {\n        event.preventDefault();\n        history.push({pathname: '/Authentication', state:{path: location.pathname}});\n    }\n\n    const onLogoutClick = (event) => {\n        event.preventDefault();\n        fetch('/api/user/logout/:' + auth.username)\n            .then(res => {\n                auth.resetAuthToken();\n                history.push({pathname: '/Authentication', state:{path: location.pathname, logoutMsg: 'You have logged out'}});\n            });            \n    }\n\n    return(\n        <React.Fragment>\n            <header>\n                <NavLink exact to='/'><img src={process.env.PUBLIC_URL + \"/images/trumpet-orcestra.png\"} alt='' /></NavLink>\n                <div className='navBarContainer'>\n                    <div className='navBar'>\n                        <div><NavLink exact to='/' activeClassName='active-link'>Home</NavLink></div>\n                        <div><NavLink exact to=\"/PSetSearch\" activeClassName='active-link'>Search and Request</NavLink></div>\n                        <div><NavLink exact to=\"/Dashboard\" activeClassName='active-link'>Request Status</NavLink></div>\n                        <div><NavLink exact to=\"/Documentation\" activeClassName='active-link'>Documentation</NavLink></div>\n                        { auth.authenticated && <div className='menu-item'><NavLink exact to=\"/Profile\" activeClassName='active-link'>Profile</NavLink></div> }\n                        <div>\n                            {\n                                auth.authenticated ? \n                                <Button label='Logout' onClick={onLogoutClick}/> : <Button label='Login/Register' onClick={onLoginClick}/>\n                            }\n                        </div> \n                        <div>\n                            {isOnline ? \n                                <div className='pachydermStatus isOnline'>\n                                    <div className='icon'><i className='pi pi-check'></i></div><div className='text'>Pachyderm is <br />online</div>\n                                </div> \n                                : \n                                <span className='pachydermStatus isOffline'>\n                                    <div className='icon'><i className='pi pi-ban'></i></div><div className='text'>Pachyderm is <br />offline</div>\n                                </span>\n                            }\n                        </div>    \n                    </div>\n                    <div className='burgerNav'>\n                        <Menu width={ 200 } isOpen={true} > \n                            <div className='menu-item'><NavLink exact to='/' activeClassName='active-link'>Home</NavLink></div>\n                            <div className='menu-item'><NavLink exact to=\"/PSetSearch\" activeClassName='active-link'>Search and Request</NavLink></div>\n                            <div><NavLink exact to=\"/Dashboard\" activeClassName='active-link'>Request Status</NavLink></div>\n                            <div><NavLink exact to=\"/Documentation\" activeClassName='active-link'>Documentation</NavLink></div>\n                            { auth.authenticated && <div className='menu-item'><NavLink exact to=\"/Profile\" activeClassName='active-link'>Profile</NavLink></div> }\n                            <div className='menu-item'>\n                                {\n                                    auth.authenticated ? \n                                    <Button label='Logout' onClick={onLogoutClick}/> : <Button label='Login/Register' onClick={onLoginClick}/>\n                                }\n                            </div>\n                            <div>\n                                {isOnline ? \n                                    <div className='pachydermStatus isOnline'>\n                                        <div className='icon'><i className='pi pi-check'></i></div><div className='text'>Pachyderm is <br />online</div>\n                                    </div> \n                                    : \n                                    <span className='pachydermStatus isOffline'>\n                                        <div className='icon'><i className='pi pi-ban'></i></div><div className='text'>Pachyderm is <br />offline</div>\n                                    </span>\n                                }\n                            </div>\n                        </Menu>\n                    </div>   \n                </div>\n                \n                <div className='loggedIn'>{auth.authenticated ? 'Logged in as: ' + auth.username : ''}</div> \n            </header>\n        </React.Fragment>\n    );\n}\n\nexport default withRouter(Navigation);","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport './Footer.css';\n\nconst Footer = (props) => {\n    return(\n        <div className='appFooter'>\n            <div className='footerContainer'>\n                <div className=\"footerMenu footerLinks\">\n                    <h3>Menu</h3>\n                    <NavLink exact to=\"/PSetSearch\" >Search and Request</NavLink>\n                    <NavLink exact to=\"/Dashboard\" >Request Status</NavLink>\n                    <NavLink exact to=\"/Stats\" >Statistics</NavLink>\n                </div>\n                <div className=\"footerSupport footerLinks\">\n                    <h3>Support</h3>\n                    <NavLink exact to=\"/Documentation\" >Documentation</NavLink>\n                    <NavLink exact to=\"/Tutorial\" >Contributing your data</NavLink>\n                    <a href=\"https://github.com/bhklab\">GitHub</a>\n                    <a href=\"https://bhklab.ca/\">BHKLab</a>\n                </div>\n                <div className=\"footerContact\">\n                    <h3>BHKLab</h3>\n                    <div className='contactInfo'>\n                        The MaRS center\n                        <br />\n                        101 College St, Toronto ON\n                        {' '}\n                        <br />\n                        TMDT RM 11-310\n                    </div>\n                </div>\n            </div>\n        </ div>\n    );\n} \n\nexport default Footer;","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport {AuthContext} from '../../context/auth';\n\nclass PrivateRoute extends React.Component {\n    \n    static contextType = AuthContext;\n\n    componentDidMount(){\n        fetch('/api/user/checkToken')\n            .then(res => {\n                if(res.status === 200){\n                    return(res.json());\n                }else{\n                    return({authenticated: false, username: ''});\n                }\n            })\n            .then(data => {this.context.setAuthToken(data)});\n    }\n    \n    render(){\n        const userAuth = this.context;\n        return(\n            <Route            \n                exact path={this.props.path} \n                render={(props) => userAuth.authenticated ? React.cloneElement(this.props.component, {...props}) : (<Redirect to={{pathname: this.props.redirect, state: {path: this.props.path}}} />)}\n            />\n        );\n    }\n}\n\nexport default PrivateRoute;","import React from 'react';\nimport {Accordion,AccordionTab} from 'primereact/accordion';\n\nclass PSetToolAccordion extends React.Component {\n\n    render(){\n        const toolAccordionTabs = this.props.items.map((item) => \n            <AccordionTab key={item.name} header={item.name}>\n                {item.commands.length ? \n                    <ul>\n                        {item.commands.map((command) => \n                            <li key={command}>\n                                {command}\n                            </li>    \n                        )}\n                    </ul>\n                    :\n                    \"Not Available\"\n                }\n                   \n            </AccordionTab>\n        );\n        \n        return(\n            this.props.items.length ? \n                <Accordion multiple={true}>\n                    {toolAccordionTabs}\n                </Accordion>\n                :\n                <div className='subContent'>Not Available</div>\n        );\n    }\n\n}\n\nclass RNARefAccordion extends React.Component {\n    \n    render(){\n        const rnaRefAccordionTabs = this.props.items.map((item) => \n            <AccordionTab key={item.name} header={item.name}>\n                <ul>\n                    <li className='listItem-1'>\n                        <div>{item.name.length ? item.name : 'Currently not available'}</div>\n                        <div>{item.source.length ? <a href={item.source}>{item.source}</a> : 'Currently not available'}</div>\n                    </li>                    \n                </ul> \n            </AccordionTab>\n        );\n    \n        return(\n            this.props.items.length ? \n                <Accordion multiple={true}>\n                    {rnaRefAccordionTabs}\n                </Accordion>\n                :\n                <div className='subContent'>Not Available</div>\n        );\n    }\n    \n}\n\nclass DNARefAccordion extends React.Component {\n\n    render(){\n        const exomeRefAccordionTabs = this.props.items.map((item) => \n            <AccordionTab key={item.name} header={item.name}>\n                <ul>\n                    <li className='listItem-1'>\n                        <div>{item.name.length ? item.name: 'Currently not available'}</div>\n                        <div>{item.source.length ? <a href={item.source}>{item.source}</a> : 'Currently not available'}</div>\n                    </li>\n                    <li className='listItem-1'>\n                        <div>{item.cosmic.name}</div>\n                        <div><a href={item.cosmic.source}>{item.cosmic.source}</a> </div>\n                    </li>\n                    <li className='listItem-1'>\n                        <div>{item.exonTarget.name}</div>\n                        <div><a href={item.exonTarget.source}>{item.exonTarget.source}</a></div>\n                    </li>                       \n                </ul> \n            </AccordionTab>\n        );\n    \n        return(\n            this.props.items.length ? \n                <Accordion multiple={true}>\n                    {exomeRefAccordionTabs}\n                </Accordion>\n                :\n                <div className='subContent'>Not Available</div>\n        );\n    }\n\n}\n\nclass GeneralInfoAccordion extends React.Component {\n    render(){   \n        const doi = 'http://doi.org/' + this.props.data.doi\n        return(\n            <Accordion className='generalInfoAccordion'>\n                <AccordionTab header=\"General Information\">\n                    <h4 className='subContent'>PSet Name: {this.props.data.name}</h4>\n                    <h4 className='subContent'>DOI:  <a href={doi} target=\"_blank\">{this.props.data.doi}</a></h4>\n                    <h4 className='subContent'>Date Created: {this.props.data.dateCreated}</h4>\n                    {this.props.data.createdBy && <h4 className='subContent'>Created By {this.props.data.createdBy}</h4>}\n                </AccordionTab>    \n            </Accordion>    \n        );\n    }\n}\n\nexport {\n    PSetToolAccordion,\n    RNARefAccordion,\n    DNARefAccordion,\n    GeneralInfoAccordion\n}\n","import React from 'react';\nimport {Dialog} from 'primereact/dialog';\nimport {TabView,TabPanel} from 'primereact/tabview';\nimport {PSetToolAccordion, RNARefAccordion, DNARefAccordion} from '../PSet/PSetAccordion';\nimport {Accordion,AccordionTab} from 'primereact/accordion';\n\nconst DatasetDialog = (props) => {\n    \n    const datasetAccordionTabs = props.dataset.map((item) => \n        <TabPanel key={item.label} header={item.label}>\n            <div className='mainTabContent'>\n                <Accordion multiple={true}>\n                    {item.versions.map((version) => \n                        <AccordionTab key={version.version} header={version.version}>\n                            <div className='tabContentSection'>\n                                <h3>Drug Sensitivity</h3>\n                                <h4 className='subContent'>Version: {version.drugSensitivity.version}</h4>\n                                <h4 className='subContent'>Source: {version.drugSensitivity.source ? <a href={version.drugSensitivity.source}>{version.drugSensitivity.source}</a> : 'Not available'}</h4>\n                            </div>\n                            <div className='tabContentSection'>\n                                <h3>Publication: </h3>\n                                <ul>\n                                    <div>    \n                                        {version.publication.length ? \n                                            version.publication.map((p) => \n                                                <li key={p.link} className='pubList'>\n                                                    <div className='subContent'>{p.citation}</div>\n                                                    <br />\n                                                    <div className='subContent'><a href={p.link}>{p.link}</a></div>\n                                                </li>\n                                            )\n                                            :\n                                            <div className=\"subContent\">\n                                                Not available.\n                                            </div>\n                                        }  \n                                    </div>\n                                </ul> \n                            </div>\n                        </AccordionTab>\n                    )}     \n                </Accordion>\n            </div> \n        </TabPanel>\n    );\n    \n    return(\n        <Dialog header=\"Dataset Overview\" visible={props.visible} onHide={props.onHide} style={{minWidth: '50vw', minHeight: '30vh'}} >\n            <TabView>\n                {datasetAccordionTabs}\n            </TabView>\n        </Dialog>\n    )\n}\n\nconst RNADialog = (props) => {\n    return(\n        <Dialog header=\"RNA Pipeline Overview\" visible={props.visible} onHide={props.onHide} style={{minWidth: '50vw', minHeight: '30vh'}} >\n            <TabView renderActiveOnly={false}>\n                <TabPanel key='rnaTools' header=\"RNA Tools\">\n                    <h3>Available RNA Pipeline Tools</h3>\n                    <PSetToolAccordion items={props.rna.tool} />\n                </TabPanel>\n                <TabPanel key='rnaRef' header=\"RNA References\">\n                    <h3>Available RNA Transcriptome References</h3>\n                    <RNARefAccordion items={props.rna.ref} />\n                </TabPanel>\n            </TabView>\n        </Dialog>\n    )\n}\n\nconst DNADialog = (props) => {\n    return(\n        <Dialog header=\"DNA Sequence Alignment Overview\" visible={props.visible} onHide={props.onHide} style={{minWidth: '50vw', minHeight: '30vh'}} >\n            <TabView renderActiveOnly={false}>\n                <TabPanel key='dnaTools' header=\"DNA Tools\">\n                    <h3>Available DNA Pipeline Tools</h3>\n                    <PSetToolAccordion items={props.dna.tool} />\n                </TabPanel>\n                <TabPanel key='dnaRef' header=\"DNA References\">\n                    <h3>Available DNA Exome References</h3>\n                    <DNARefAccordion items={props.dna.ref} />\n                </TabPanel>\n            </TabView>\n        </Dialog>\n    )\n}\n\nexport {\n    DatasetDialog,\n    RNADialog,\n    DNADialog\n}","import React, {useState, useEffect} from 'react';\nimport {DataTable} from 'primereact/datatable';\nimport {Column} from 'primereact/column';\nimport { Link } from 'react-router-dom';\nimport {DatasetDialog, RNADialog, DNADialog} from '../MainDialog/MainDialog';\nimport './Main.css';\n\nconst OrcestraMain = (props) => {\n    \n    const [statsData, setStatsData] = useState([]);\n    const [formData, setFormData] = useState({\n        dataset: [],\n        rnaTool: [],\n        dnaTool: [],\n        rnaRef: [],\n        dnaRef: []\n    });\n    const [dashboard, setDashboard] = useState({\n        pending: 0,\n        inProcess: 0\n    });\n    const [datasetVisible, setDatasetVisible] = useState(false);\n    const [rnaVisible, setRNAVisible] = useState(false);\n    const [dnaVisible, setDNAVisible] = useState(false);\n\n    useEffect(() => {\n        const fetchData = async (api) => {\n            const res = await fetch(api);\n            const json = await res.json();\n            const dataset = json.form[0].dataset \n            let versionCombo = 0\n            for(let i = 0; i < dataset.length; i++){\n                versionCombo += dataset[i].versions.length\n            }\n            setStatsData(json.pset);\n            setFormData({...json.form[0], versionCombo: versionCombo});\n            setDashboard(json.dashboard);\n        }\n        fetchData('/api/landing/data');\n    }, [])\n\n    const nameColumnTemplate = (rowData, column) => {\n        let route = '/' + rowData.doi;\n        return(\n            <Link to={route} >{rowData.name}</Link>\n        );\n    }\n\n    const showDialog = (type) => {\n        switch(type){\n            case 'dataset':\n                setDatasetVisible(true);\n                break;\n            case 'rna':\n                setRNAVisible(true);\n                break;\n            case 'dna':\n                setDNAVisible(true);\n                break;\n            default:\n                break;\n        }\n    }\n\n    const hideDialog = (type) => {\n        switch(type){\n            case 'dataset':\n                setDatasetVisible(false);\n                break;\n            case 'rna':\n                setRNAVisible(false);\n                break;\n            case 'dna':\n                setDNAVisible(false);\n                break;\n            default:\n                break;\n        }\n    }\n\n    return (\n        <React.Fragment>\n            <div className='mainContent'>\n                <div className=\"home\">\n                    <h1>ORCESTRA</h1>   \n                    <h2>Orchestration platform for reproducing pharmacogenomic analyses</h2>\n                    <div className='mainMenuContainer'>\n                        <div className='mainMenuRow'>\n                            <div className='mainMenuColumn'>\n                                <div className='mainMenuItem'>\n                                    <h3>Search and Request PSets</h3>\n                                    <div className='mainMenuItemContent'>\n                                        <div>Design your own PSet using:</div>\n                                        <div className='mainMenuItemLine'>\n                                            <div className='largeNum'><button onClick={() => {showDialog('dataset')}}>{formData.versionCombo}</button></div> <div>Dataset/Drug sensitivity combinations</div>\n                                        </div>\n                                        <div className='mainMenuItemLine'><span className='largeNum'>\n                                            <button onClick={() => {showDialog('rna')}}>{formData.rnaTool.length}</button></span> <span>RNA pipelines.</span>\n                                        </div>\n                                        <div className='mainMenuItemLine'><span className='largeNum'>\n                                            <button onClick={() => {showDialog('dna')}}>{formData.dnaTool.length}</button></span> <span>DNA tools.</span>\n                                        </div>\n                                        <div className='mainMenuLink'>\n                                            <a className='button' href=\"/PSetSearch\">Search and Request</a>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                            <div className='mainMenuColumn'>\n                                <div className='mainMenuItem' style={{ alignSelf: 'flex-start'}}>\n                                    <h3>View PSet Request Status</h3>\n                                    <div className='mainMenuItemContent'>\n                                        <div>ORCESTRA is processing following requests:</div>\n                                        <div className='mainMenuItemLine'><span className='largeNum'>{dashboard.pending}</span> <span>Requests in queue.</span></div>\n                                        <div className='mainMenuItemLine'><span className='largeNum'>{dashboard.inProcess}</span> <span >Requests in process.</span></div>\n                                        <div className='mainMenuLink'><a className='button' href=\"/Dashboard\">View Dashboard</a></div>\n                                    </div>\n                                </div>\n                            </div> \n                            <div className='mainMenuColumn'>\n                                <div className='mainMenuItem'>\n                                    <h3>Top 5 Popular PSets</h3>\n                                    <div className='mainMenuItemContent'>\n                                        <DataTable value={statsData} >\n                                            <Column className='textField' field='download' header='Download' />\n                                            <Column className='textField' field='name' header='Name' body={nameColumnTemplate}/>\n                                        </DataTable>\n                                        <div className='mainMenuLink'><a className='button' href=\"/Stats\">View Statistics</a></div>\n                                    </div>\n                                </div> \n                                <div className='mainMenuItem'>\n                                    <h3>Generate PSets with Your Data</h3>\n                                    <div className='mainMenuItemContent'>\n                                        <p>\n                                            <b>You can generate PSets using your own datasets.</b> <br /> \n                                            For more information, please read about <a href='/Tutorial'>contributing your data</a>.\n                                        </p>    \n                                    </div>\n                                </div> \n                            </div>    \n                        </div>  \n                    </div>  \n                </div>\n            </div>\n            <DatasetDialog visible={datasetVisible} onHide={() => {hideDialog('dataset')}} dataset={formData.dataset} />\n            <RNADialog visible={rnaVisible} onHide={() => {hideDialog('rna')}} rna={{tool: formData.rnaTool, ref: formData.rnaRef}} />\n            <DNADialog visible={dnaVisible} onHide={() => {hideDialog('dna')}} dna={{tool: formData.dnaTool, ref: formData.dnaRef}} />\n            }\n            \n        </React.Fragment>\n    );\n    \n}\n\nexport default OrcestraMain;","import React from 'react';\nimport './PSetDropdown.css';\nimport {MultiSelect} from 'primereact/multiselect';\nimport {Dropdown} from 'primereact/dropdown';\n\n// props: id, className, isHidden, selectOne, parameterName, parameterOptions[], selecedParameter[], handleUpdateSelection()\n\nclass PSetDropdown extends React.Component {\n    \n    render(){\n        const dataTemplate =  (option) => {\n            return(\n                <div className=\"\">\n                    <span style={{fontSize:'1em',margin:'1em .5em 0 0'}}>{option.label}</span>\n                </div>\n            );\n        }\n\n        const selectedDataTemplate = (item) => {\n            if (item) {\n                return (\n                    <div className=\"my-multiselected-item-token\">\n                        <span>{item.label}</span>\n                    </div>\n                );\n            }\n            else {\n                return <span>Select...</span>\n            }\n        }\n            \n        if(this.props.isHidden){\n            return(null);\n        }\n        if(this.props.selectOne){\n            return(\n                <div className='filterSet'>\n                    <label>{this.props.parameterName}</label>\n                    <Dropdown \n                        id={this.props.id} \n                        className='paramInput' \n                        optionLabel='label' \n                        value={this.props.selectedParameter}   \n                        options={this.props.parameterOptions} \n                        onChange={this.props.handleUpdateSelection}\n                        filter={true} \n                        itemTemplate={dataTemplate}\n                        placeholder=\"Select one...\"\n                        disabled={this.props.disabled}\n                    />\n                </div>\n            );\n        }\n        return(\n            <div className='filterSet'>\n                <label>{this.props.parameterName}</label>\n                <MultiSelect \n                    id={this.props.id}\n                    className='paramInput' \n                    optionLabel='label' \n                    value={this.props.selectedParameter} \n                    options={this.props.parameterOptions} \n                    onChange={this.props.handleUpdateSelection}\n                    filter={true} \n                    itemTemplate={dataTemplate} \n                    selectedItemTemplate={selectedDataTemplate}\n                    disabled={this.props.disabled}\n                />\n            </div>\n        );\n    }\n    \n}\n\nexport default PSetDropdown;","import React, {useState, useEffect, useContext} from 'react';\nimport {InputSwitch} from 'primereact/inputswitch';\nimport PSetDropdown from '../../Shared/PSetDropdown/PSetDropdown';\nimport {SearchReqContext} from '../PSetSearch';\nimport {Dialog} from 'primereact/dialog';\nimport {Button} from 'primereact/button';\nimport './PSetFilter.css';\n\nlet formDataInit = {};\nlet formData = {};\nlet drugSensitivityOptions = [];\nlet rnaRefOptions = [];\nlet dnaRefOptions = [];\n\nasync function fetchData(url) {\n    const response = await fetch(url);\n    const json = await response.json();\n    return(json);\n}\n\nconst PSetFilter = () => {\n    \n    const context = useContext(SearchReqContext);\n\n    const [dataType, setDataType] = useState([]);\n    const [dataset, setDataset] = useState([]);\n    const [drugSensitivity, setDrugSensitivity] = useState([]);\n    const [genome, setGenome] = useState([]);\n    const [rnaTool, setRNATool] = useState([]);\n    const [rnaRef, setRNARef] = useState([]);\n    const [dnaTool, setDNATool] = useState([]);\n    const [dnaRef, setDNARef] = useState([]);\n\n    const [disableDSOptions, setdisableDSOptions] = useState(true);\n    const [disableRNAToolRef, setdisableRNAToolRef] = useState(false);\n    //const [disableDNAToolRef, setdisableDNAToolRef] = useState(false);\n    const [datasetDialogVisible, setDatasetDialogVisible] = useState(false);\n\n    const getParameters = () => {\n        let parameters = {\n            dataType, \n            dataset, \n            drugSensitivity, \n            genome, \n            rnaTool, \n            rnaRef, \n            dnaTool, \n            dnaRef\n        };\n        return parameters;\n    }\n    \n    useEffect(() => {\n        const initialize = async () => {\n            const formDataset = await fetchData('/api/formData');\n            formDataInit = formDataset[0];\n            formData = formDataset[0];\n            rnaRefOptions = formData.rnaRef;\n            dnaRefOptions = formData.dnaRef;\n            setDataType(formData.dataType[0])\n        }\n        initialize();\n    }, []);\n\n    useEffect(() => {\n        if(genome.length === 0){\n            //dnaRefOptions = formData.dnaRef;\n            rnaRefOptions = formData.rnaRef;\n        }else{\n            //let dnaRefs = dnaRef;\n            let rnaRefs = rnaRef;\n            \n            if(Array.isArray(genome)){\n                let genomeName = genome.map((genome) => {return(genome.name)});\n                //dnaRefs = dnaRef.filter((ref) => {return(genomeName.includes(ref.genome) && ref)});\n                rnaRefs = rnaRef.filter((ref) => {return(genomeName.includes(ref.genome) && ref)});\n                //dnaRefOptions = formData.dnaRef.filter((ref) => {return(genomeName.includes(ref.genome) && ref)});\n                rnaRefOptions = formData.rnaRef.filter((ref) => {return(genomeName.includes(ref.genome) && ref)});\n            }else{\n                if(Array.isArray(rnaRefs)){\n                    //dnaRefs = dnaRef.filter((ref) => {return(genome.name === ref.genome && ref)});\n                    rnaRefs = rnaRef.filter((ref) => {return(genome.name === ref.genome && ref)});\n                }\n                //dnaRefOptions = formData.dnaRef.filter((ref) => {return(genome.name === ref.genome && ref)});\n                rnaRefOptions = formData.rnaRef.filter((ref) => {return(genome.name === ref.genome && ref)});\n            }\n            \n            //setDNARef(dnaRefs);\n            setRNARef(rnaRefs);\n        }  \n        const parameters = getParameters();\n        context.setParameters(parameters);\n    }, [genome])\n\n    useEffect(() => {\n        if(context.isRequest){\n            // disable the drug sensitivity options if no dataset is selected.\n            if(typeof dataset === 'undefined'){\n                drugSensitivityOptions = []\n                setdisableDSOptions(true)\n            }else{\n                drugSensitivityOptions = dataset.versions\n                let dsCopy = []\n                for(let i = 0; i < drugSensitivity.length; i++){\n                    if(drugSensitivityOptions.some(el => el.label === drugSensitivity[i].label)){\n                        console.log('found')\n                        dsCopy.push(drugSensitivity[i])\n                    }\n                }\n                setDrugSensitivity(dsCopy[0])\n                setdisableDSOptions(false)\n            }\n\n            // if CTRPv2 is selected, then pop up to ask the user if they want to include CCLE data\n            if(dataset.name === 'CTRPv2'){\n                setDatasetDialogVisible(true)\n            }else if(dataset.name === 'FIMM'){\n                setRNATool([])\n                setRNARef([])\n                setdisableRNAToolRef(true)\n            }else{\n                setdisableRNAToolRef(false)\n            }\n\n        }else{\n            // enable the drug sensitivity options only if at least one dataset is selected.\n            if(dataset.length){\n                setdisableDSOptions(false)\n            }else{\n                setdisableDSOptions(true)\n            }\n\n            drugSensitivityOptions = []\n            for(let i = 0; i < dataset.length; i++){\n                for(let k = 0; k < dataset[i].versions.length; k++){\n                    if(!drugSensitivityOptions.some(el => el.label === dataset[i].versions[k].label)){\n                        drugSensitivityOptions.push(dataset[i].versions[k])\n                    }\n                }\n            }\n            \n            if(Array.isArray(drugSensitivity)){\n                let dsCopy = []\n                for(let i = 0; i < drugSensitivity.length; i++){\n                    if(drugSensitivityOptions.some(el => el.label === drugSensitivity[i].label)){\n                        dsCopy.push(drugSensitivity[i])\n                    }\n                }\n                setDrugSensitivity(dsCopy)\n            }\n        }\n        \n        const parameters = getParameters();\n        context.setParameters(parameters);\n    }, [dataset])\n\n    useEffect(() => {\n        const parameters = getParameters();\n        context.setParameters(parameters);\n    }, [dataType, drugSensitivity, rnaTool, rnaRef, dnaTool, dnaRef]);\n\n    const setRequestView = (isRequest) => {\n        let fData = JSON.parse(JSON.stringify(formData));\n        if(isRequest){\n            if(dataset.length){\n                fData.dataset = dataset;\n                setDataset(dataset[0]);\n            }\n            if(genome.length){\n                fData.genome = genome;\n                setGenome(genome[0]);\n            }\n            if(rnaTool.length){\n                fData.rnaTool = JSON.parse(JSON.stringify(rnaTool));\n                let tools = JSON.parse(JSON.stringify(rnaTool));\n                while(tools.length > 2){\n                    tools.shift()\n                }\n                setRNATool(tools)\n            }\n            if(rnaRef.length){\n                fData.rnaRef = rnaRef;\n                setRNARef(rnaRef[0]);\n            }\n        }else{\n            if(fData.dataset.length < formDataInit.dataset.length){\n                setDataset(fData.dataset);\n            }else if(!Array.isArray(dataset)){\n                let val  = dataset;\n                setDataset([val]);\n            }\n            if(fData.genome.length < formDataInit.genome.length){\n                setGenome(fData.genome);\n            }else if(!Array.isArray(genome)){\n                let val = genome;\n                setGenome([val]);\n            }\n            if(fData.rnaRef.length < formDataInit.rnaRef.length){\n                setRNARef(fData.rnaRef);\n            }else if(!Array.isArray(rnaRef)){\n                let val  = rnaRef;\n                setRNARef([val]);\n            }\n            fData = formDataInit;\n            setdisableRNAToolRef(false)\n        }\n        formData = fData;\n        context.setIsRequest(isRequest);\n    }\n\n    const onDatasetDialogYes = (event) => {\n        event.preventDefault()\n        setDatasetDialogVisible(false)\n    }\n\n    const onDatasetDialogNo = (event) => {\n        event.preventDefault()\n        setdisableRNAToolRef(true)\n        setRNATool([])\n        setRNARef([])\n        setDatasetDialogVisible(false)\n    }\n\n    const footer = (\n        <div>\n            <Button label='Yes' onClick={onDatasetDialogYes}/>\n            <Button label='No' onClick={onDatasetDialogNo}/>\n        </div> \n    )\n    \n    return(\n        <React.Fragment>\n            <Dialog header=\"CTRP Dataset Selected\" footer={footer} visible={datasetDialogVisible} onHide={() => setDatasetDialogVisible(false)} style={{minWidth: '30vw', minHeight: '20vh'}} >\n                <h3>CTRP Dataset was selected</h3>\n                <div>\n                    Would you like to include CCLE RNA sequence data?\n                </div>    \n            </Dialog>\n            <div className='pSetFilterContainer'>\n                <div className='pSetFilter'>\n                    <h2>PSet Parameters</h2>\n                    <div className='filterSet'>\n                        <label className='bold'>Request PSet: </label> \n                        <InputSwitch checked={context.isRequest} tooltip=\"Turn this on to request a PSet.\" \n                            onChange={(e) => setRequestView(e.value)} />\n                    </div>\n\n                    <PSetDropdown id='dataType' isHidden={false} parameterName='Data Type:' selectOne={true}\n                        parameterOptions={formData.dataType} selectedParameter={context.parameters.dataType} \n                        handleUpdateSelection={(e) => setDataType(e.value)} />\n\n                    <PSetDropdown id='dataset' isHidden={false} parameterName='Dataset:' selectOne={context.isRequest} \n                        parameterOptions={formData.dataset} selectedParameter={context.parameters.dataset} \n                        handleUpdateSelection={(e) => setDataset(e.value)}/>\n                    \n                    <PSetDropdown id='drugSensitivity' isHidden={false} parameterName='Drug Sensitivity:' selectOne={context.isRequest} \n                        disabled={disableDSOptions}\n                        parameterOptions={drugSensitivityOptions} selectedParameter={context.parameters.drugSensitivity} handleUpdateSelection={(e) => setDrugSensitivity(e.value)} />\n                    \n                    <PSetDropdown id='genome' isHidden={false} parameterName='Genome:' selectOne={context.isRequest} \n                        parameterOptions={formData.genome} selectedParameter={context.parameters.genome} \n                        handleUpdateSelection={(e) => setGenome(e.value)} />\n                    \n                    <PSetDropdown id='rnaTool' disabled={disableRNAToolRef} parameterName='RNA Tool:' \n                        parameterOptions={formData.rnaTool} selectedParameter={context.parameters.rnaTool} \n                        handleUpdateSelection={(e) => {\n                            if(context.isRequest && e.value.length > 2){\n                                while(e.value.length > 2){\n                                    e.value.shift()\n                                }\n                            }\n                            setRNATool(e.value)\n                        }} />\n\n                    <PSetDropdown id='rnaRef' disabled={disableRNAToolRef} parameterName='RNA Ref:' selectOne={context.isRequest} \n                        parameterOptions={rnaRefOptions} selectedParameter={context.parameters.rnaRef} \n                        handleUpdateSelection={(e) => setRNARef(e.value)} />\n                    \n                    <PSetDropdown id='dnaTool' disabled={true} parameterName='DNA Tool:' \n                        parameterOptions={formData.dnaTool} selectedParameter={context.parameters.dnaTool} \n                        handleUpdateSelection={(e) => setDNATool(e.value)} />\n                    \n                    <PSetDropdown id='dnaRef' disabled={true} parameterName='DNA Ref:' \n                        parameterOptions={dnaRefOptions} selectedParameter={context.parameters.dnaRef} \n                        handleUpdateSelection={(e) => setDNARef(e.value)} />\n                </div>\n            </div>\n        </React.Fragment>\n    );\n}\n\nexport default PSetFilter;","\nexport function queryPSet(api, callback){\n    //console.log(api);\n    fetch(api)  \n        .then(res => res.json())\n        .then(resData => {\n            callback(resData);\n        }   \n    );\n}\n\nexport function saveOrUpdateUserPSets(username, selectedPSets, callback){\n    if(selectedPSets.length){\n        var userPSet = { username: username };\n        var psetId = [];\n        for(let i = 0; i < selectedPSets.length; i++){\n            psetId.push(selectedPSets[i]._id);\n        }\n        userPSet.psetId = psetId;\n\n        fetch('/api/user/pset/add', {\n            method: 'POST',\n            body: JSON.stringify({reqData: userPSet}),\n            headers: {\n                'Content-type': 'application/json'\n            }\n        })\n            .then(res => res.json())\n            .then(resData => callback(1, resData))\n            .catch(err => callback(0, err));\n\n    }\n}\n\nexport function requestPSet(data, callback){\n    console.log(data);\n    fetch('/api/pset/request', {\n        method: 'POST',\n        body: JSON.stringify({\n            reqData: data\n        }),\n        headers: {\n            'Content-type': 'application/json'\n        }\n    })\n        .then(res => res.json())\n        .then(resData => callback(1, resData))\n        .catch(err => callback(0, err));\n}\n\nexport function downloadPSet(psetID){\n    console.log('downloadOnePSet: ' + psetID);\n    fetch('/api/pset/download', {\n        method: 'POST',\n        body: JSON.stringify({\n            psetID: psetID\n        }),\n        headers: {\n            'Content-type': 'application/json'\n        }\n    })\n        .then(res => res.json())\n        .catch(err => console.log(err));\n}","import React, {useState, useEffect, useContext} from 'react';\nimport {DataTable} from 'primereact/datatable';\nimport {Column} from 'primereact/column';\nimport { Link } from 'react-router-dom';\nimport * as API from '../Shared/APICalls';\nimport {AuthContext} from '../../context/auth';\n\nconst PSetTable = (props) => {\n\n    const auth = useContext(AuthContext);\n    \n    const [state, setState] = useState({\n        rows: 10,\n        first: 0,\n        start: 0,\n        end: 10,\n        totalRecords: 0,\n        loading: true\n    })\n\n    useEffect(()=>{\n        setState({...state, loading: false})\n    }, []);\n\n    const downloadOnePSet = (id, link) => (event) => {\n        event.preventDefault();\n        console.log('downloadOnePSet');\n        API.downloadPSet(id);\n        const anchor = document.createElement('a');\n        anchor.setAttribute('download', null);\n        anchor.style.display = 'none';\n        anchor.setAttribute('href', link);\n        document.body.appendChild(anchor);\n        anchor.click();\n        document.body.removeChild(anchor);\n    }\n\n    const toolsRefTemplate = (rowData, column) => {\n        let output ='';\n        if(rowData[column.field]){\n            output = rowData[column.field].map(item => <div key={item.name}>{item.label}</div>);\n        }\n        return(\n            <div>{output}</div>\n        );\n    }\n\n    const nameColumnTemplate = (rowData, column) => {\n        let route = '/' + rowData.doi;\n        return(\n            <Link to={route} target=\"_blank\">{rowData.name}</Link>\n        );\n    }\n\n    const downloadTemplate = (rowData, column) => {\n        let link = 'Not Available';\n        if(rowData.downloadLink){\n            link = <a id={rowData._id} href='#' onClick={downloadOnePSet(rowData._id, rowData.downloadLink)}>Download</a>\n        }\n        return(\n            link\n        )\n    }\n\n    const updatePSetSelectionEvent = event => {\n        props.updatePSetSelection(event.value);\n    }\n\n    return(\n        <DataTable \n            value={props.allData} \n            selection={props.selectedPSets} onSelectionChange={updatePSetSelectionEvent} \n            paginator={true} rows={state.rows} \n            scrollable={true} resizableColumns={true} columnResizeMode=\"fit\"\n        >\n            {auth.authenticated && <Column selectionMode=\"multiple\" style={{width: '2em'}} />}\n            <Column className='textField' field='name' header='Name' style={{width:'5em'}} body={nameColumnTemplate} sortable={true} />\n            <Column className='textField' field='dataset.name' header='Dataset' style={{width:'5em'}} sortable={true} />\n            <Column className='textField' field='dataset.versionInfo.version' header='Drug Sensitivity' style={{width:'7em'}} sortable={true} />\n            <Column field='rnaTool' body={toolsRefTemplate} style={{width:'6em'}} header='RNA Tool' sortable={true}  />\n            {/* <Column field='dnaTool' body={toolsRefTemplate} style={{width:'8em'}} header='DNA Tool' sortable={true} /> */}\n            <Column field='rnaRef' body={toolsRefTemplate} style={{width:'10em'}} header='RNA Ref' sortable={true} />\n            {/* <Column field='dnaRef' body={toolsRefTemplate} style={{width:'15em'}} header='DNA Ref' sortable={true} /> */}\n            <Column field='downloadLink' body={downloadTemplate} style={{width:'3.5em'}} header='Download' />\n        </DataTable>\n    );\n\n}\n\nexport default PSetTable;","import React from 'react';\nimport {Button} from 'primereact/button';\nimport {AuthContext} from '../../../context/auth';\nimport * as APICalls from '../APICalls';\n\nclass SavePSetButton extends React.Component{\n    constructor(){\n        super();\n        this.saveSelectedPSets = this.saveSelectedPSets.bind(this);\n    }\n\n    static contextType = AuthContext;\n\n    saveSelectedPSets = event => {\n        event.preventDefault();\n        if(this.context.authenticated){\n            APICalls.saveOrUpdateUserPSets(this.context.username, this.props.selectedPSets, (status, data) => {this.props.onSaveComplete(status, data)});\n        }\n    }\n\n    render(){\n        return(\n            this.context.authenticated ? <Button label='Save' onClick={this.saveSelectedPSets} disabled={this.props.disabled}/> : '*Login or register to save existing PSets to your profile.'\n        );\n    }\n}\n\nexport default SavePSetButton;\n","// Helper functions used for PSet API requests.\n\nexport function getFilterSet(data){\n    var filterset = {}\n    filterset.datatype = toFilterArray(data.dataType);\n    filterset.datasetName = toFilterArray(data.dataset);\n    filterset.genome = toFilterArray(data.genome);\n    filterset.rnaTool = toFilterArray(data.rnaTool);\n    filterset.dnaTool = toFilterArray(data.dnaTool);\n    filterset.rnaRef = toFilterArray(data.rnaRef);\n    filterset.dnaRef = toFilterArray(data.dnaRef);\n    filterset.drugSensitivity = toFilterArray(data.drugSensitivity, true);\n    return(filterset);\n}\n\nexport function buildAPIStr(filterSet){\n    let apiStr = '/api/pset?status=complete&';\n    let apiFragments = [];\n    apiFragments.push(buildAPIStrFragment('dtp', filterSet.datatype));\n    apiFragments.push(buildAPIStrFragment('dsn', filterSet.datasetName));\n    apiFragments.push(buildAPIStrFragment('gnm', filterSet.genome));\n    apiFragments.push(buildAPIStrFragment('rnat', filterSet.rnaTool));\n    apiFragments.push(buildAPIStrFragment('dnat', filterSet.dnaTool));\n    apiFragments.push(buildAPIStrFragment('rnar', filterSet.rnaRef));\n    apiFragments.push(buildAPIStrFragment('dnar', filterSet.dnaRef));\n    apiFragments.push(buildAPIStrFragment('dst', filterSet.drugSensitivity));\n    for(let i = 0; i < apiFragments.length; i++){\n        if(apiFragments[i].length > 0){\n            apiStr += apiFragments[i] + '&';\n        }\n    }\n    apiStr = apiStr.replace(/&$/, '');\n    return(apiStr);\n}\n\nexport function isNoneSelected(filterset){\n    if(!filterset.datatype.length && \n        !filterset.datasetName.length && \n        !filterset.genome.length && \n        !filterset.rnaTool.length &&\n        !filterset.dnaTool.length &&\n        !filterset.rnaRef.length &&\n        !filterset.dnaRef.length &&\n        !filterset.drugSensitivity.length){\n        return(true);\n    }\n    return(false);\n}\n\nexport function isReadyToSubmit(request){\n    if(!isSelected(request.dataType)){return(false)}\n\n    if(!isSelected(request.genome)){return(false)}\n\n    if(!hasName(request.name)){return(false)}\n\n    if(!isValidEmail(request.email)){return(false)}\n    \n    if(!isSelected(request.dataset)){\n        return(false)\n    }else if(request.dataset.name === 'CTRPv2' || request.dataset.name === 'FIMM'){\n        return(true)\n    }\n    \n    if(!isSelected(request.rnaRef)){return(false)}\n\n    if(!isSelected(request.rnaTool)){return(false)}\n\n    // if(!isSelected(request.dnaRef)){\n    //     return(true);\n    // }\n    // if(!isSelected(request.dnaTool)){\n    //     return(true);\n    // }\n\n    if(!isSelected(request.drugSensitivity)){\n        return(false);\n    }\n\n    return(true);\n}\n\nexport function isSelected(reqParam){\n    if(typeof reqParam === 'undefined' || reqParam === null){\n        return(false);\n    }\n    if(Array.isArray(reqParam) && !reqParam.length){\n        return(false);\n    }\n    return(true);\n}\n\nexport function messageAfterRequest(status, data, initialize=null, msgComponent){\n    if(initialize){\n        initialize();\n    }\n    if(status){\n        msgComponent.show({severity: 'success', summary: data.summary, detail: data.message, sticky: true});\n    }else{\n        msgComponent.show({severity: 'error', summary: 'An error occured', detail: data.toString(), sticky: true});\n    } \n}\n\nfunction hasName(name){\n    if(typeof name === 'undefined' || name === null){\n        return(false);\n    }\n    if(name.length === 0){\n        return(false);\n    }\n    return(true);\n}\n\nfunction isValidEmail(email){\n    const regex = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/;\n    if(typeof email === 'undefined' || email === null){\n        return(false);\n    }\n    if(email.length === 0){\n        return(false);\n    }\n    if(!regex.test(email)){\n        return(false);\n    }\n    return(true);\n}\n\nfunction toFilterArray(selectedValues, isDatasetVersion = false){\n    var filterArray = [];\n    if(typeof selectedValues === 'undefined' || selectedValues === null){\n        return(filterArray);\n    }\n    if(Object.keys(selectedValues).length === 0 && selectedValues.constructor === Object){\n        return(filterArray);\n    }\n    if(Array.isArray(selectedValues)){\n        if(isDatasetVersion){\n            for(let i = 0; i < selectedValues.length; i++){   \n                filterArray.push(selectedValues[i].version);\n            }\n        }else{\n            for(let i = 0; i < selectedValues.length; i++){   \n                filterArray.push(selectedValues[i].name);\n            }\n        }\n        return(filterArray);\n    } \n    if(isDatasetVersion){\n        filterArray.push(selectedValues.version);\n    }else{\n        filterArray.push(selectedValues.name);\n    }\n    return(filterArray);\n}\n\nfunction buildAPIStrFragment(keyName, filterArray){\n    var apiFragment = '';\n    if(filterArray.length > 0){\n        for(let i = 0; i < filterArray.length; i++){\n            apiFragment += keyName + '=' + filterArray[i]\n            if(i < filterArray.length - 1){\n                apiFragment += '&';\n            }\n        }\n    }   \n    return(apiFragment);\n}\n","import React, {useState, useEffect} from 'react';\nimport './PSetSearch.css';\nimport PSetFilter from './subcomponents/PSetFilter';\nimport PSetTable from '../Shared/PSetTable';\nimport SavePSetButton from '../Shared/Buttons/SavePSetButton';\nimport {usePromiseTracker} from \"react-promise-tracker\";\nimport {trackPromise} from 'react-promise-tracker';\nimport Loader from 'react-loader-spinner';\nimport {Button} from 'primereact/button';\nimport {InputText} from 'primereact/inputtext';\nimport {Messages} from 'primereact/messages';\nimport * as APIHelper from '../Shared/PSetAPIHelper';\n\nexport const SearchReqContext = React.createContext();\n\nasync function fetchData(url) {\n    const response = await fetch(url);\n    const json = await response.json();\n    return(json);\n}\n\nconst PSetSearch = (props) => {\n    const [allData, setAllData] = useState([]);\n    const [searchAll, setSearchAll] = useState(true);\n    const [selectedPSets, setSelectedPSets] = useState([]);\n    const [disableSaveBtn, setDisableSaveBtn] = useState(true);\n    const [isRequest, setIsRequest] = useState(false);\n    const [readyToSubmit, setReadyToSubmit] = useState(true);\n    const [parameters, setParameters] = useState({});\n    \n    const [name, setName] = useState('');\n    const [email, setEmail] = useState('');\n\n    const [ready, setReady] = useState(false)\n\n    useEffect(() => {\n        const initializeView = async () => {\n            const psets = await fetchData('/api/pset?status=complete');\n            setAllData(psets);\n            setSearchAll(true);\n            setReady(true);\n        }\n        initializeView();\n    }, []);\n\n    useEffect(() => {\n        setDisableSaveBtn(APIHelper.isSelected(selectedPSets) ? false : true)\n    }, [selectedPSets]);\n\n    useEffect(() => {   \n        async function update() {\n            let filterset = APIHelper.getFilterSet(parameters);\n            let apiStr = APIHelper.buildAPIStr(filterset);\n            console.log(apiStr);\n            let searchAll = apiStr === '/api/pset' ||  apiStr === '/api/pset?status=complete' ? true : false;\n            const psets = await fetchData(apiStr);\n            setAllData(psets);\n            setSearchAll(searchAll);\n        }\n        update();\n        if(isRequest){\n            let params = {...parameters};\n            params.name = name;\n            params.email = email;\n            setReadyToSubmit(APIHelper.isReadyToSubmit(params));\n        }\n    }, [parameters])\n\n    const showMessage = (status, data) => {\n        let severity = status ? 'success' : 'error';\n        PSetSearch.messages.show({severity: severity, summary: data.summary, detail: data.message, sticky: true});\n        initializeState();\n    }\n\n    const updatePSetSelection = (selected) => {\n        setSelectedPSets(selected);\n    }\n\n    const initializeState = () => {\n        setSelectedPSets([]);\n        setDisableSaveBtn(true);\n    }\n\n    const handleSubmitRequest = async event => {\n        event.preventDefault();\n        let dataset = {name: parameters.dataset.name, label: parameters.dataset.label, versionInfo: parameters.drugSensitivity}\n        let reqData = {...parameters}\n        let dataType = {...parameters.dataType}\n        let rnaRef = {...parameters.rnaRef}\n\n        reqData.dataset = dataset\n        reqData.dataType = [dataType]\n        reqData.rnaRef = (Object.keys(rnaRef).length === 0 && rnaRef.constructor === Object ? [] : [rnaRef])\n        reqData.name = name\n        reqData.email = email\n        delete reqData.drugSensitivity\n        console.log(reqData)\n        \n        const res = await trackPromise(fetch('/api/pset/request', {\n                method: 'POST',\n                body: JSON.stringify({reqData: reqData}),\n                headers: {'Content-type': 'application/json'}\n            }));\n        const resData = await res.json();\n        showMessage(res.ok, resData);\n        initializeState();\n    }\n\n    useEffect(() => {\n        let params = {...parameters};\n        params.name = name;\n        params.email = email;\n        setReadyToSubmit(APIHelper.isReadyToSubmit(params));\n    }, [name, email])\n    \n    const SubmitRequestButton = () => {\n        const {promiseInProgress} = usePromiseTracker();\n        return(\n            promiseInProgress ? \n                <div className='loaderContainer'>\n                    <Loader type=\"ThreeDots\" color=\"#3D405A\" height={100} width={100} />\n                </div>\n                :\n                <Button label='Submit Request' type='submit' disabled={!readyToSubmit} onClick={handleSubmitRequest}/>\n        );\n    }\n        \n    return(\n        <SearchReqContext.Provider value={{ \n                parameters: parameters, \n                setParameters: setParameters, \n                isRequest: isRequest, \n                setIsRequest: setIsRequest\n            }}\n        >\n            <div className='pageContent'>\n                <h2>Search or Request Pharmacogenomic Datasets</h2>\n                <div className='pSetListContainer'>\n                    <PSetFilter />\n                    <div className='pSetTable'>\n                        <Messages ref={(el) => PSetSearch.messages = el} />\n                        <div className='pSetSelectionSummary'>\n                            <div className='summaryPanel'>\n                                <h2>Summary</h2>\n                                <div className='pSetSummaryContainer'>\n                                    <div className='pSetSummaryItem'>\n                                        {\n                                            searchAll ? \n                                            <span><span className='pSetSummaryNum'>{allData.length ? allData.length : 0}</span> <span>dataset(s) available.</span></span>\n                                            :\n                                            <span><span className='pSetSummaryNum'>{allData.length}</span> <span>{allData.length === 1 ? ' match' : ' matches'}</span> found.</span>\n                                        }\n                                    </div>\n                                </div>\n                                <SavePSetButton selectedPSets={selectedPSets} disabled={disableSaveBtn} onSaveComplete={showMessage} />\n                            </div>\n                            {\n                                isRequest &&\n                                <div className='requestFormPanel'>\n                                    <h2>Request PSet</h2>\n                                    <div className='reqFormInput'>\n                                        <label>PSet Name:</label>\n                                            <InputText id='name' className='paramInput' value={name || ''} onChange={(e) => {setName(e.target.value)}} />\n                                    </div>\n                                    <div className='reqFormInput'>\n                                        <label>Email to receive DOI:</label>\n                                            <InputText id='email' className='paramInput' value={email || ''} onChange={(e) => {setEmail(e.target.value)}} />\n                                    </div>\n                                    <div className='reqFormInput'>\n                                        <SubmitRequestButton />\n                                    </div>\n                                </div>\n                            }\n                        </div>\n                        {\n                            isRequest ?\n                            <PSetTable allData={allData} selectedPSets={selectedPSets} updatePSetSelection={updatePSetSelection} scrollHeight='600px'/> \n                            :\n                            ready ?\n                            <PSetTable allData={allData} selectedPSets={selectedPSets} updatePSetSelection={updatePSetSelection} scrollHeight='600px'/> \n                            :\n                            <div className='tableLoaderContainer'>\n                                <Loader type=\"ThreeDots\" color=\"#3D405A\" height={100} width={100} />\n                            </div>\n                        }  \n                    </div>\n                </div>\n            </div>\n        </SearchReqContext.Provider>\n    );\n}\n\nexport default PSetSearch;","import React, {useState, useEffect, useContext} from 'react';\nimport './Dashboard.css';\nimport {usePromiseTracker} from \"react-promise-tracker\";\nimport {trackPromise} from 'react-promise-tracker';\nimport Loader from 'react-loader-spinner';\nimport {Messages} from 'primereact/messages';\nimport {DataTable} from 'primereact/datatable';\nimport {Column} from 'primereact/column';\nimport {AuthContext} from '../../context/auth';\n\nconst Dashboard = (props) => {\n    \n    const auth = useContext(AuthContext);\n    const [data, setData] = useState([]);\n    const [loading, setLoading] = useState(true);\n\n    const { promiseInProgress } = usePromiseTracker();\n\n    const show = (message) => {\n        Dashboard.messages.show(message);\n    }\n\n    const fetchData = async (url) => {\n        const response = await fetch(url);\n        const json = await response.json();\n        setData(json);\n        setLoading(false);\n    }\n\n    const submitRequest = async (id) => {\n        const result = await trackPromise(fetch(\n            '/api/pset/process', \n            { \n                method: 'POST', \n                body: JSON.stringify({id: id}), \n                headers: {'Content-type': 'application/json'} \n            }\n        ));\n        const json = await result.json();\n        return({ok: result.ok, data: json});\n    }\n\n    useEffect(() => {\n        fetchData('/api/pset?status=pending&status=in-process');\n    }, []);\n    \n    const onSubmit = async (event) => {\n        event.preventDefault();\n        console.log(event.target.id);\n        const result = await submitRequest(event.target.id);\n        if(result.ok){\n            show({severity: 'success', summary: result.data.summary, detail: result.data.message, sticky: true});\n        }else{\n            show({severity: 'error', summary: result.data.summary, detail: result.data.message, sticky: true});\n        }\n        await fetchData('/api/pset?status=pending&status=in-process');\n    }\n\n    const dateTimeTemplate = (rowData, column) => {\n        let dateTimeStr = '';\n        if(rowData[column.field]){\n            dateTimeStr = new Date(rowData[column.field]).toLocaleString(undefined, {dateStyle: 'long', timeStyle: 'medium'});\n        }\n        return(<div>{dateTimeStr}</div>)\n    }\n\n    const buttonTemplate = (rowData, column) => {\n        let button = '';\n        if(rowData.status === 'pending'){\n            button = <button id={rowData._id} onClick={onSubmit} className='dashboardBtn' type='button'>Submit</button>\n        }\n        return(<div className='dashBoardBtnContainer'>{button}</div>)\n    }\n\n    return(\n        <div className='pageContent'>\n            <div className='dashboardWrapper'>\n                <h2>PSet Request Status Board</h2>\n                <Messages ref={(el) => Dashboard.messages = el }></Messages>\n                <div className='dashboardSummary'>\n                    <h2>Request Status Summary</h2>\n                    <div className='dashboardSummaryContainer'>\n                        <div className='dashboardSummarySection'>\n                            <span className='number'>{ data.filter(d => d.status === 'pending').length }</span> pending request(s).\n                        </div>\n                        <div className='dashboardSummarySection'>\n                            <span className='number'>{ data.filter(d => d.status === 'in-process').length }</span> request(s) in process.\n                        </div>    \n                    </div>    \n                </div>\n                <div className='dashboardTable'>\n                    {\n                        !loading ?\n                            data.length > 0 ?\n                            <DataTable value={data} paginator={true}  scrollable={true} rows={10} >\n                                <Column className='textField' field='status' header='Status' style={{width:'2em'}} sortable={true} />\n                                <Column className='textField' field='name' header='Name' style={{width:'5em'}} sortable={true} />\n                                <Column className='textField' field='dateSubmitted' header='Submitted Date' body={dateTimeTemplate} style={{width:'4em'}} sortable={true} />\n                                <Column className='textField' field='dateProcessed' header='Process Start Date' body={dateTimeTemplate} style={{width:'4em'}} sortable={true} />\n                                { auth.isAdmin && <Column body={buttonTemplate} style={{width:'1.5em'}}/> }\n                            </DataTable>\n                            :\n                            <h3>There are no pending or in-process requests.</h3>\n                        :   \n                        <div className='dashboardTableLoaderContainer'>\n                            <Loader type=\"ThreeDots\" color=\"#3D405A\" height={100} width={100} />\n                        </div>\n                    } \n                    {\n                        promiseInProgress && \n                        <div className='dashboardTableOverlay'>\n                            <div className='dashboardLoaderContainer'>\n                                <Loader type=\"ThreeDots\" color=\"#3D405A\" height={100} width={100} />\n                            </div>\n                        </div>   \n                    }\n                </div> \n            </div>   \n        </div>  \n    );\n}\n\nexport default Dashboard;","import React from 'react';\n\nimport Plotly from \"plotly.js-basic-dist\";\nimport createPlotlyComponent from \"react-plotly.js/factory\";\nconst Plot = createPlotlyComponent(Plotly);\n\nclass DownloadChart extends React.Component{\n    render() {\n        let value = this.props.data.value;\n        let name = this.props.data.name;\n        \n        return (\n          <Plot\n            data={[\n                {\n                    type: 'bar', \n                    x: value, \n                    y: name, \n                    orientation: 'h', \n                    marker: {color: '#3D405A'}\n                },\n            ]}\n            layout={ {\n                autosize: true,\n                title: this.props.title, \n                xaxis: {\n                    title: {text: 'Number of Downloads', font: {size: 14, color: '#3D405A'}}\n                },\n                yaxis: {\n                    autorange: 'reversed',\n                }, \n                titlefont: {size: 18, color: '#3D405A'}, \n                font:{color: '#3D405A'}\n            } }\n            style = {{width: \"100%\"}}\n            useResizeHandler = {true}\n          />\n        );\n    }\n}\n\nexport default DownloadChart;","import React from 'react';\nimport './Stats.css';\nimport {Messages} from 'primereact/messages';\nimport PSetTable from '../Shared/PSetTable';\nimport SavePSetButton from '../Shared/Buttons/SavePSetButton';\nimport * as APICalls from '../Shared/APICalls';\nimport * as APIHelper from '../Shared/PSetAPIHelper';\nimport {AuthContext} from '../../context/auth';\nimport DownloadChart from './DownloadChart';\nimport Loader from 'react-loader-spinner';\n\nclass Stats extends React.Component{\n    constructor(){\n        super();\n        this.state = {\n            allData: [],\n            chartData: {},\n            selectedPSets: [],\n            disableBtn: true,\n            isReady: false\n        }\n        this.updatePSetSelection = this.updatePSetSelection.bind(this);\n        this.showMessages = this.showMessages.bind(this);\n        this.initializeState = this.initializeState.bind(this);\n    }\n\n    static contextType = AuthContext;\n\n    componentDidMount(){\n        APICalls.queryPSet('/api/pset/sort', (resData) => {\n            const data = [];\n            const name = [];\n            const value = [];\n            for(let i = 0; i < resData.length; i++){\n                data.push({name: resData[i].name, value: resData[i].download});\n                name.push(resData[i].name);\n                value.push(resData[i].download);\n                if(i >= 9){\n                    break;\n                }\n            }\n            this.setState({\n                allData: resData,\n                chartData: {data: data, name: name, value: value},\n                isReady: true\n            });\n        });\n    }\n\n    updatePSetSelection(selected){\n        this.setState({selectedPSets: selected}, () => {\n            if(APIHelper.isSelected(this.state.selectedPSets)){\n                this.setState({disableBtn: false});\n            }else{\n                this.setState({disableBtn: true});\n            }\n        });\n    }\n\n    showMessages(status, data){\n        APIHelper.messageAfterRequest(status, data, this.initializeState, this.messages);\n        APICalls.queryPSet('/api/pset/sort', (resData) => {\n            this.setState({\n                allData: resData\n            });\n        });\n    }\n\n    initializeState(){\n        this.setState({\n            selectedPSets: [],\n            disableBtn: true\n        });\n    }\n    \n    render(){\n        return(\n            <div className='pageContent'>\n                <h2>PSet Usage and Downloads</h2>\n                <div className='statContainer'>\n                    {\n                        this.state.isReady ?\n                        <React.Fragment>\n                            <div className='container rankingTable'>\n                                <h3>Download Ranking</h3>\n                                <Messages ref={(el) => this.messages = el} />\n                                <PSetTable allData={this.state.allData} selectedPSets={this.state.selectedPSets} updatePSetSelection={this.updatePSetSelection} showDownload={true} scrollHeight='340px'/>\n                                <div className='rankingTableFooter'>\n                                    {/* <DownloadPSetButton selectedPSets={this.state.selectedPSets} disabled={this.state.disableBtn} onDownloadComplete={this.showMessages}/> */}\n                                    <SavePSetButton selectedPSets={this.state.selectedPSets} disabled={this.state.disableBtn} onSaveComplete={this.showMessages} />\n                                </div>\n                            </div>\n                            <div className='container downloadHistogram'>\n                                {this.state.isReady && <DownloadChart data={this.state.chartData} title='Top 10 Most Popular PSets' />}\n                            </div>\n                        </React.Fragment>\n                        :\n                        <div className='componentLoaderContainer'>\n                            <Loader type=\"ThreeDots\" color=\"#3D405A\" height={100} width={100} />\n                        </div>\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Stats;","import React from 'react';\n\nconst Overview = () => {\n    return(\n        <div className='documentation'>\n            <h1>Overview</h1>\n\n                <div>\n                    <h3>Introduction</h3>\n                    <p>\n                        <b>ORCESTRA</b> is a new web application that enables users to search, request and manage pharmacogenomic datasets (PSets).\n                        <br />\n                        PSets are generated with an automated pipeline by using a verion controll platform called Pachyderm. Upon completion of the pipeline, a newly generated PSet is uploaded to Zenodo, a data-sharing platform, and is assigned a DOI.\n                        <br />\n                        With Pachyderm's strict version controlling system, coupled with the DOI assignment, ORCESTRA ensures that your experiements with PSets are transparent and easily reproducible.\n                    </p>\n                    <h3>System Overview</h3>  \n                    <p>\n                        The <b>ORCESTRA</b> system consists of three main layers:   \n                    </p>  \n                    <ol>\n                        <li><b>Web application layer</b> which allows users to view and submit PSet requests</li>\n                        <li><b>Data processing layer</b> which utilizes a version control software called Pachyderm to process requested data</li>\n                        <li><b>Data sharing layer</b> which utilizes Zenodo to ensure that the generated dataset is tagged with a DOI</li>\n                    </ol>     \n                    <div className='img-architecture'>\n                        <img src={process.env.PUBLIC_URL + \"/images/documentation/architecture.png\"} alt=''/>\n                    </div>\n                    <div className='bottom-fill'></div>  \n                </div>  \n        </div>    \n    );\n}\n\nexport default Overview","import React from 'react';\n\nconst Search = () => {\n    return(\n        <div className='documentation'>\n            <h1>Search</h1>\n                <div>\n                    <h3>How to search existing PSets</h3>\n                    <p>\n                        Existing PSets can be searched on <a href='/PSetSearch'>Search and Request</a> page.<br />\n                        User can select different pipeline parameters uder PSet Parameters pane. Each selection of parameters triggers a database search. The search result is displayed on the data table as shown in the figure below.\n                    </p> \n                    <div className='img-full'>\n                        <img src={process.env.PUBLIC_URL + \"/images/documentation/search.png\"} alt='' />\n                    </div>  \n                    <h3>How to view metadata of a PSet</h3>\n                    <p>\n                        Metadata of a PSet can be viewed by clicking a dataset name on the search table.<br />\n                        Explore PSet view is displayed as in the figure below where user can view publications associated with the dataset, and command lines used in the pipeline to generate the PSet.\n                    </p> \n                    <div className='img-full'>\n                        <img src={process.env.PUBLIC_URL + \"/images/documentation/explore_pset.png\"} alt='' />\n                    </div>\n                    <div className='bottom-fill'></div> \n                </div>      \n        </div>    \n    );\n}\n\nexport default Search","import React from 'react';\n\nconst Request = () => {\n    return(\n        <div className='documentation'>\n            <h1>Request</h1> \n                <div>\n                    <h3>How to request a PSet</h3>\n                    <p>\n                        To request a PSet, turn on the Request mode on <a href='/PSetSearch'>Search and Request</a> view with the toggle button on top of the PSet Parameters pane. In the requets mode, two text fields to enter the PSet name and email address to receive pipeline completion notification will be displayed.<br />\n                        Once all the information is filled out, including the PSet name and email address, the Submit Request button becomes active.<br />\n                        PSet request is submitted upon clicking the Submit button.\n                    </p> \n                    <div className='img-full'>\n                        <img src={process.env.PUBLIC_URL + \"/images/documentation/request.png\"} alt='' />\n                    </div>  \n                    <h3>How to check status of your request</h3>\n                    <p>\n                        Status of your pipeline request can be viewed at <a href='/Dashboard'>Request Status</a> view.<br /> \n                        Status of your request can either be \"pending\" or \"in-process\". Pending requests are the ones that have been successfully submitted, and will be processed once the Pachyderm cluster is online. In-process requests have been successfully submitted, and the pipeline execution has been started.\n                    </p> \n                    <div className='img-full'>\n                        <img src={process.env.PUBLIC_URL + \"/images/documentation/request_status.png\"} alt='' />\n                    </div> \n                    <div className='bottom-fill'></div>\n                </div>\n        </div>    \n    );\n}\n\nexport default Request","import React from 'react';\n\nconst UserProfile = () => {\n    return(\n        <div className='documentation'>\n            <h2>User Profile and Usage Statistics</h2>\n            <div>\n                <h3>What you can do with your profile</h3>\n                <p>\n                    <b>ORCESTRA</b> comes with user account feature which allows registred users to:\n                    <ul>\n                        <li>Save existing PSets as \"favorites\".</li>\n                        <li>Keep track of the user's PSet reguqest status.</li>\n                    </ul>\n                    To register for the user account, simply click on the \"Login/Register\" button on navigation \n                    bar, and enter your email address and password.\n                </p>   \n            </div>\n            <div>\n                <h3>Usage Statistics</h3>\n                <p>\n                    <b>ORCESTRA</b>'s usage metrics can be viewed at <a href='http://orcestra.ca/Stats'>Statistics</a> page.<br />\n                    <b>ORCESTRA</b> currently provides the download ranking of the existing PSets.\n                </p>   \n            </div>\n        </div>    \n    );\n}\n\nexport default UserProfile","import React, {useState, useEffect} from 'react';\nimport {ScrollPanel} from 'primereact/scrollpanel';\n\nconst AvailablePSets = () => {\n    \n    const [data, setData] = useState([])\n\n    useEffect(() => {\n        const getData = async () => {\n            const res = await fetch('/api/psets/available')\n            const data = await res.json()\n            setData(JSON.stringify(data, null, 2))\n        }\n        getData()\n    }, [])\n    \n    return(\n        <div className='documentation'>\n            <h2>List of Available PSets</h2>\n            <p>\n                This RESTful API call restrieves a list of available PSets in the database:<br />\n                <code className='code'>curl http://orcestra.ca/api/psets/available</code><br />\n                Current result of the successful API call is as follows:<br />\n            </p>\n            <ScrollPanel className='documentation-scroll'>\n                <div>\n                    <pre>\n                        {data}\n                    </pre>    \n                </div>\n            </ScrollPanel>\n        </div>    \n    );\n}\n\nexport default AvailablePSets","import React, {useState, useEffect} from 'react';\nimport {ScrollPanel} from 'primereact/scrollpanel';\n\nconst PSetMetadata = () => {\n    const [data, setData] = useState([])\n\n    useEffect(() => {\n        const getData = async () => {\n            const res = await fetch('/api/pset/10.5281/zenodo.3747051')\n            const data = await res.json()\n            setData(JSON.stringify(data, null, 2))\n        }\n        getData()\n    }, [])\n    \n    return(\n        <div className='documentation'>\n            <h2>Single PSet</h2>\n            <p>\n                This RESTful API call restrieves a PSet associated with specified DOI:<br />\n                <code className='code'>curl http://orcestra.ca/api/pset/[ DOI ]</code><br />\n                Example:<br />\n                <code className='code'>curl http://orcestra.ca/api/pset/10.5281/zenodo.3747051</code><br />\n                Current result of the successful API call is as follows:<br />\n            </p>\n            <ScrollPanel className='documentation-scroll'>\n            <div>\n                <pre>\n                    {data}\n                </pre>    \n            </div>\n            </ScrollPanel>\n        </div>    \n    );\n}\n\nexport default PSetMetadata","import React, {useState, useEffect} from 'react';\nimport {ScrollPanel} from 'primereact/scrollpanel';\n\nconst StatisticsAPI = () => {\n    const [data, setData] = useState([])\n\n    useEffect(() => {\n        const getData = async () => {\n            const res = await fetch('/api/psets/statistics/5')\n            const data = await res.json()\n            setData(JSON.stringify(data, null, 2))\n        }\n        getData()\n    }, [])\n    \n    return(\n        <div className='documentation'>\n            <h2>Statistics</h2>\n            <p>\n                This RESTful API call restrieves a list of PSets ordered by the number of downloads:<br />\n                <code className='code'>curl http://orcestra.ca/api/psets/statistics/[ number of psets to be returned ]</code><br />\n                Example:<br />\n                <code className='code'>curl http://orcestra.ca/api/psets/statistics/5</code><br />\n                Current result of the successful API call is as follows:<br />\n            </p>\n            <ScrollPanel className='documentation-scroll'>\n            <div>\n                <pre>\n                    {data}\n                </pre>    \n            </div>\n            </ScrollPanel>\n        </div>    \n    );\n}\n\nexport default StatisticsAPI","import React, { useState } from 'react';\nimport './Documentation.css';\n\nimport Overview from './DocFunctionality/Overview';\nimport Search from './DocFunctionality/Search';\nimport Request from './DocFunctionality/Request';\nimport UserProfile from './DocFunctionality/UserProfile';\nimport AvailablePSets from './DocAPI/AvailablePSets';\nimport PSetMetadata from './DocAPI/PSetMetadata';\nimport StatisticsAPI from './DocAPI/StatisticsAPI';\n\nconst Documentation = (props) => {\n    \n    const [display, setDisplay] = useState('overview');\n\n    return(\n        <div className='pageContent'>\n            <div className='documentationContent'>\n                <nav className='documentationNav'>\n                    <h2>Functionality</h2>\n                    <ul>\n                        <li className={display === 'overview' ? 'selected' : undefined}>\n                            <button type='button' onClick={() => setDisplay('overview')}>Overview</button>\n                        </li>\n                        <li className={display === 'search' ? 'selected' : undefined}>\n                            <button type='button' onClick={() => setDisplay('search')}>Search</button>\n                        </li>    \n                        <li className={display === 'request' ? 'selected' : undefined}>\n                            <button type='button' onClick={() => setDisplay('request')}>Request</button>\n                        </li>\n                        <li className={display === 'userProfile' ? 'selected' : undefined}>\n                            <button type='button' onClick={() => setDisplay('userProfile')}>Profile/Statistics</button>\n                        </li>\n                    </ul> \n                    <h2>API</h2>\n                    <ul>\n                        <li className={display === 'api-psets-available' ? 'selected' : undefined}>\n                            <button type='button' onClick={() => setDisplay('api-psets-available')}>Available PSets</button>\n                        </li>\n                        <li className={display === 'api-pset-single' ? 'selected' : undefined}>\n                            <button type='button' onClick={() => setDisplay('api-pset-single')} >Single PSet</button>\n                        </li>\n                        <li className={display === 'api-statistics' ? 'selected' : undefined}>\n                            <button type='button' onClick={() => setDisplay('api-statistics')}>Statistics</button>\n                        </li>    \n                    </ul>\n                </nav>\n                {display === 'overview' && <Overview /> }\n                {display === 'search' && <Search /> }\n                {display === 'request' && <Request /> }\n                {display === 'userProfile' && <UserProfile /> }\n                {display === 'api-psets-available' && <AvailablePSets /> }\n                {display === 'api-pset-single' && <PSetMetadata /> }\n                {display === 'api-statistics' && <StatisticsAPI /> }\n            </div>\n        </div>\n    );\n}\n\nexport default Documentation;","import React from 'react';\nimport {ScrollPanel} from 'primereact/scrollpanel';\nimport './Tutorial.css';\n\nconst Tutorial = (props) => {\n    return(\n        <React.Fragment>\n            <div className='pageContent'>\n                <div className='tutorial-container'>\n                    <h2>Generating PSet with Your Data</h2>\n                    <ScrollPanel className='tutorial-scroll'>\n                        <div className='tutorial-text'>\n                            If you would like to generate a PSet with your own data, plase submit the data to <b>support@orcestra.ca</b>. <br />\n                            Please ensure your data submission follows the respective format below:<br />\n                            The following are a list of requirements that must be fulfilled in order to successfully generate a PharmacoSet (PSet) object in PharmacoGx:\n                        </div>\n                        <ol className='tutorial-list'>\n                            <li>\n                                <h2>Cell line annotation</h2>\n                                <div className='tutorial-text'>\n                                    Please provide the number of cell lines that will be utilized, along with their respective cell line ID’s (e.g. 184A1, 22RV1).\n                                </div>    \n                            </li> \n                            <li>\n                                <h2>Drug annotation</h2>\n                                <div className='tutorial-text'>\n                                    Please provide the number of drugs that will be utilized, along with their respective  drug ID’s (preferably PubChem) (e.g. lapatinib).\n                                </div> \n                            </li> \n                            <li>\n                                <h2>Tissue annotation</h2>\n                                <div className='tutorial-text'>\n                                    Tissue types for each cell line ID provided (e.g. breast).\n                                </div> \n                            </li> \n                            <li>\n                                <h2>Cell line metadata</h2>\n                                <div className='tutorial-text'>\n                                    Metadata for each cell ID (e.g. transcriptional subtype for each cell id).\n                                </div> \n                            </li>   \n                            <li>\n                                <h2>Drug metadata</h2>\n                                <div className='tutorial-text'>\n                                    Metadata for each drug ID.\n                                </div> \n                            </li>  \n                            <li>\n                                <h2>Processed drug response data</h2>\n                                <div className='tutorial-text'>\n                                    <ol>\n                                        <li>\n                                            <div>\n                                                Sensitivity info (cell line id and drug id for each cell line and drug pair used in sensitivity measurements, minimum and maximum drug dose for each cell line and drug pair, number of concentrations tested for each cell line and drug pair).\n                                            </div>\n                                            <img  src={process.env.PUBLIC_URL + \"/images/tutorial/sensitivity.png\"} alt='' />\n                                        </li> \n                                        <li>\n                                            <div>\n                                                Raw Sensitivity (Drug dose values for each cell line and drug pair, along with their respective viability values).\n                                            </div>\n                                            <h4>Doses</h4>\n                                            <img  src={process.env.PUBLIC_URL + \"/images/tutorial/doses.png\"} alt='' />\n                                            <h4>Viability</h4>\n                                            <img  src={process.env.PUBLIC_URL + \"/images/tutorial/viability.png\"} alt='' />\n                                        </li>\n                                        <li>\n                                            <div>\n                                                Sensitivity Profiles (AAC, IC50, EC50, Einf etc values for each cell line and drug pair)\n                                            </div>\n                                            <img  src={process.env.PUBLIC_URL + \"/images/tutorial/sensitivity_profiles.png\"} alt='' />\n                                        </li>       \n                                    </ol> \n                                    <p>\n                                        Note: Please ensure sensitivity info, profiles, and raw sensitivity are in an organized data frame in R.\n                                    </p>       \n                                </div>\n                            </li> \n                            <li>\n                                <h2>Processed molecular profiles</h2>\n                                <div className='tutorial-text'>\n                                    <ol>\n                                        <li>\n                                            Please provide the processed molecular data you would like to include in the PSet (e.g Kallisto h5 abundance files), along with processing details (e.g. reference genome, transcriptome).\n                                        </li>\n                                        <li>\n                                            Phenotypic (e.g. batch ids) and feature data (e.g. gencode gene id) for each cell line used in the molecular profiles.\n                                        </li>\n                                    </ol>    \n                                </div> \n                            </li> \n                        </ol>\n                    </ScrollPanel>\n                </div>\n            </div>\n        </React.Fragment>\n    )\n}\n\nexport default Tutorial","import React, {useState, useContext, useEffect} from 'react';\nimport './UserInfo.css'\nimport {Button} from 'primereact/button';\nimport {InputText} from 'primereact/inputtext';\nimport {Messages} from 'primereact/messages';\nimport {AuthContext} from '../../../context/auth';\n\nconst UserInfo = (props) => {\n    const auth = useContext(AuthContext);\n    const [show, setShow] = useState(false)\n    const [password1, setPassword1] = useState('')\n    const [password2, setPassword2] = useState('')\n    const [btnResetDisabled, setBtnResetDisabled] = useState(true)\n\n    useEffect(() => {\n        password1.length >= 6 ?  password1 === password2 && setBtnResetDisabled(false) : setBtnResetDisabled(true);\n    }, [password1, password2])\n    \n    const showPwdReset = (event) => {\n        event.preventDefault()\n        setShow(true)\n    }\n\n    const hidePwdReset = (event) => {\n        event.preventDefault()\n        setShow(false)\n    }\n\n    const resetPwd = async (event) => {\n        event.preventDefault()\n        const res = await fetch('/api/user/reset', {\n            method: 'POST',\n            body: JSON.stringify({\n                user: { username: auth.username, password: password1 }   \n            }),\n            headers: { 'Content-type': 'application/json' }\n        })\n        const data = await res.json();\n        if(data.authenticated){\n            console.log('authenticated');\n            auth.setAuthToken(data);\n            setPassword1('')\n            setPassword2('')\n            setShow(false)\n            UserInfo.messages.show({severity: 'success', summary: 'Password changed'});\n        }else{\n            UserInfo.messages.show({severity: 'error', summary: 'Error occurred', detail: 'Password could not be changed'});\n        }\n    }\n\n    return(\n        <div className='userInfoContainer'>\n            <h2>User Information</h2>\n            <Messages ref={(el) => UserInfo.messages = el}></Messages>\n            <div className='userInfo'>Username: {auth.username}</div>\n            {\n                show &&\n                <div>\n                    <div>\n                        <div className='pwdMsg'>Password needs to be at least 6 characters in length</div>\n                        <InputText className='pwdInput' type='password' name='password1' value={password1} onChange={(e) => {setPassword1(e.target.value)}}/>\n                    </div>\n                    <div>\n                        <label>Confirm your password:</label>\n                        <InputText className='pwdInput' type='password' name='password2' value={password2} onChange={(e) => {setPassword2(e.target.value)}}/>\n                    </div> \n                </div> \n            }\n            <div className='userInfoBtn'>\n                {\n                    show ? \n                    <div>\n                        <Button className='pwdReset' label='Reset' onClick={resetPwd} disabled={btnResetDisabled}/>\n                        <Button className='pwdReset' label='Cancel' onClick={hidePwdReset}/>\n                    </div>\n                    :\n                    <Button label='Reset password' onClick={showPwdReset}/>\n                }\n                \n            </div>\n        </div>\n    );\n}\n\nexport default UserInfo;","import React from 'react';\nimport PSetTable from '../../Shared/PSetTable';\nimport {Button} from 'primereact/button';\n// import DownloadPSetButton from '../../Shared/Buttons/DownloadPSetButton';\nimport {Dialog} from 'primereact/dialog';\nimport * as APIHelper from '../../Shared/PSetAPIHelper';\nimport './UserPSet.css';\n\nclass UserPSet extends React.Component{\n    \n    constructor(){\n        super();\n        this.state = {\n            selectedPSets: [],\n            btnDisabled: true,\n            dialogVisible: false,\n            btnYesDislabed: false\n        }\n        this.handleBtnClick = this.handleBtnClick.bind(this);\n        this.handleSelectionChange = this.handleSelectionChange.bind(this);\n        this.onClickYes = this.onClickYes.bind(this);\n        this.onHide = this.onHide.bind(this);\n        this.showMessages = this.showMessages.bind(this);\n    }\n\n    handleSelectionChange(selected){\n        this.setState({selectedPSets: selected}, () => {\n            if(this.state.selectedPSets && this.state.selectedPSets.length > 0){\n                this.setState({btnDisabled: false});\n            }else{\n                this.setState({btnDisabled: true});\n            }\n        });\n    }\n\n    handleBtnClick = event => {\n        this.setState({dialogVisible: true});\n    }\n\n    showMessages(status, data){\n        APIHelper.messageAfterRequest(status, data, null, this.props.messages);\n    }\n\n    onClickYes(){\n        this.setState({\n            btnDisabled: true,\n            btnYesDislabed: true\n        });\n        this.props.handleBtnClick(this.state.selectedPSets, (err)=>{\n            if(!err){\n                this.setState({\n                    selectedPSets: [],\n                    dialogVisible: false,\n                });\n            }else{\n                this.setState({btnDisabled: false});\n            }   \n        });\n    }\n    \n    onHide(){\n        this.setState({\n            dialogVisible: false,\n            btnYesDislabed: false\n        });\n    }\n    \n    render(){\n\n        const psetData = (\n            <React.Fragment>\n                <div>\n                    <PSetTable allData={this.props.pset} selectedPSets={this.state.selectedPSets} updatePSetSelection={this.handleSelectionChange} scrollHeight='350px' pending={this.props.pending}/>\n                </div>\n                <div className='footer'>\n                { !this.props.pending && <Button label={this.props.btnLabel} onClick={this.handleBtnClick} disabled={this.state.btnDisabled} /> } \n                </div>\n            </React.Fragment>\n        );\n\n        const noPSetData = (\n            <p>No data available.</p>\n        );\n\n        const dialogFooter = (\n            <div>\n                <Button label=\"Yes\" onClick={this.onClickYes} disabled={this.state.btnYesDislabed}/>\n                <Button label=\"Cancel\" onClick={this.onHide} />\n            </div>\n        );\n        \n        return(\n            <div className='userPSet'>\n                <h2>{this.props.heading}</h2>\n                <div className='userPSetContent'>\n                    {this.props.pset ? psetData : noPSetData}\n                </div>\n                <div>\n                    <Dialog header={'Removing Pset(s)'} footer={dialogFooter} visible={this.state.dialogVisible} style={{width: '300px'}} modal={true} onHide={this.onHide}>\n                        { 'Are you sure you would like to remove the selected PSet(s) from the saved list?' }\n                    </Dialog>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default UserPSet;","import React from 'react';\nimport './Profile.css';\nimport UserInfo from './subcomponents/UserInfo';\nimport UserPSet from './subcomponents/UserPSet';\nimport {Messages} from 'primereact/messages';\nimport {AuthContext} from '../../context/auth';\nimport * as APIHelper from '../Shared/PSetAPIHelper';\n\nclass Profile extends React.Component{\n\n    constructor(){\n        super();\n        this.state = {\n            username: '',\n            userEmail: '',\n            psetSaved: [],\n            psetInProcess: []\n        }\n        this.removeFromSavedList = this.removeFromSavedList.bind(this);\n        this.cancelPSetRequest = this.cancelPSetRequest.bind(this);\n        this.findPSetByID = this.findPSetByID.bind(this);\n        this.removePSetByID = this.removePSetByID.bind(this);\n    }\n\n    static contextType = AuthContext;\n\n    componentDidMount(){\n        fetch('/api/user/pset/?username=' + this.context.username)  \n            .then(res => res.json())\n            .then(resData => {\n                let complete = [];\n                let pending = [];\n                for(let i = 0; i < resData.length; i++){\n                    if(resData[i].status === 'complete'){\n                        complete.push(resData[i]);\n                    }else{\n                        pending.push(resData[i]);\n                    }\n                }\n                this.setState({\n                    psetSaved: complete,\n                    psetInProcess: pending\n                });\n            });\n    }\n\n    removeFromSavedList = (selectedPSet, callback) => {\n        var psetID = []\n        for(let i = 0; i < selectedPSet.length; i++){\n            psetID.push(selectedPSet[i]._id);\n        }\n        fetch('/api/user/pset/remove', {\n            method: 'POST',\n            body: JSON.stringify({username: this.context.username, psetID: psetID}),\n            headers: {\n                'Content-type': 'application/json'\n            }\n        })\n            .then(res => res.json())\n            .then(resData => {\n                APIHelper.messageAfterRequest(1, resData, null, this.messages);\n                var saved = this.state.psetSaved;\n                saved = this.removePSetByID(saved, psetID);\n                this.setState({psetSaved: saved}, callback(0));\n            })\n            .catch(err => {\n                APIHelper.messageAfterRequest(0, err, null, this.messages);\n                callback(1);\n            });\n    }\n\n    cancelPSetRequest = (selectedPSet, callback) => {\n        var psetID = []\n        for(let i = 0; i < selectedPSet.length; i++){\n            psetID.push(selectedPSet[i]._id);\n        }\n        fetch('/api/pset/cancel', {\n            method: 'POST',\n            body: JSON.stringify({username: this.context.username, psetID: psetID}),\n            headers: {\n                'Content-type': 'application/json'\n            }\n        })\n            .then(res => res.json())\n            .then(resData => {\n                APIHelper.messageAfterRequest(1, resData, null, this.messages);\n                var inProcess = this.state.psetInProcess;\n                inProcess = this.removePSetByID(inProcess, psetID);\n                this.setState({psetInProcess: inProcess}, callback(0));\n            })\n            .catch(err => {\n                APIHelper.messageAfterRequest(0, err, null, this.messages);\n                callback(1);\n            });\n    }\n\n    findPSetByID(psetArray, id){\n        for(let i = 0; i < psetArray.length; i++){\n            if(psetArray[i]._id === id){\n                return(i)\n            }\n        }\n        return(-1);\n    }\n\n    removePSetByID(psets, selected){\n        for(let i = 0; i < selected.length; i++){\n            let index = this.findPSetByID(psets, selected[i]);\n            if(index > -1){\n                psets.splice(index, 1);\n            }\n        }\n        return(psets);\n    }\n\n    render(){   \n        return(\n            <div className='pageContent'>\n                <h2>Your Profile</h2>\n                <div className='userProfile'>\n                    <UserInfo />\n                    <div className='userPSetLists'>\n                        <Messages ref={(el) => this.messages = el} />\n                        <UserPSet heading='Your Saved PSets' btnLabel='Remove from List' \n                            pset={this.state.psetSaved} \n                            handleBtnClick={this.removeFromSavedList}\n                            messages={this.messages}\n                        />\n                        <UserPSet heading='Your PSet Requests in Process'\n                            pset={this.state.psetInProcess} \n                            pending={true}\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Profile;","import React, {useState, useContext, useEffect} from 'react';\nimport {Button} from 'primereact/button';\nimport {InputText} from 'primereact/inputtext';\nimport {Messages} from 'primereact/messages';\nimport {AuthContext} from '../../context/auth';\n\nconst AuthForm = (props) => {\n    \n    const auth = useContext(AuthContext);\n    \n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [passwordReg1, setPasswordReg1] = useState('');\n    const [passwordReg2, setPasswordReg2] = useState('');\n    const [userChecked, setUserChecked] = useState(false);\n    const [userExists, setUserExists] = useState(false);\n    const [userRegistered, setUserRegistered] = useState(false);\n    const [btnFindDisabled, setBtnFindDisabled] = useState(true);\n    const [btnLoginDisabled, setBtnLoginDisabled] = useState(true);\n    const [btnRegDisabled, setBtnRegDisabled] = useState(true);\n\n    useEffect(() => {\n        const regex = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/;\n        regex.test(email) ? setBtnFindDisabled(false) : setBtnFindDisabled(true);\n    }, [email]);\n\n    useEffect(() => {\n        password.length >= 6 ? setBtnLoginDisabled(false) : setBtnLoginDisabled(true);\n    }, [password]);\n\n    useEffect(() => {\n        passwordReg1.length >= 6 ?  passwordReg1 === passwordReg2 && setBtnRegDisabled(false) : setBtnRegDisabled(true);\n    }, [passwordReg1, passwordReg2])\n\n    const handleInputChange = (event) => {\n        var name = event.target.name;\n        switch(name){\n            case 'email':\n                setEmail(event.target.value);\n                break;\n            case 'password':\n                setPassword(event.target.value);\n                break;\n            case 'passwordReg1':\n                setPasswordReg1(event.target.value);\n                break;\n            case 'passwordReg2':\n                setPasswordReg2(event.target.value);\n                break;\n            default:\n                break;\n        }\n    }\n\n    const initialize = () => {\n        setEmail('');\n        setPassword('');\n        setPasswordReg1('');\n        setPasswordReg2('');\n        setUserChecked(false);\n        setUserExists(false);\n        setUserRegistered(false);\n        setBtnFindDisabled(true);\n        setBtnLoginDisabled(true);\n        setBtnRegDisabled(true);\n    }\n\n    const onFindClick = async (event) => {\n        event.preventDefault();\n        const api = '/api/user/check/?username=' + email;\n        const res = await fetch(api);\n        const json = await res.json();\n        if(res.ok){\n            setUserChecked(true);\n            setUserExists(json.exists);\n            setUserRegistered(json.registered);\n        }\n    }\n\n    const onLoginClick = async (event) => {\n        event.preventDefault();\n        const res = await fetch('/api/user/login', {\n            method: 'POST',\n            body: JSON.stringify({\n                user: { username: email, password: password }   \n            }),\n            headers: { 'Content-type': 'application/json' }\n        })\n        const data = await res.json();\n        if(data.authenticated){\n            console.log('authenticated');\n            initialize();\n            auth.setAuthToken(data);\n        }else{\n            AuthForm.messages.show({severity: 'error', summary: 'Login Failed', detail: 'Please re-enter your email and password.'});\n        }\n    }\n\n    const onRegisterClick = async (event) => {\n        event.preventDefault();\n        const res = await fetch('/api/user/register', {\n            method: 'POST',\n            body: JSON.stringify({\n                user: { username: email, password: passwordReg1, exists: userExists }\n            }),\n            headers: { 'Content-type': 'application/json' }\n        })\n        const data = await res.json();\n        if(res.status){\n            initialize();\n            auth.setAuthToken({authenticated: data.authenticated, username: data.username});\n        }else{\n            AuthForm.messages.show({severity: 'error', summary: 'Registration Failed', detail: data.message});\n        }\n    }\n\n    const onResetClick = async (event) => {\n        event.preventDefault()\n        console.log('reset click')\n        const res = await fetch('/api/user/reset/email', {\n            method: 'POST',\n            body: JSON.stringify({\n                email: email \n            }),\n            headers: { 'Content-type': 'application/json' }\n        })\n        const data = await res.json()\n        if(res.ok){\n            AuthForm.messages.show({severity: 'success', summary: 'Email has been sent.', detail: 'Please follow the link in the email to reset your password.'});\n        }else{\n            AuthForm.messages.show({severity: 'error', summary: 'An error occurred', detail: data.message});\n        }\n    }\n\n    const loginForm = () => {\n        return(\n            <React.Fragment>\n                <h4>Login with your password:</h4>\n                <div className='pwdMsg'>Password needs to be at least 6 characters in length</div>\n                <InputText className='pwdInput' type='password' name='password' value={password} onChange={handleInputChange}/>\n                <div>\n                    <Button label='Login' onClick={onLoginClick} disabled={btnLoginDisabled}/>\n                </div>\n                <div>\n                    <button className='forgotPasswordBtn' onClick={onResetClick}>Reset your password</button>\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    const registerForm = () => {\n        return(\n            <React.Fragment>\n                <h4>{userExists ? 'Email is not registered. ': 'Email not found. '}Please register.</h4>\n                <div>\n                    <div className='pwdMsg'>Password needs to be at least 6 characters in length</div>\n                    <InputText className='pwdInput' type='password' name='passwordReg1' value={passwordReg1} onChange={handleInputChange}/>\n                </div>\n                <div>\n                    <label>Confirm your password:</label>\n                    <InputText className='pwdInput' type='password' name='passwordReg2' value={passwordReg2} onChange={handleInputChange}/>\n                </div>\n                <div>\n                    <Button label='Register' onClick={onRegisterClick} disabled={btnRegDisabled}/>\n                </div>\n            </React.Fragment>\n        );\n    }\n\n    \n    return(\n        <React.Fragment>\n            <h2>Login/Register</h2>\n            <Messages ref={(el) => AuthForm.messages = el}></Messages>\n            <h4>Enter your email:</h4>\n            <div className='emailInput'>\n                <InputText type='email' name='email' value={email} onChange={handleInputChange}/>\n                <Button className='btnLoginFind' label='Find' icon=\"pi pi-arrow-right\" onClick={onFindClick} disabled={btnFindDisabled}/>\n            </div>\n            { userChecked ? <div className='formContainer'>{userRegistered ? loginForm() : registerForm()}</div> : '' }\n        </React.Fragment>\n    );\n}\n\nexport default AuthForm;","import React, {useContext} from 'react';\nimport { Redirect } from 'react-router-dom';\nimport AuthForm from './AuthForm';\nimport './Login.css';\nimport {AuthContext} from '../../context/auth';\nimport {withRouter} from 'react-router';\n\nconst Login = (props) => {\n    const auth = useContext(AuthContext);\n    const { location } = props\n    const msg = location.state ? location.state.logoutMsg : undefined;\n\n    return(\n        <React.Fragment>\n            {auth.authenticated ? \n                    location.state ? \n                    <Redirect to={location.state.path}/> \n                    :\n                    <Redirect to={'/Profile'}/> \n                : \n                <div className='pageContent'>\n                    <div className=\"loginRegContent\">\n                        <div className='logoutMsg'>{msg ? msg : ''}</div>\n                        <AuthForm />\n                    </div>   \n                </div>\n            }\n        </React.Fragment>\n    );\n}\n\nexport default withRouter(Login);","import React, {useState, useEffect} from 'react';\nimport {InputText} from 'primereact/inputtext';\nimport {Button} from 'primereact/button';\nimport {Messages} from 'primereact/messages';\nimport './Login.css';\n\nconst Reset = (props) => {\n\n    const [email, setEmail] = useState('')\n    const [password1, setPassword1] = useState('')\n    const [password2, setPassword2] = useState('')\n    const [btnDisabled, setBtnDisabled] = useState(true)\n\n    useEffect(() => {\n        const regex = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/;\n        (password1.length >= 6 && password1 === password2 && regex.test(email)) ? setBtnDisabled(false) : setBtnDisabled(true)\n    }, [email, password1, password2])\n\n    const onResetClick = async (event) => {\n        event.preventDefault()\n        const res = await fetch('/api/user/reset/token', {\n            method: 'POST',\n            body: JSON.stringify({\n                user: { \n                    username: email, \n                    password: password1,\n                    token: props.match.params.token \n                }   \n            }),\n            headers: { 'Content-type': 'application/json' }\n        })\n        const data = await res.json()\n        console.log(data)\n        if(data.status){\n            Reset.messages.show({severity: 'success', summary: 'Password has been reset', detail: 'Please login using your new password.'});\n        }else{\n            Reset.messages.show({severity: 'error', summary: 'Password could not be reset', detail: data.message});\n        }\n    }\n    \n    return(\n        <React.Fragment>\n            <div className='pageContent'>\n                <div className=\"loginRegContent\">\n                    <h2>Reset Password</h2>\n                    <Messages ref={(el) => Reset.messages = el}></Messages>\n                    <div className='emailInput'>\n                        <label>Email:</label>\n                        <InputText type='email' name='email' value={email} onChange={(e) => {setEmail(e.target.value)}}/>\n                    </div>\n                    <div className='formContainer'>\n                        <h4>Enter new password</h4>\n                        <div>\n                            <div className='pwdMsg'>Password needs to be at least 6 characters in length</div>\n                            <InputText className='pwdInput' type='password' name='password1' value={password1} onChange={(e) => {setPassword1(e.target.value)}}/>\n                        </div>\n                        <div>\n                            <label>Confirm new password:</label>\n                            <InputText className='pwdInput' type='password' name='password2' value={password2} onChange={(e) => {setPassword2(e.target.value)}}/>\n                        </div>\n                        <div>\n                            <Button label='Reset' onClick={onResetClick} disabled={btnDisabled}/>\n                        </div>\n                    </div>\n                </div> \n            </div>\n        </React.Fragment>\n    );\n}\n\nexport default Reset","import React from 'react';\n\nclass DatasetTabContent extends React.Component{\n\n    render(){          \n        const publication = (\n            <div>    \n            {this.props.metadata.dataset.versionInfo.publication.length ? \n                this.props.metadata.dataset.versionInfo.publication.map((item) => \n                    <li key={item.link} className='pubList'>\n                        <div className='subContent'>{item.citation}</div>\n                        <br />\n                        <div className='subContent'><a href={item.link}>{item.link}</a></div>\n                    </li>\n                )\n                :\n                <div className=\"subContent\">\n                    Not available.\n                </div>\n                }  \n            </div> \n        );\n        \n        return(\n            <React.Fragment>\n                <h1 className='tabMainHeader'>Dataset: {this.props.metadata.dataset.label}</h1>\n                <div className='tabContent'>\n                    <div className='tabContentSection'>\n                        <h3>Drug Sensitivity</h3>\n                        <h4 className='subContent'>Source: {\n                            this.props.metadata.dataset.versionInfo.drugSensitivity.source ? \n                            <a href={this.props.metadata.dataset.versionInfo.drugSensitivity.source}>{this.props.metadata.dataset.versionInfo.drugSensitivity.source}</a> \n                            : 'Not available'\n                            }\n                        </h4>\n                        <h4 className='subContent'>Version: {this.props.metadata.dataset.versionInfo.drugSensitivity.version}</h4>\n                    </div>\n                    \n                    <div className='tabContentSection'>\n                        <h3>Publication: </h3>\n                        <ul>\n                            {publication}\n                        </ul> \n                    </div>\n                    \n                    <div className='tabContentSection'>\n                        <h3>Genome Version</h3>\n                        <div className='subContent'>{this.props.metadata.genome.name ? this.props.metadata.genome.name : \"Not Available\"}</div>\n                    </div>\n                </div> \n            </React.Fragment>\n        );\n    }\n}\n\nexport default DatasetTabContent;","import React from 'react';\nimport {PSetToolAccordion, RNARefAccordion} from '../PSetAccordion';\n\nclass RNATabContent extends React.Component{\n    \n    render(){   \n        const genomeRawData = (   \n            <div>\n                { this.props.metadata.rawSeqDataRNA ? <a href={this.props.metadata.rawSeqDataRNA}>{this.props.metadata.rawSeqDataRNA}</a> : 'Not Available' }\n            </div>\n        );\n\n        return(\n            <React.Fragment>\n                <h1 className='tabMainHeader'>Analysis Details - RNA Data</h1>\n                <div className='tabContent'>\n                    <div className='tabContentSection'>\n                        <h3>Raw Data Source: </h3>\n                        <div className='subContent'>\n                            {genomeRawData}\n                        </div>\n                    </div>\n                    <div className='tabContentSection'>\n                        <h3>RNA Transcriptome</h3>\n                        <RNARefAccordion items={this.props.metadata.rnaRef} />\n                    </div>\n                    <div className='tabContentSection'>\n                        <h3>Tools and Commands Used</h3>\n                        <PSetToolAccordion items={this.props.metadata.rnaTool} />\n                    </div>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default RNATabContent;","import React from 'react';\nimport {PSetToolAccordion, DNARefAccordion} from '../PSetAccordion';\n\nclass DNATabContent extends React.Component{\n    \n    render(){  \n        const genomeRawData = (\n            <div>\n                { this.props.metadata.rawSeqDataDNA ? <a href={this.props.metadata.rawSeqDataDNA}>{this.props.metadata.rawSeqDataDNA}</a> : 'Not Available' }\n            </div>\n        );\n\n        return(\n            <React.Fragment>\n                <h1 className='tabMainHeader'>Analysis Details - DNA(Exome) Data</h1>\n                <div className='tabContent'>\n                    <div className='tabContentSection'>\n                        <h3>Raw Data Source: </h3>\n                        <div className='subContent'>\n                            {genomeRawData}\n                        </div>\n                    </div>\n                    <div className='tabContentSection'>\n                        <h3>Exome Reference</h3>\n                        <DNARefAccordion items={this.props.metadata.dnaRef} />\n                    </div>\n                    <div className='tabContentSection'>\n                        <h3>Tools and Commands Used</h3>\n                        <PSetToolAccordion items={this.props.metadata.dnaTool} />\n                    </div>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default DNATabContent;","import React from 'react';\nimport {Button} from 'primereact/button';\nimport * as API from '../APICalls';\n\nclass DownloadPSetButton extends React.Component{\n    constructor(){\n        super();\n        this.downloadPSet = this.downloadPSet.bind(this);\n    }\n\n    downloadPSet = event => {\n        event.preventDefault();\n        \n        const pset = this.props.pset;\n        const anchor = document.createElement('a');\n        anchor.setAttribute('download', null);\n        anchor.style.display = 'none';\n        anchor.setAttribute('href', pset.downloadLink)\n        document.body.appendChild(anchor);\n        anchor.click();\n        document.body.removeChild(anchor);\n\n        API.downloadPSet(pset._id);\n    }\n\n    render(){\n        return(\n            <Button className='downloadBtn' label='Download' disabled={this.props.disabled} onClick={this.downloadPSet} />\n        );\n    }\n}\n\nexport default DownloadPSetButton;","import React from 'react';\nimport './PSet.css';\nimport {TabView,TabPanel} from 'primereact/tabview';\nimport * as APICalls from '../Shared/APICalls';\nimport {GeneralInfoAccordion} from './PSetAccordion';\nimport DatasetTabContent from './TabContents/DatasetTabContent';\nimport RNATabContent from './TabContents/RNATabContent';\nimport DNATabContent from './TabContents/DNATabContent';\nimport * as APIHelper from '../Shared/PSetAPIHelper';\nimport DownloadPSetButton from '../Shared/Buttons/DownloadPSetButton';\nimport {Messages} from 'primereact/messages';\n\nclass PSet extends React.Component{\n    constructor(){\n        super();\n        this.state = {\n            pset: {},\n            general: {},\n            dataset: {},\n            rna: {},\n            dna: {},\n            isReady: false,\n            message: ''\n        }\n        this.showMessage = this.showMessage.bind(this);\n    }\n\n    componentDidMount(){\n        console.log(this.props.match.params.id1 + '/' + this.props.match.params.id2);\n        let apiStr = '/api/pset/one/' + this.props.match.params.id1 + '/' + this.props.match.params.id2;\n        console.log(apiStr);\n        APICalls.queryPSet(apiStr, (pset) => {\n            console.log(pset);\n            if(pset){\n                this.setState({\n                    pset: pset,\n                    general: {name: pset.name, doi: pset.doi, createdBy: pset.createdBy, dateCreated: pset.dateCreated},\n                    dataset: {dataset: pset.dataset, genome: pset.genome},\n                    rna: {rnaTool: pset.rnaTool, rnaRef: pset.rnaRef, rawSeqDataRNA: pset.dataset.versionInfo.rawSeqDataRNA},\n                    dna: {dnaTool: pset.dnaTool, dnaRef: pset.dnaRef, rawSeqDataDNA: pset.dataset.versionInfo.rawSeqDataDNA},\n                    isReady: true\n                });\n            }else{\n                this.setState({message: 'We could not find a PSet with the ID.'})\n            }\n        });\n    }\n\n    showMessage(status, data){\n        APIHelper.messageAfterRequest(status, data, this.initializeState, this.messages);\n    }\n\n    render(){\n        return(\n            <div className='pageContent'>\n                <Messages ref={(el) => this.messages = el} />\n                <div className='psetTitle'>\n                    <h2>Explore PSet - {this.state.pset.name}</h2>\n                    <DownloadPSetButton disabled={false} pset={this.state.pset} onDownloadComplete={this.showMessage}/>\n                </div>\n                <GeneralInfoAccordion data={this.state.general}/>\n                <div className='tabContainer'>\n                    {this.state.isReady ? \n                        <TabView renderActiveOnly={false}>\n                            <TabPanel header=\"Dataset\">\n                                <DatasetTabContent metadata={this.state.dataset} />   \n                            </TabPanel>\n                            {this.state.pset.dataType.map((type) => \n                                <TabPanel key={type.name} header={type.name}>\n                                    {type.name === 'RNA' ? \n                                        <RNATabContent metadata={this.state.rna}/> \n                                        : \n                                        <DNATabContent metadata={this.state.dna}/>\n                                    }\n                                </TabPanel>)\n                            }\n                        </TabView>\n                        : \n                        <h3>{this.state.message}</h3>\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default PSet;","import React from 'react';\n\nconst NotFound404 = (props) => {\n\n    return(\n        <React.Fragment>\n            <div className='pageContent'>\n                <h2>The page you are looking for could not be found.</h2>\n            </div>\n        </React.Fragment>\n    );\n}\n\nexport default NotFound404;","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { AuthContext } from \"../../context/auth\";\nimport Navigation from '../Navigation/Navigation';\nimport Footer from '../Footer/Footer';\nimport PrivateRoute from './PrivateRoute';\nimport Main from '../Main/Main';\nimport PSetSearch from '../PSetSearch/PSetSearch';\nimport Dashboard from '../Dashboard/Dashboard';\nimport Stats from '../Stats/Stats';\nimport Documentation from '../Documentation/Documentation';\nimport Tutorial from '../Documentation/Support/Tutorial';\nimport Profile from '../Profile/Profile';\nimport Login from '../Authentication/Login';\nimport Reset from '../Authentication/Reset';\nimport PSet from '../PSet/PSet';\nimport NotFound404 from '../Shared/NotFound404';\n\nclass Router extends React.Component{\n    constructor(){\n        super();\n        this.state = {\n            authenticated: false,\n            isAdmin: false,\n            username: '',\n            setAuthToken: (value) => {\n                this.setState({\n                    authenticated: value.authenticated,\n                    username: value.username,\n                    isAdmin: value.isAdmin\n                });\n            },\n            resetAuthToken: () => {\n                this.setState({\n                    authenticated: false,\n                    isAdmin: false,\n                    user: ''\n                });\n            }\n        }\n    }\n\n    componentDidMount(){\n        if(!this.state.authenticated){\n            fetch('/api/user/checkToken')\n            .then(res => {\n                if(res.status === 200){\n                    return(res.json());\n                }else{\n                    return({authenticated: false, isAdmin: false, username: ''});\n                }\n            })\n            .then(data => {\n                this.state.setAuthToken(data)\n            });\n        }\n    }\n\n    render(){\n        \n        const profile = (\n            <Profile />\n        );\n\n        return(\n            <AuthContext.Provider value={this.state}>\n                <Switch>\n                    <Route exact path ='/' component={Main} /> \n                    <Route exact path ='/PSetSearch' component={PSetSearch}/>\n                    <Route exact path ='/Dashboard' component={Dashboard}/>\n                    <Route exact path ='/Stats' component={Stats}/>\n                    <Route exact path ='/Documentation' component={Documentation}/>\n                    <Route exact path ='/Tutorial' component={Tutorial}/>\n                    <Route exact path='/Authentication' component={Login} />\n                    <Route path ='/Reset/:token' component={Reset} />\n                    <Route path='/:id1/:id2' component={PSet} />\n                    <PrivateRoute path='/Profile' component={profile} redirect='/Authentication' />\n                    <Route component={NotFound404}/>\n                </Switch>\n                <Navigation />\n                <Footer />\n            </AuthContext.Provider>\n        );\n    }\n}\n\nexport default Router;","import React from 'react';\nimport './App.css';\nimport './PrimeStyle.css';\nimport Router from '../Routing/Router';\n\nclass App extends React.Component {\n\trender(){\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<Router />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'primereact/resources/themes/nova-light/theme.css';\nimport 'primereact/resources/primereact.min.css';\nimport 'primeicons/primeicons.css';\nimport App from './components/App/App';\nimport { BrowserRouter } from 'react-router-dom';\nimport * as serviceWorker from './components/serviceWorker';\n\nReactDOM.render((\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>\n), document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}